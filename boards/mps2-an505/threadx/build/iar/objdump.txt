###############################################################################
#
# IAR ELF Dumper V9.50.2.385 for ARM                      17/Oct/2024  23:24:42
# Copyright 2007-2024 IAR Systems AB.
#
#    Input file   =
#        C:\Users\xidon\code\github\qemu-simulator\boards\mps2-an505\threadx\build\iar\an505-qemu.out
#    Output file  =
#        C:\Users\xidon\code\github\qemu-simulator\boards\mps2-an505\threadx\build\iar\objdump.txt
#    Command line =
#        --source --code .\build\iar/an505-qemu.out -o .\build\iar/objdump.txt
#
###############################################################################



Section #4 A0:

                 $d:
                 `.intvec7`:
                 __vector_table:
                 __Vectors:
  0x1000'0000: 0x3800'3448  DC32 CSTACK$$Limit
  0x1000'0004: 0x1000'41a5  DC32 Reset_Handler
  0x1000'0008: 0x1000'1c8b  DC32 Interrupt9_Handler
  0x1000'000c: 0x1000'3a77  DC32 HardFault_Handler
  0x1000'0010: 0x1000'1c8b  DC32 Interrupt9_Handler
  0x1000'0014: 0x1000'1c8b  DC32 Interrupt9_Handler
  0x1000'0018: 0x1000'3a79  DC32 UsageFault_Handler
                 __vector_table_0x1c:
  0x1000'001c: 0x1000'1c8b  DC32 Interrupt9_Handler
  0x1000'0020: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0024: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0028: 0x0000'0000  DC32 0                  ; '....'
  0x1000'002c: 0x1000'1c8b  DC32 Interrupt9_Handler
  0x1000'0030: 0x1000'1c8b  DC32 Interrupt9_Handler
  0x1000'0034: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0038: 0x1000'3985  DC32 PendSV_Handler
  0x1000'003c: 0x1000'3a6b  DC32 SysTick_Handler
  0x1000'0040: 0x1000'1c8b  DC32 Interrupt9_Handler
  0x1000'0044: 0x1000'1c8b  DC32 Interrupt9_Handler
  0x1000'0048: 0x1000'1c8b  DC32 Interrupt9_Handler
  0x1000'004c: 0x1000'1c8b  DC32 Interrupt9_Handler
  0x1000'0050: 0x1000'1c8b  DC32 Interrupt9_Handler
  0x1000'0054: 0x1000'1c8b  DC32 Interrupt9_Handler
  0x1000'0058: 0x1000'1c8b  DC32 Interrupt9_Handler
  0x1000'005c: 0x1000'1c8b  DC32 Interrupt9_Handler
  0x1000'0060: 0x1000'1c8b  DC32 Interrupt9_Handler
  0x1000'0064: 0x1000'1c8b  DC32 Interrupt9_Handler
  0x1000'0068: 0x0000'0000  DC32 0                  ; '....'
  0x1000'006c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0070: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0074: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0078: 0x0000'0000  DC32 0                  ; '....'
  0x1000'007c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0080: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0084: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0088: 0x0000'0000  DC32 0                  ; '....'
  0x1000'008c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0090: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0094: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0098: 0x0000'0000  DC32 0                  ; '....'
  0x1000'009c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'00a0: 0x0000'0000  DC32 0                  ; '....'
  0x1000'00a4: 0x0000'0000  DC32 0                  ; '....'
  0x1000'00a8: 0x0000'0000  DC32 0                  ; '....'
  0x1000'00ac: 0x0000'0000  DC32 0                  ; '....'
  0x1000'00b0: 0x0000'0000  DC32 0                  ; '....'
  0x1000'00b4: 0x0000'0000  DC32 0                  ; '....'
  0x1000'00b8: 0x0000'0000  DC32 0                  ; '....'
  0x1000'00bc: 0x0000'0000  DC32 0                  ; '....'
  0x1000'00c0: 0x0000'0000  DC32 0                  ; '....'
  0x1000'00c4: 0x0000'0000  DC32 0                  ; '....'
  0x1000'00c8: 0x0000'0000  DC32 0                  ; '....'
  0x1000'00cc: 0x0000'0000  DC32 0                  ; '....'
  0x1000'00d0: 0x0000'0000  DC32 0                  ; '....'
  0x1000'00d4: 0x0000'0000  DC32 0                  ; '....'
  0x1000'00d8: 0x0000'0000  DC32 0                  ; '....'
  0x1000'00dc: 0x0000'0000  DC32 0                  ; '....'
  0x1000'00e0: 0x0000'0000  DC32 0                  ; '....'
  0x1000'00e4: 0x0000'0000  DC32 0                  ; '....'
  0x1000'00e8: 0x0000'0000  DC32 0                  ; '....'
  0x1000'00ec: 0x0000'0000  DC32 0                  ; '....'
  0x1000'00f0: 0x0000'0000  DC32 0                  ; '....'
  0x1000'00f4: 0x0000'0000  DC32 0                  ; '....'
  0x1000'00f8: 0x0000'0000  DC32 0                  ; '....'
  0x1000'00fc: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0100: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0104: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0108: 0x0000'0000  DC32 0                  ; '....'
  0x1000'010c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0110: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0114: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0118: 0x0000'0000  DC32 0                  ; '....'
  0x1000'011c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0120: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0124: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0128: 0x0000'0000  DC32 0                  ; '....'
  0x1000'012c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0130: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0134: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0138: 0x0000'0000  DC32 0                  ; '....'
  0x1000'013c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0140: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0144: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0148: 0x0000'0000  DC32 0                  ; '....'
  0x1000'014c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0150: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0154: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0158: 0x0000'0000  DC32 0                  ; '....'
  0x1000'015c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0160: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0164: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0168: 0x0000'0000  DC32 0                  ; '....'
  0x1000'016c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0170: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0174: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0178: 0x0000'0000  DC32 0                  ; '....'
  0x1000'017c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0180: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0184: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0188: 0x0000'0000  DC32 0                  ; '....'
  0x1000'018c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0190: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0194: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0198: 0x0000'0000  DC32 0                  ; '....'
  0x1000'019c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'01a0: 0x0000'0000  DC32 0                  ; '....'
  0x1000'01a4: 0x0000'0000  DC32 0                  ; '....'
  0x1000'01a8: 0x0000'0000  DC32 0                  ; '....'
  0x1000'01ac: 0x0000'0000  DC32 0                  ; '....'
  0x1000'01b0: 0x0000'0000  DC32 0                  ; '....'
  0x1000'01b4: 0x0000'0000  DC32 0                  ; '....'
  0x1000'01b8: 0x0000'0000  DC32 0                  ; '....'
  0x1000'01bc: 0x0000'0000  DC32 0                  ; '....'
  0x1000'01c0: 0x0000'0000  DC32 0                  ; '....'
  0x1000'01c4: 0x0000'0000  DC32 0                  ; '....'
  0x1000'01c8: 0x0000'0000  DC32 0                  ; '....'
  0x1000'01cc: 0x0000'0000  DC32 0                  ; '....'
  0x1000'01d0: 0x0000'0000  DC32 0                  ; '....'
  0x1000'01d4: 0x0000'0000  DC32 0                  ; '....'
  0x1000'01d8: 0x0000'0000  DC32 0                  ; '....'
  0x1000'01dc: 0x0000'0000  DC32 0                  ; '....'
  0x1000'01e0: 0x0000'0000  DC32 0                  ; '....'
  0x1000'01e4: 0x0000'0000  DC32 0                  ; '....'
  0x1000'01e8: 0x0000'0000  DC32 0                  ; '....'
  0x1000'01ec: 0x0000'0000  DC32 0                  ; '....'
  0x1000'01f0: 0x0000'0000  DC32 0                  ; '....'
  0x1000'01f4: 0x0000'0000  DC32 0                  ; '....'
  0x1000'01f8: 0x0000'0000  DC32 0                  ; '....'
  0x1000'01fc: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0200: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0204: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0208: 0x0000'0000  DC32 0                  ; '....'
  0x1000'020c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0210: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0214: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0218: 0x0000'0000  DC32 0                  ; '....'
  0x1000'021c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0220: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0224: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0228: 0x0000'0000  DC32 0                  ; '....'
  0x1000'022c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0230: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0234: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0238: 0x0000'0000  DC32 0                  ; '....'
  0x1000'023c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0240: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0244: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0248: 0x0000'0000  DC32 0                  ; '....'
  0x1000'024c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0250: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0254: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0258: 0x0000'0000  DC32 0                  ; '....'
  0x1000'025c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0260: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0264: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0268: 0x0000'0000  DC32 0                  ; '....'
  0x1000'026c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0270: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0274: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0278: 0x0000'0000  DC32 0                  ; '....'
  0x1000'027c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0280: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0284: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0288: 0x0000'0000  DC32 0                  ; '....'
  0x1000'028c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0290: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0294: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0298: 0x0000'0000  DC32 0                  ; '....'
  0x1000'029c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'02a0: 0x0000'0000  DC32 0                  ; '....'
  0x1000'02a4: 0x0000'0000  DC32 0                  ; '....'
  0x1000'02a8: 0x0000'0000  DC32 0                  ; '....'
  0x1000'02ac: 0x0000'0000  DC32 0                  ; '....'
  0x1000'02b0: 0x0000'0000  DC32 0                  ; '....'
  0x1000'02b4: 0x0000'0000  DC32 0                  ; '....'
  0x1000'02b8: 0x0000'0000  DC32 0                  ; '....'
  0x1000'02bc: 0x0000'0000  DC32 0                  ; '....'
  0x1000'02c0: 0x0000'0000  DC32 0                  ; '....'
  0x1000'02c4: 0x0000'0000  DC32 0                  ; '....'
  0x1000'02c8: 0x0000'0000  DC32 0                  ; '....'
  0x1000'02cc: 0x0000'0000  DC32 0                  ; '....'
  0x1000'02d0: 0x0000'0000  DC32 0                  ; '....'
  0x1000'02d4: 0x0000'0000  DC32 0                  ; '....'
  0x1000'02d8: 0x0000'0000  DC32 0                  ; '....'
  0x1000'02dc: 0x0000'0000  DC32 0                  ; '....'
  0x1000'02e0: 0x0000'0000  DC32 0                  ; '....'
  0x1000'02e4: 0x0000'0000  DC32 0                  ; '....'
  0x1000'02e8: 0x0000'0000  DC32 0                  ; '....'
  0x1000'02ec: 0x0000'0000  DC32 0                  ; '....'
  0x1000'02f0: 0x0000'0000  DC32 0                  ; '....'
  0x1000'02f4: 0x0000'0000  DC32 0                  ; '....'
  0x1000'02f8: 0x0000'0000  DC32 0                  ; '....'
  0x1000'02fc: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0300: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0304: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0308: 0x0000'0000  DC32 0                  ; '....'
  0x1000'030c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0310: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0314: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0318: 0x0000'0000  DC32 0                  ; '....'
  0x1000'031c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0320: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0324: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0328: 0x0000'0000  DC32 0                  ; '....'
  0x1000'032c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0330: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0334: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0338: 0x0000'0000  DC32 0                  ; '....'
  0x1000'033c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0340: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0344: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0348: 0x0000'0000  DC32 0                  ; '....'
  0x1000'034c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0350: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0354: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0358: 0x0000'0000  DC32 0                  ; '....'
  0x1000'035c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0360: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0364: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0368: 0x0000'0000  DC32 0                  ; '....'
  0x1000'036c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0370: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0374: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0378: 0x0000'0000  DC32 0                  ; '....'
  0x1000'037c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0380: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0384: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0388: 0x0000'0000  DC32 0                  ; '....'
  0x1000'038c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0390: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0394: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0398: 0x0000'0000  DC32 0                  ; '....'
  0x1000'039c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'03a0: 0x0000'0000  DC32 0                  ; '....'
  0x1000'03a4: 0x0000'0000  DC32 0                  ; '....'
  0x1000'03a8: 0x0000'0000  DC32 0                  ; '....'
  0x1000'03ac: 0x0000'0000  DC32 0                  ; '....'
  0x1000'03b0: 0x0000'0000  DC32 0                  ; '....'
  0x1000'03b4: 0x0000'0000  DC32 0                  ; '....'
  0x1000'03b8: 0x0000'0000  DC32 0                  ; '....'
  0x1000'03bc: 0x0000'0000  DC32 0                  ; '....'
  0x1000'03c0: 0x0000'0000  DC32 0                  ; '....'
  0x1000'03c4: 0x0000'0000  DC32 0                  ; '....'
  0x1000'03c8: 0x0000'0000  DC32 0                  ; '....'
  0x1000'03cc: 0x0000'0000  DC32 0                  ; '....'
  0x1000'03d0: 0x0000'0000  DC32 0                  ; '....'
  0x1000'03d4: 0x0000'0000  DC32 0                  ; '....'
  0x1000'03d8: 0x0000'0000  DC32 0                  ; '....'
  0x1000'03dc: 0x0000'0000  DC32 0                  ; '....'
  0x1000'03e0: 0x0000'0000  DC32 0                  ; '....'
  0x1000'03e4: 0x0000'0000  DC32 0                  ; '....'
  0x1000'03e8: 0x0000'0000  DC32 0                  ; '....'
  0x1000'03ec: 0x0000'0000  DC32 0                  ; '....'
  0x1000'03f0: 0x0000'0000  DC32 0                  ; '....'
  0x1000'03f4: 0x0000'0000  DC32 0                  ; '....'
  0x1000'03f8: 0x0000'0000  DC32 0                  ; '....'
  0x1000'03fc: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0400: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0404: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0408: 0x0000'0000  DC32 0                  ; '....'
  0x1000'040c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0410: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0414: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0418: 0x0000'0000  DC32 0                  ; '....'
  0x1000'041c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0420: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0424: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0428: 0x0000'0000  DC32 0                  ; '....'
  0x1000'042c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0430: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0434: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0438: 0x0000'0000  DC32 0                  ; '....'
  0x1000'043c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0440: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0444: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0448: 0x0000'0000  DC32 0                  ; '....'
  0x1000'044c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0450: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0454: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0458: 0x0000'0000  DC32 0                  ; '....'
  0x1000'045c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0460: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0464: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0468: 0x0000'0000  DC32 0                  ; '....'
  0x1000'046c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0470: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0474: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0478: 0x0000'0000  DC32 0                  ; '....'
  0x1000'047c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0480: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0484: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0488: 0x0000'0000  DC32 0                  ; '....'
  0x1000'048c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0490: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0494: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0498: 0x0000'0000  DC32 0                  ; '....'
  0x1000'049c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'04a0: 0x0000'0000  DC32 0                  ; '....'
  0x1000'04a4: 0x0000'0000  DC32 0                  ; '....'
  0x1000'04a8: 0x0000'0000  DC32 0                  ; '....'
  0x1000'04ac: 0x0000'0000  DC32 0                  ; '....'
  0x1000'04b0: 0x0000'0000  DC32 0                  ; '....'
  0x1000'04b4: 0x0000'0000  DC32 0                  ; '....'
  0x1000'04b8: 0x0000'0000  DC32 0                  ; '....'
  0x1000'04bc: 0x0000'0000  DC32 0                  ; '....'
  0x1000'04c0: 0x0000'0000  DC32 0                  ; '....'
  0x1000'04c4: 0x0000'0000  DC32 0                  ; '....'
  0x1000'04c8: 0x0000'0000  DC32 0                  ; '....'
  0x1000'04cc: 0x0000'0000  DC32 0                  ; '....'
  0x1000'04d0: 0x0000'0000  DC32 0                  ; '....'
  0x1000'04d4: 0x0000'0000  DC32 0                  ; '....'
  0x1000'04d8: 0x0000'0000  DC32 0                  ; '....'
  0x1000'04dc: 0x0000'0000  DC32 0                  ; '....'
  0x1000'04e0: 0x0000'0000  DC32 0                  ; '....'
  0x1000'04e4: 0x0000'0000  DC32 0                  ; '....'
  0x1000'04e8: 0x0000'0000  DC32 0                  ; '....'
  0x1000'04ec: 0x0000'0000  DC32 0                  ; '....'
  0x1000'04f0: 0x0000'0000  DC32 0                  ; '....'
  0x1000'04f4: 0x0000'0000  DC32 0                  ; '....'
  0x1000'04f8: 0x0000'0000  DC32 0                  ; '....'
  0x1000'04fc: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0500: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0504: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0508: 0x0000'0000  DC32 0                  ; '....'
  0x1000'050c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0510: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0514: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0518: 0x0000'0000  DC32 0                  ; '....'
  0x1000'051c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0520: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0524: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0528: 0x0000'0000  DC32 0                  ; '....'
  0x1000'052c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0530: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0534: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0538: 0x0000'0000  DC32 0                  ; '....'
  0x1000'053c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0540: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0544: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0548: 0x0000'0000  DC32 0                  ; '....'
  0x1000'054c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0550: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0554: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0558: 0x0000'0000  DC32 0                  ; '....'
  0x1000'055c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0560: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0564: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0568: 0x0000'0000  DC32 0                  ; '....'
  0x1000'056c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0570: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0574: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0578: 0x0000'0000  DC32 0                  ; '....'
  0x1000'057c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0580: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0584: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0588: 0x0000'0000  DC32 0                  ; '....'
  0x1000'058c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0590: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0594: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0598: 0x0000'0000  DC32 0                  ; '....'
  0x1000'059c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'05a0: 0x0000'0000  DC32 0                  ; '....'
  0x1000'05a4: 0x0000'0000  DC32 0                  ; '....'
  0x1000'05a8: 0x0000'0000  DC32 0                  ; '....'
  0x1000'05ac: 0x0000'0000  DC32 0                  ; '....'
  0x1000'05b0: 0x0000'0000  DC32 0                  ; '....'
  0x1000'05b4: 0x0000'0000  DC32 0                  ; '....'
  0x1000'05b8: 0x0000'0000  DC32 0                  ; '....'
  0x1000'05bc: 0x0000'0000  DC32 0                  ; '....'
  0x1000'05c0: 0x0000'0000  DC32 0                  ; '....'
  0x1000'05c4: 0x0000'0000  DC32 0                  ; '....'
  0x1000'05c8: 0x0000'0000  DC32 0                  ; '....'
  0x1000'05cc: 0x0000'0000  DC32 0                  ; '....'
  0x1000'05d0: 0x0000'0000  DC32 0                  ; '....'
  0x1000'05d4: 0x0000'0000  DC32 0                  ; '....'
  0x1000'05d8: 0x0000'0000  DC32 0                  ; '....'
  0x1000'05dc: 0x0000'0000  DC32 0                  ; '....'
  0x1000'05e0: 0x0000'0000  DC32 0                  ; '....'
  0x1000'05e4: 0x0000'0000  DC32 0                  ; '....'
  0x1000'05e8: 0x0000'0000  DC32 0                  ; '....'
  0x1000'05ec: 0x0000'0000  DC32 0                  ; '....'
  0x1000'05f0: 0x0000'0000  DC32 0                  ; '....'
  0x1000'05f4: 0x0000'0000  DC32 0                  ; '....'
  0x1000'05f8: 0x0000'0000  DC32 0                  ; '....'
  0x1000'05fc: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0600: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0604: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0608: 0x0000'0000  DC32 0                  ; '....'
  0x1000'060c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0610: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0614: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0618: 0x0000'0000  DC32 0                  ; '....'
  0x1000'061c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0620: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0624: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0628: 0x0000'0000  DC32 0                  ; '....'
  0x1000'062c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0630: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0634: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0638: 0x0000'0000  DC32 0                  ; '....'
  0x1000'063c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0640: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0644: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0648: 0x0000'0000  DC32 0                  ; '....'
  0x1000'064c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0650: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0654: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0658: 0x0000'0000  DC32 0                  ; '....'
  0x1000'065c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0660: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0664: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0668: 0x0000'0000  DC32 0                  ; '....'
  0x1000'066c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0670: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0674: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0678: 0x0000'0000  DC32 0                  ; '....'
  0x1000'067c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0680: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0684: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0688: 0x0000'0000  DC32 0                  ; '....'
  0x1000'068c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0690: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0694: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0698: 0x0000'0000  DC32 0                  ; '....'
  0x1000'069c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'06a0: 0x0000'0000  DC32 0                  ; '....'
  0x1000'06a4: 0x0000'0000  DC32 0                  ; '....'
  0x1000'06a8: 0x0000'0000  DC32 0                  ; '....'
  0x1000'06ac: 0x0000'0000  DC32 0                  ; '....'
  0x1000'06b0: 0x0000'0000  DC32 0                  ; '....'
  0x1000'06b4: 0x0000'0000  DC32 0                  ; '....'
  0x1000'06b8: 0x0000'0000  DC32 0                  ; '....'
  0x1000'06bc: 0x0000'0000  DC32 0                  ; '....'
  0x1000'06c0: 0x0000'0000  DC32 0                  ; '....'
  0x1000'06c4: 0x0000'0000  DC32 0                  ; '....'
  0x1000'06c8: 0x0000'0000  DC32 0                  ; '....'
  0x1000'06cc: 0x0000'0000  DC32 0                  ; '....'
  0x1000'06d0: 0x0000'0000  DC32 0                  ; '....'
  0x1000'06d4: 0x0000'0000  DC32 0                  ; '....'
  0x1000'06d8: 0x0000'0000  DC32 0                  ; '....'
  0x1000'06dc: 0x0000'0000  DC32 0                  ; '....'
  0x1000'06e0: 0x0000'0000  DC32 0                  ; '....'
  0x1000'06e4: 0x0000'0000  DC32 0                  ; '....'
  0x1000'06e8: 0x0000'0000  DC32 0                  ; '....'
  0x1000'06ec: 0x0000'0000  DC32 0                  ; '....'
  0x1000'06f0: 0x0000'0000  DC32 0                  ; '....'
  0x1000'06f4: 0x0000'0000  DC32 0                  ; '....'
  0x1000'06f8: 0x0000'0000  DC32 0                  ; '....'
  0x1000'06fc: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0700: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0704: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0708: 0x0000'0000  DC32 0                  ; '....'
  0x1000'070c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0710: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0714: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0718: 0x0000'0000  DC32 0                  ; '....'
  0x1000'071c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0720: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0724: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0728: 0x0000'0000  DC32 0                  ; '....'
  0x1000'072c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0730: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0734: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0738: 0x0000'0000  DC32 0                  ; '....'
  0x1000'073c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0740: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0744: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0748: 0x0000'0000  DC32 0                  ; '....'
  0x1000'074c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0750: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0754: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0758: 0x0000'0000  DC32 0                  ; '....'
  0x1000'075c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0760: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0764: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0768: 0x0000'0000  DC32 0                  ; '....'
  0x1000'076c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0770: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0774: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0778: 0x0000'0000  DC32 0                  ; '....'
  0x1000'077c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0780: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0784: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0788: 0x0000'0000  DC32 0                  ; '....'
  0x1000'078c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0790: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0794: 0x0000'0000  DC32 0                  ; '....'
  0x1000'0798: 0x0000'0000  DC32 0                  ; '....'
  0x1000'079c: 0x0000'0000  DC32 0                  ; '....'
  0x1000'07a0: 0x0000'0000  DC32 0                  ; '....'
  0x1000'07a4: 0x0000'0000  DC32 0                  ; '....'
  0x1000'07a8: 0x0000'0000  DC32 0                  ; '....'
  0x1000'07ac: 0x0000'0000  DC32 0                  ; '....'
  0x1000'07b0: 0x0000'0000  DC32 0                  ; '....'
  0x1000'07b4: 0x0000'0000  DC32 0                  ; '....'
  0x1000'07b8: 0x0000'0000  DC32 0                  ; '....'
  0x1000'07bc: 0x0000'0000  DC32 0                  ; '....'
                 __Vectors_End:
  // }


-------------------------------------------------------------------------------
Section #5 P1:

  // }
                 $t:
                 `.text_8`:
                 _out_null:
  0x1000'07c0: 0x4770          BX       LR
                 `.text_9`:
                 _out_char:
  // static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
  // {
  0x1000'07c2: 0xb5f8          PUSH     {R3-R7, LR}
  0x1000'07c4: 0x0007          MOVS     R7, R0
  0x1000'07c6: 0x000c          MOVS     R4, R1
  0x1000'07c8: 0x0015          MOVS     R5, R2
  0x1000'07ca: 0x001e          MOVS     R6, R3
  //   if (character) {
  0x1000'07cc: 0x0038          MOVS     R0, R7
  0x1000'07ce: 0xb2c0          UXTB     R0, R0
  0x1000'07d0: 0x2800          CMP      R0, #0
  0x1000'07d2: 0xd003          BEQ.N    ??_out_char_0          ; 0x1000'07dc
  //     put_char(character);
  0x1000'07d4: 0x0038          MOVS     R0, R7
  0x1000'07d6: 0xb2c0          UXTB     R0, R0
  0x1000'07d8: 0xf001 0xf88e   BL       put_char               ; 0x1000'18f8
                 ??_out_char_0:
  // }
  0x1000'07dc: 0xbdf1          POP      {R0, R4-R7, PC}
                 `.text_11`:
                 _strnlen_s:
  //   for (s = str; *s && maxsize--; ++s);
  0x1000'07de: 0x0003          MOVS     R3, R0
                 ??_strnlen_s_0:
  //   for (s = str; *s && maxsize--; ++s);
  0x1000'07e0: 0x781a          LDRB     R2, [R3]
  0x1000'07e2: 0x2a00          CMP      R2, #0
  0x1000'07e4: 0xd005          BEQ.N    ??_strnlen_s_1         ; 0x1000'07f2
  0x1000'07e6: 0x000a          MOVS     R2, R1
  0x1000'07e8: 0x1e51          SUBS     R1, R2, #1
  0x1000'07ea: 0x2a00          CMP      R2, #0
  0x1000'07ec: 0xd001          BEQ.N    ??_strnlen_s_1         ; 0x1000'07f2
  //   for (s = str; *s && maxsize--; ++s);
  0x1000'07ee: 0x1c5b          ADDS     R3, R3, #1
  0x1000'07f0: 0xe7f6          B.N      ??_strnlen_s_0         ; 0x1000'07e0
                 ??_strnlen_s_1:
  //   return (unsigned int)(s - str);
  0x1000'07f2: 0x1a18          SUBS     R0, R3, R0
  0x1000'07f4: 0x4770          BX       LR
                 `.text_12`:
                 _is_digit:
  //   return (ch >= '0') && (ch <= '9');
  0x1000'07f6: 0x0001          MOVS     R1, R0
  0x1000'07f8: 0xb2c9          UXTB     R1, R1
  0x1000'07fa: 0x2930          CMP      R1, #48                ; 0x30
  0x1000'07fc: 0xdb04          BLT.N    ??_is_digit_0          ; 0x1000'0808
  0x1000'07fe: 0xb2c0          UXTB     R0, R0
  0x1000'0800: 0x283a          CMP      R0, #58                ; 0x3a
  0x1000'0802: 0xda01          BGE.N    ??_is_digit_0          ; 0x1000'0808
  0x1000'0804: 0x2001          MOVS     R0, #1
  0x1000'0806: 0xe000          B.N      ??_is_digit_1          ; 0x1000'080a
                 ??_is_digit_0:
  0x1000'0808: 0x2000          MOVS     R0, #0
                 ??_is_digit_1:
  0x1000'080a: 0xb2c0          UXTB     R0, R0
  0x1000'080c: 0x4770          BX       LR
                 `.text_13`:
                 _atoi:
  // static unsigned int _atoi(const char** str)
  // {
  0x1000'080e: 0xb538          PUSH     {R3-R5, LR}
  0x1000'0810: 0x0004          MOVS     R4, R0
  //   unsigned int i = 0U;
  0x1000'0812: 0x2500          MOVS     R5, #0
                 ??_atoi_0:
  //   while (_is_digit(**str)) {
  0x1000'0814: 0x6820          LDR      R0, [R4]
  0x1000'0816: 0x7800          LDRB     R0, [R0]
  0x1000'0818: 0xf7ff 0xffed   BL       _is_digit              ; 0x1000'07f6
  0x1000'081c: 0x2800          CMP      R0, #0
  0x1000'081e: 0xd008          BEQ.N    ??_atoi_1              ; 0x1000'0832
  //     i = i * 10U + (unsigned int)(*((*str)++) - '0');
  0x1000'0820: 0x6821          LDR      R1, [R4]
  0x1000'0822: 0x1c48          ADDS     R0, R1, #1
  0x1000'0824: 0x6020          STR      R0, [R4]
  0x1000'0826: 0x200a          MOVS     R0, #10                ; 0xa
  0x1000'0828: 0x7809          LDRB     R1, [R1]
  0x1000'082a: 0x3930          SUBS     R1, R1, #48            ; 0x30
  0x1000'082c: 0xfb00 0x1505   MLA      R5, R0, R5, R1
  0x1000'0830: 0xe7f0          B.N      ??_atoi_0              ; 0x1000'0814
                 ??_atoi_1:
  //   return i;
  0x1000'0832: 0x0028          MOVS     R0, R5
  0x1000'0834: 0xbd32          POP      {R1, R4, R5, PC}
                 `.text_14`:
                 _out_rev:
  // static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
  // {
  0x1000'0836: 0xe92d 0x4ff8   PUSH.W   {R3-R11, LR}
  0x1000'083a: 0x4682          MOV      R10, R0
  0x1000'083c: 0x000d          MOVS     R5, R1
  0x1000'083e: 0x0016          MOVS     R6, R2
  0x1000'0840: 0x001f          MOVS     R7, R3
  0x1000'0842: 0x9c0b          LDR      R4, [SP, #0x2c]
  0x1000'0844: 0xf8dd 0x8030   LDR.W    R8, [SP, #0x30]
  0x1000'0848: 0xf8dd 0x9034   LDR.W    R9, [SP, #0x34]
  //   const size_t start_idx = idx;
  0x1000'084c: 0x9600          STR      R6, [SP]
  //   if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
  0x1000'084e: 0xf019 0x0f03   TST.W    R9, #3
  0x1000'0852: 0xd10b          BNE.N    ??_out_rev_0           ; 0x1000'086c
  //     for (size_t i = len; i < width; i++) {
  0x1000'0854: 0x46a3          MOV      R11, R4
                 ??_out_rev_1:
  //     for (size_t i = len; i < width; i++) {
  0x1000'0856: 0x45c3          CMP      R11, R8
  0x1000'0858: 0xd208          BCS.N    ??_out_rev_0           ; 0x1000'086c
  //       out(' ', buffer, idx++, maxlen);
  0x1000'085a: 0x003b          MOVS     R3, R7
  0x1000'085c: 0x0032          MOVS     R2, R6
  0x1000'085e: 0x0029          MOVS     R1, R5
  0x1000'0860: 0x2020          MOVS     R0, #32                ; 0x20
  0x1000'0862: 0x47d0          BLX      R10
  0x1000'0864: 0x1c76          ADDS     R6, R6, #1
  //     for (size_t i = len; i < width; i++) {
  0x1000'0866: 0xf11b 0x0b01   ADDS.W   R11, R11, #1
  0x1000'086a: 0xe7f4          B.N      ??_out_rev_1           ; 0x1000'0856
                 ??_out_rev_0:
  //   while (len) {
  0x1000'086c: 0x2c00          CMP      R4, #0
  0x1000'086e: 0xd008          BEQ.N    ??_out_rev_2           ; 0x1000'0882
  //     out(buf[--len], buffer, idx++, maxlen);
  0x1000'0870: 0x1e64          SUBS     R4, R4, #1
  0x1000'0872: 0x003b          MOVS     R3, R7
  0x1000'0874: 0x0032          MOVS     R2, R6
  0x1000'0876: 0x0029          MOVS     R1, R5
  0x1000'0878: 0x980a          LDR      R0, [SP, #0x28]
  0x1000'087a: 0x5d00          LDRB     R0, [R0, R4]
  0x1000'087c: 0x47d0          BLX      R10
  0x1000'087e: 0x1c76          ADDS     R6, R6, #1
  0x1000'0880: 0xe7f4          B.N      ??_out_rev_0           ; 0x1000'086c
                 ??_out_rev_2:
  //   if (flags & FLAGS_LEFT) {
  0x1000'0882: 0xea5f 0x7089   LSLS.W   R0, R9, #30
  0x1000'0886: 0xd50a          BPL.N    ??_out_rev_3           ; 0x1000'089e
                 ??_out_rev_4:
  //     while (idx - start_idx < width) {
  0x1000'0888: 0x9800          LDR      R0, [SP]
  0x1000'088a: 0x1a30          SUBS     R0, R6, R0
  0x1000'088c: 0x4540          CMP      R0, R8
  0x1000'088e: 0xd206          BCS.N    ??_out_rev_3           ; 0x1000'089e
  //       out(' ', buffer, idx++, maxlen);
  0x1000'0890: 0x003b          MOVS     R3, R7
  0x1000'0892: 0x0032          MOVS     R2, R6
  0x1000'0894: 0x0029          MOVS     R1, R5
  0x1000'0896: 0x2020          MOVS     R0, #32                ; 0x20
  0x1000'0898: 0x47d0          BLX      R10
  0x1000'089a: 0x1c76          ADDS     R6, R6, #1
  0x1000'089c: 0xe7f4          B.N      ??_out_rev_4           ; 0x1000'0888
                 ??_out_rev_3:
  //   return idx;
  0x1000'089e: 0x0030          MOVS     R0, R6
  0x1000'08a0: 0xe8bd 0x8ff2   POP.W    {R1, R4-R11, PC}
                 `.text_15`:
                 _ntoa_format:
  // static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
  // {
  0x1000'08a4: 0xe92d 0x4ff7   PUSH.W   {R0-R2, R4-R11, LR}
  0x1000'08a8: 0xb084          SUB      SP, SP, #0x10
  0x1000'08aa: 0x469b          MOV      R11, R3
  0x1000'08ac: 0x9f10          LDR      R7, [SP, #0x40]
  0x1000'08ae: 0x9c11          LDR      R4, [SP, #0x44]
  0x1000'08b0: 0x9e12          LDR      R6, [SP, #0x48]
  0x1000'08b2: 0xf8dd 0x804c   LDR.W    R8, [SP, #0x4c]
  0x1000'08b6: 0xf8dd 0x9050   LDR.W    R9, [SP, #0x50]
  0x1000'08ba: 0x9d15          LDR      R5, [SP, #0x54]
  0x1000'08bc: 0xf8dd 0xa058   LDR.W    R10, [SP, #0x58]
  //   if (!(flags & FLAGS_LEFT)) {
  0x1000'08c0: 0xea5f 0x708a   LSLS.W   R0, R10, #30
  0x1000'08c4: 0xd41f          BMI.N    ??_ntoa_format_0       ; 0x1000'0906
  //     if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
  0x1000'08c6: 0x2d00          CMP      R5, #0
  0x1000'08c8: 0xd00a          BEQ.N    ??_ntoa_format_1       ; 0x1000'08e0
  0x1000'08ca: 0xea5f 0x70ca   LSLS.W   R0, R10, #31
  0x1000'08ce: 0xd507          BPL.N    ??_ntoa_format_1       ; 0x1000'08e0
  0x1000'08d0: 0x0030          MOVS     R0, R6
  0x1000'08d2: 0xb2c0          UXTB     R0, R0
  0x1000'08d4: 0x2800          CMP      R0, #0
  0x1000'08d6: 0xd102          BNE.N    ??_ntoa_format_2       ; 0x1000'08de
  0x1000'08d8: 0xf01a 0x0f0c   TST.W    R10, #12               ; 0xc
  0x1000'08dc: 0xd000          BEQ.N    ??_ntoa_format_1       ; 0x1000'08e0
                 ??_ntoa_format_2:
  //       width--;
  0x1000'08de: 0x1e6d          SUBS     R5, R5, #1
                 ??_ntoa_format_1:
  //     while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  0x1000'08e0: 0x454c          CMP      R4, R9
  0x1000'08e2: 0xd205          BCS.N    ??_ntoa_format_3       ; 0x1000'08f0
  0x1000'08e4: 0x2c20          CMP      R4, #32                ; 0x20
  0x1000'08e6: 0xd203          BCS.N    ??_ntoa_format_3       ; 0x1000'08f0
  //       buf[len++] = '0';
  0x1000'08e8: 0x2030          MOVS     R0, #48                ; 0x30
  0x1000'08ea: 0x5538          STRB     R0, [R7, R4]
  0x1000'08ec: 0x1c64          ADDS     R4, R4, #1
  0x1000'08ee: 0xe7f7          B.N      ??_ntoa_format_1       ; 0x1000'08e0
                 ??_ntoa_format_3:
  //     while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  0x1000'08f0: 0xea5f 0x70ca   LSLS.W   R0, R10, #31
  0x1000'08f4: 0xd507          BPL.N    ??_ntoa_format_0       ; 0x1000'0906
  0x1000'08f6: 0x42ac          CMP      R4, R5
  0x1000'08f8: 0xd205          BCS.N    ??_ntoa_format_0       ; 0x1000'0906
  0x1000'08fa: 0x2c20          CMP      R4, #32                ; 0x20
  0x1000'08fc: 0xd203          BCS.N    ??_ntoa_format_0       ; 0x1000'0906
  //       buf[len++] = '0';
  0x1000'08fe: 0x2030          MOVS     R0, #48                ; 0x30
  0x1000'0900: 0x5538          STRB     R0, [R7, R4]
  0x1000'0902: 0x1c64          ADDS     R4, R4, #1
  0x1000'0904: 0xe7f4          B.N      ??_ntoa_format_3       ; 0x1000'08f0
                 ??_ntoa_format_0:
  //   if (flags & FLAGS_HASH) {
  0x1000'0906: 0xea5f 0x60ca   LSLS.W   R0, R10, #27
  0x1000'090a: 0xd534          BPL.N    ??_ntoa_format_4       ; 0x1000'0976
  //     if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
  0x1000'090c: 0xea5f 0x504a   LSLS.W   R0, R10, #21
  0x1000'0910: 0xd40c          BMI.N    ??_ntoa_format_5       ; 0x1000'092c
  0x1000'0912: 0x2c00          CMP      R4, #0
  0x1000'0914: 0xd00a          BEQ.N    ??_ntoa_format_5       ; 0x1000'092c
  0x1000'0916: 0x454c          CMP      R4, R9
  0x1000'0918: 0xd001          BEQ.N    ??_ntoa_format_6       ; 0x1000'091e
  0x1000'091a: 0x42ac          CMP      R4, R5
  0x1000'091c: 0xd106          BNE.N    ??_ntoa_format_5       ; 0x1000'092c
                 ??_ntoa_format_6:
  //       len--;
  0x1000'091e: 0x1e64          SUBS     R4, R4, #1
  //       if (len && (base == 16U)) {
  0x1000'0920: 0x2c00          CMP      R4, #0
  0x1000'0922: 0xd003          BEQ.N    ??_ntoa_format_5       ; 0x1000'092c
  0x1000'0924: 0xf1b8 0x0f10   CMP.W    R8, #16                ; 0x10
  0x1000'0928: 0xd100          BNE.N    ??_ntoa_format_5       ; 0x1000'092c
  //         len--;
  0x1000'092a: 0x1e64          SUBS     R4, R4, #1
                 ??_ntoa_format_5:
  //     if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  0x1000'092c: 0xf1b8 0x0f10   CMP.W    R8, #16                ; 0x10
  0x1000'0930: 0xd108          BNE.N    ??_ntoa_format_7       ; 0x1000'0944
  0x1000'0932: 0xea5f 0x608a   LSLS.W   R0, R10, #26
  0x1000'0936: 0xd405          BMI.N    ??_ntoa_format_7       ; 0x1000'0944
  0x1000'0938: 0x2c20          CMP      R4, #32                ; 0x20
  0x1000'093a: 0xd203          BCS.N    ??_ntoa_format_7       ; 0x1000'0944
  //       buf[len++] = 'x';
  0x1000'093c: 0x2078          MOVS     R0, #120               ; 0x78
  0x1000'093e: 0x5538          STRB     R0, [R7, R4]
  0x1000'0940: 0x1c64          ADDS     R4, R4, #1
  0x1000'0942: 0xe013          B.N      ??_ntoa_format_8       ; 0x1000'096c
                 ??_ntoa_format_7:
  //     else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  0x1000'0944: 0xf1b8 0x0f10   CMP.W    R8, #16                ; 0x10
  0x1000'0948: 0xd108          BNE.N    ??_ntoa_format_9       ; 0x1000'095c
  0x1000'094a: 0xea5f 0x608a   LSLS.W   R0, R10, #26
  0x1000'094e: 0xd505          BPL.N    ??_ntoa_format_9       ; 0x1000'095c
  0x1000'0950: 0x2c20          CMP      R4, #32                ; 0x20
  0x1000'0952: 0xd203          BCS.N    ??_ntoa_format_9       ; 0x1000'095c
  //       buf[len++] = 'X';
  0x1000'0954: 0x2058          MOVS     R0, #88                ; 0x58
  0x1000'0956: 0x5538          STRB     R0, [R7, R4]
  0x1000'0958: 0x1c64          ADDS     R4, R4, #1
  0x1000'095a: 0xe007          B.N      ??_ntoa_format_8       ; 0x1000'096c
                 ??_ntoa_format_9:
  //     else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
  0x1000'095c: 0xf1b8 0x0f02   CMP.W    R8, #2
  0x1000'0960: 0xd104          BNE.N    ??_ntoa_format_8       ; 0x1000'096c
  0x1000'0962: 0x2c20          CMP      R4, #32                ; 0x20
  0x1000'0964: 0xd202          BCS.N    ??_ntoa_format_8       ; 0x1000'096c
  //       buf[len++] = 'b';
  0x1000'0966: 0x2062          MOVS     R0, #98                ; 0x62
  0x1000'0968: 0x5538          STRB     R0, [R7, R4]
  0x1000'096a: 0x1c64          ADDS     R4, R4, #1
                 ??_ntoa_format_8:
  //     if (len < PRINTF_NTOA_BUFFER_SIZE) {
  0x1000'096c: 0x2c20          CMP      R4, #32                ; 0x20
  0x1000'096e: 0xd202          BCS.N    ??_ntoa_format_4       ; 0x1000'0976
  //       buf[len++] = '0';
  0x1000'0970: 0x2030          MOVS     R0, #48                ; 0x30
  0x1000'0972: 0x5538          STRB     R0, [R7, R4]
  0x1000'0974: 0x1c64          ADDS     R4, R4, #1
                 ??_ntoa_format_4:
  //   if (len < PRINTF_NTOA_BUFFER_SIZE) {
  0x1000'0976: 0x2c20          CMP      R4, #32                ; 0x20
  0x1000'0978: 0xd214          BCS.N    ??_ntoa_format_10      ; 0x1000'09a4
  //     if (negative) {
  0x1000'097a: 0x0030          MOVS     R0, R6
  0x1000'097c: 0xb2c0          UXTB     R0, R0
  0x1000'097e: 0x2800          CMP      R0, #0
  0x1000'0980: 0xd003          BEQ.N    ??_ntoa_format_11      ; 0x1000'098a
  //       buf[len++] = '-';
  0x1000'0982: 0x202d          MOVS     R0, #45                ; 0x2d
  0x1000'0984: 0x5538          STRB     R0, [R7, R4]
  0x1000'0986: 0x1c64          ADDS     R4, R4, #1
  0x1000'0988: 0xe00c          B.N      ??_ntoa_format_10      ; 0x1000'09a4
                 ??_ntoa_format_11:
  //     else if (flags & FLAGS_PLUS) {
  0x1000'098a: 0xea5f 0x704a   LSLS.W   R0, R10, #29
  0x1000'098e: 0xd503          BPL.N    ??_ntoa_format_12      ; 0x1000'0998
  //       buf[len++] = '+';  // ignore the space if the '+' exists
  0x1000'0990: 0x202b          MOVS     R0, #43                ; 0x2b
  0x1000'0992: 0x5538          STRB     R0, [R7, R4]
  0x1000'0994: 0x1c64          ADDS     R4, R4, #1
  0x1000'0996: 0xe005          B.N      ??_ntoa_format_10      ; 0x1000'09a4
                 ??_ntoa_format_12:
  //     else if (flags & FLAGS_SPACE) {
  0x1000'0998: 0xea5f 0x700a   LSLS.W   R0, R10, #28
  0x1000'099c: 0xd502          BPL.N    ??_ntoa_format_10      ; 0x1000'09a4
  //       buf[len++] = ' ';
  0x1000'099e: 0x2020          MOVS     R0, #32                ; 0x20
  0x1000'09a0: 0x5538          STRB     R0, [R7, R4]
  0x1000'09a2: 0x1c64          ADDS     R4, R4, #1
                 ??_ntoa_format_10:
  //   return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
  0x1000'09a4: 0xf8cd 0xa00c   STR.W    R10, [SP, #0xc]
  0x1000'09a8: 0x9502          STR      R5, [SP, #0x8]
  0x1000'09aa: 0x9401          STR      R4, [SP, #0x4]
  0x1000'09ac: 0x9700          STR      R7, [SP]
  0x1000'09ae: 0x465b          MOV      R3, R11
  0x1000'09b0: 0x9a06          LDR      R2, [SP, #0x18]
  0x1000'09b2: 0x9905          LDR      R1, [SP, #0x14]
  0x1000'09b4: 0x9804          LDR      R0, [SP, #0x10]
  0x1000'09b6: 0xf7ff 0xff3e   BL       _out_rev               ; 0x1000'0836
  0x1000'09ba: 0xb007          ADD      SP, SP, #0x1c
  0x1000'09bc: 0xe8bd 0x8ff0   POP.W    {R4-R11, PC}
                 `.text_16`:
                 _ntoa_long:
  // static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
  // {
  0x1000'09c0: 0xe92d 0x4ff0   PUSH.W   {R4-R11, LR}
  0x1000'09c4: 0xb08f          SUB      SP, SP, #0x3c
  0x1000'09c6: 0x4683          MOV      R11, R0
  0x1000'09c8: 0x000d          MOVS     R5, R1
  0x1000'09ca: 0x0016          MOVS     R6, R2
  0x1000'09cc: 0x001f          MOVS     R7, R3
  0x1000'09ce: 0x9c18          LDR      R4, [SP, #0x60]
  0x1000'09d0: 0xf8dd 0x8068   LDR.W    R8, [SP, #0x68]
  0x1000'09d4: 0xf8dd 0x9074   LDR.W    R9, [SP, #0x74]
  //   size_t len = 0U;
  0x1000'09d8: 0xf05f 0x0a00   MOVS.W   R10, #0
  //   if (!value) {
  0x1000'09dc: 0x2c00          CMP      R4, #0
  0x1000'09de: 0xd101          BNE.N    ??_ntoa_long_0         ; 0x1000'09e4
  //     flags &= ~FLAGS_HASH;
  0x1000'09e0: 0xf039 0x0910   BICS.W   R9, R9, #16            ; 0x10
                 ??_ntoa_long_0:
  //   if (!(flags & FLAGS_PRECISION) || value) {
  0x1000'09e4: 0xea5f 0x5049   LSLS.W   R0, R9, #21
  0x1000'09e8: 0xd501          BPL.N    ??_ntoa_long_1         ; 0x1000'09ee
  0x1000'09ea: 0x2c00          CMP      R4, #0
  0x1000'09ec: 0xd01f          BEQ.N    ??_ntoa_long_2         ; 0x1000'0a2e
                 ??_ntoa_long_1:
  //       const char digit = (char)(value % base);
  0x1000'09ee: 0xfbb4 0xf0f8   UDIV     R0, R4, R8
  0x1000'09f2: 0xfb08 0x4010   MLS      R0, R8, R0, R4
  //       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
  0x1000'09f6: 0x4651          MOV      R1, R10
  0x1000'09f8: 0xf111 0x0a01   ADDS.W   R10, R1, #1
  0x1000'09fc: 0x0002          MOVS     R2, R0
  0x1000'09fe: 0xb2d2          UXTB     R2, R2
  0x1000'0a00: 0x2a0a          CMP      R2, #10                ; 0xa
  0x1000'0a02: 0xda02          BGE.N    ??_ntoa_long_3         ; 0x1000'0a0a
  0x1000'0a04: 0xf110 0x0330   ADDS.W   R3, R0, #48            ; 0x30
  0x1000'0a08: 0xe008          B.N      ??_ntoa_long_4         ; 0x1000'0a1c
                 ??_ntoa_long_3:
  0x1000'0a0a: 0xea5f 0x6289   LSLS.W   R2, R9, #26
  0x1000'0a0e: 0xd501          BPL.N    ??_ntoa_long_5         ; 0x1000'0a14
  0x1000'0a10: 0x2241          MOVS     R2, #65                ; 0x41
  0x1000'0a12: 0xe000          B.N      ??_ntoa_long_6         ; 0x1000'0a16
                 ??_ntoa_long_5:
  0x1000'0a14: 0x2261          MOVS     R2, #97                ; 0x61
                 ??_ntoa_long_6:
  0x1000'0a16: 0x1882          ADDS     R2, R0, R2
  0x1000'0a18: 0xf1b2 0x030a   SUBS.W   R3, R2, #10            ; 0xa
                 ??_ntoa_long_4:
  0x1000'0a1c: 0xaa07          ADD      R2, SP, #0x1c
  0x1000'0a1e: 0x5453          STRB     R3, [R2, R1]
  //       value /= base;
  0x1000'0a20: 0xfbb4 0xf4f8   UDIV     R4, R4, R8
  //     } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
  0x1000'0a24: 0x2c00          CMP      R4, #0
  0x1000'0a26: 0xd002          BEQ.N    ??_ntoa_long_2         ; 0x1000'0a2e
  0x1000'0a28: 0xf1ba 0x0f20   CMP.W    R10, #32               ; 0x20
  0x1000'0a2c: 0xd3df          BCC.N    ??_ntoa_long_1         ; 0x1000'09ee
                 ??_ntoa_long_2:
  //   return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
  0x1000'0a2e: 0xf8cd 0x9018   STR.W    R9, [SP, #0x18]
  0x1000'0a32: 0x981c          LDR      R0, [SP, #0x70]
  0x1000'0a34: 0x9005          STR      R0, [SP, #0x14]
  0x1000'0a36: 0x981b          LDR      R0, [SP, #0x6c]
  0x1000'0a38: 0x9004          STR      R0, [SP, #0x10]
  0x1000'0a3a: 0xf8cd 0x800c   STR.W    R8, [SP, #0xc]
  0x1000'0a3e: 0xf89d 0x0064   LDRB.W   R0, [SP, #0x64]
  0x1000'0a42: 0x9002          STR      R0, [SP, #0x8]
  0x1000'0a44: 0xf8cd 0xa004   STR.W    R10, [SP, #0x4]
  0x1000'0a48: 0xa807          ADD      R0, SP, #0x1c
  0x1000'0a4a: 0x9000          STR      R0, [SP]
  0x1000'0a4c: 0x003b          MOVS     R3, R7
  0x1000'0a4e: 0x0032          MOVS     R2, R6
  0x1000'0a50: 0x0029          MOVS     R1, R5
  0x1000'0a52: 0x4658          MOV      R0, R11
  0x1000'0a54: 0xf7ff 0xff26   BL       _ntoa_format           ; 0x1000'08a4
  0x1000'0a58: 0xb00f          ADD      SP, SP, #0x3c
  0x1000'0a5a: 0xe8bd 0x8ff0   POP.W    {R4-R11, PC}
                 `.text_17`:
                 _ntoa_long_long:
  // static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
  // {
  0x1000'0a5e: 0xe92d 0x4ff7   PUSH.W   {R0-R2, R4-R11, LR}
  0x1000'0a62: 0xb090          SUB      SP, SP, #0x40
  0x1000'0a64: 0x469a          MOV      R10, R3
  0x1000'0a66: 0xe9dd 0x451c   LDRD     R4, R5, [SP, #0x70]
  0x1000'0a6a: 0xe9dd 0x8920   LDRD     R8, R9, [SP, #0x80]
  0x1000'0a6e: 0x9f24          LDR      R7, [SP, #0x90]
  //   size_t len = 0U;
  0x1000'0a70: 0x2600          MOVS     R6, #0
  //   if (!value) {
  0x1000'0a72: 0x2d00          CMP      R5, #0
  0x1000'0a74: 0xd103          BNE.N    ??_ntoa_long_long_0    ; 0x1000'0a7e
  0x1000'0a76: 0x2c00          CMP      R4, #0
  0x1000'0a78: 0xd101          BNE.N    ??_ntoa_long_long_0    ; 0x1000'0a7e
  //     flags &= ~FLAGS_HASH;
  0x1000'0a7a: 0xf037 0x0710   BICS.W   R7, R7, #16            ; 0x10
                 ??_ntoa_long_long_0:
  //   if (!(flags & FLAGS_PRECISION) || value) {
  0x1000'0a7e: 0x0578          LSLS     R0, R7, #21
  0x1000'0a80: 0xd503          BPL.N    ??_ntoa_long_long_2    ; 0x1000'0a8a
  0x1000'0a82: 0x2d00          CMP      R5, #0
  0x1000'0a84: 0xd101          BNE.N    ??_ntoa_long_long_2    ; 0x1000'0a8a
  0x1000'0a86: 0x2c00          CMP      R4, #0
  0x1000'0a88: 0xd028          BEQ.N    ??_ntoa_long_long_3    ; 0x1000'0adc
                 ??_ntoa_long_long_1:
                 ??_ntoa_long_long_2:
  //       const char digit = (char)(value % base);
  0x1000'0a8a: 0x0020          MOVS     R0, R4
  0x1000'0a8c: 0x0029          MOVS     R1, R5
  0x1000'0a8e: 0x4642          MOV      R2, R8
  0x1000'0a90: 0x464b          MOV      R3, R9
  0x1000'0a92: 0xf000 0xff5d   BL       __aeabi_uldivmod       ; 0x1000'1950
  0x1000'0a96: 0x4693          MOV      R11, R2
  //       buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
  0x1000'0a98: 0x0030          MOVS     R0, R6
  0x1000'0a9a: 0x1c46          ADDS     R6, R0, #1
  0x1000'0a9c: 0x4659          MOV      R1, R11
  0x1000'0a9e: 0xb2c9          UXTB     R1, R1
  0x1000'0aa0: 0x290a          CMP      R1, #10                ; 0xa
  0x1000'0aa2: 0xda02          BGE.N    ??_ntoa_long_long_4    ; 0x1000'0aaa
  0x1000'0aa4: 0xf11b 0x0230   ADDS.W   R2, R11, #48           ; 0x30
  0x1000'0aa8: 0xe008          B.N      ??_ntoa_long_long_5    ; 0x1000'0abc
                 ??_ntoa_long_long_4:
  0x1000'0aaa: 0x06b9          LSLS     R1, R7, #26
  0x1000'0aac: 0xd501          BPL.N    ??_ntoa_long_long_6    ; 0x1000'0ab2
  0x1000'0aae: 0x2141          MOVS     R1, #65                ; 0x41
  0x1000'0ab0: 0xe000          B.N      ??_ntoa_long_long_7    ; 0x1000'0ab4
                 ??_ntoa_long_long_6:
  0x1000'0ab2: 0x2161          MOVS     R1, #97                ; 0x61
                 ??_ntoa_long_long_7:
  0x1000'0ab4: 0xeb1b 0x0101   ADDS.W   R1, R11, R1
  0x1000'0ab8: 0xf1b1 0x020a   SUBS.W   R2, R1, #10            ; 0xa
                 ??_ntoa_long_long_5:
  0x1000'0abc: 0xa907          ADD      R1, SP, #0x1c
  0x1000'0abe: 0x540a          STRB     R2, [R1, R0]
  //       value /= base;
  0x1000'0ac0: 0x0020          MOVS     R0, R4
  0x1000'0ac2: 0x0029          MOVS     R1, R5
  0x1000'0ac4: 0x4642          MOV      R2, R8
  0x1000'0ac6: 0x464b          MOV      R3, R9
  0x1000'0ac8: 0xf000 0xff42   BL       __aeabi_uldivmod       ; 0x1000'1950
  0x1000'0acc: 0x0004          MOVS     R4, R0
  0x1000'0ace: 0x000d          MOVS     R5, R1
  //     } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
  0x1000'0ad0: 0x2d00          CMP      R5, #0
  0x1000'0ad2: 0xd101          BNE.N    ??_ntoa_long_long_8    ; 0x1000'0ad8
  0x1000'0ad4: 0x2c00          CMP      R4, #0
  0x1000'0ad6: 0xd001          BEQ.N    ??_ntoa_long_long_3    ; 0x1000'0adc
                 ??_ntoa_long_long_8:
  0x1000'0ad8: 0x2e20          CMP      R6, #32                ; 0x20
  0x1000'0ada: 0xd3d6          BCC.N    ??_ntoa_long_long_2    ; 0x1000'0a8a
                 ??_ntoa_long_long_3:
  //   return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
  0x1000'0adc: 0x9706          STR      R7, [SP, #0x18]
  0x1000'0ade: 0x9823          LDR      R0, [SP, #0x8c]
  0x1000'0ae0: 0x9005          STR      R0, [SP, #0x14]
  0x1000'0ae2: 0x9822          LDR      R0, [SP, #0x88]
  0x1000'0ae4: 0x9004          STR      R0, [SP, #0x10]
  0x1000'0ae6: 0xf8cd 0x800c   STR.W    R8, [SP, #0xc]
  0x1000'0aea: 0xf89d 0x0078   LDRB.W   R0, [SP, #0x78]
  0x1000'0aee: 0x9002          STR      R0, [SP, #0x8]
  0x1000'0af0: 0x9601          STR      R6, [SP, #0x4]
  0x1000'0af2: 0xa807          ADD      R0, SP, #0x1c
  0x1000'0af4: 0x9000          STR      R0, [SP]
  0x1000'0af6: 0x4653          MOV      R3, R10
  0x1000'0af8: 0x9a12          LDR      R2, [SP, #0x48]
  0x1000'0afa: 0x9911          LDR      R1, [SP, #0x44]
  0x1000'0afc: 0x9810          LDR      R0, [SP, #0x40]
  0x1000'0afe: 0xf7ff 0xfed1   BL       _ntoa_format           ; 0x1000'08a4
  0x1000'0b02: 0xb013          ADD      SP, SP, #0x4c
  0x1000'0b04: 0xe8bd 0x8ff0   POP.W    {R4-R11, PC}
  0x1000'0b08: 0x0000          MOVS     R0, R0
  0x1000'0b0a: 0x0000          MOVS     R0, R0
                 `.text_18`:
                 _ftoa:
  // static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
  // {
  0x1000'0b0c: 0xe92d 0x4ff7   PUSH.W   {R0-R2, R4-R11, LR}
  0x1000'0b10: 0xed2d 0x8b08   VPUSH    {D8-D11}
  0x1000'0b14: 0xb08e          SUB      SP, SP, #0x38
  0x1000'0b16: 0x469b          MOV      R11, R3
  0x1000'0b18: 0xeeb0 0x9a40   VMOV.F32 S18, S0
  0x1000'0b1c: 0xeef0 0x9a60   VMOV.F32 S19, S1
  0x1000'0b20: 0x9e22          LDR      R6, [SP, #0x88]
  0x1000'0b22: 0xf8dd 0x808c   LDR.W    R8, [SP, #0x8c]
  0x1000'0b26: 0xf8dd 0x9090   LDR.W    R9, [SP, #0x90]
  //   size_t len  = 0U;
  0x1000'0b2a: 0x2700          MOVS     R7, #0
  //   double diff = 0.0;
  0x1000'0b2c: 0xed9f 0x8bbe   VLDR     D8, ??DataTable1_2 ; [0x1000'0e28]
  //   if (value != value)
  0x1000'0b30: 0xec51 0x0b19   VMOV     R0, R1, D9
  0x1000'0b34: 0xec53 0x2b19   VMOV     R2, R3, D9
  0x1000'0b38: 0xf001 0xf822   BL       __aeabi_cdcmpeq        ; 0x1000'1b80
  0x1000'0b3c: 0xd00e          BEQ.N    ??_ftoa_0              ; 0x1000'0b5c
  //     return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
  0x1000'0b3e: 0xf8cd 0x900c   STR.W    R9, [SP, #0xc]
  0x1000'0b42: 0xf8cd 0x8008   STR.W    R8, [SP, #0x8]
  0x1000'0b46: 0x2003          MOVS     R0, #3
  0x1000'0b48: 0x9001          STR      R0, [SP, #0x4]
  0x1000'0b4a: 0xa0b5          ADR.N    R0, ??DataTable1       ; 0x1000'0e20
  0x1000'0b4c: 0x9000          STR      R0, [SP]
  0x1000'0b4e: 0x465b          MOV      R3, R11
  0x1000'0b50: 0x9a18          LDR      R2, [SP, #0x60]
  0x1000'0b52: 0x9917          LDR      R1, [SP, #0x5c]
  0x1000'0b54: 0x9816          LDR      R0, [SP, #0x58]
  0x1000'0b56: 0xf7ff 0xfe6e   BL       _out_rev               ; 0x1000'0836
  0x1000'0b5a: 0xe15c          B.N      ??_ftoa_1              ; 0x1000'0e16
                 ??_ftoa_0:
  //   if (value < -DBL_MAX)
  0x1000'0b5c: 0xec51 0x0b19   VMOV     R0, R1, D9
  0x1000'0b60: 0xf05f 0x32ff   MOVS.W   R2, #-1                ; 0xffff'ffff
  0x1000'0b64: 0xf47f 0x1380   MVNS.W   R3, #1048576           ; 0x10'0000
  0x1000'0b68: 0xf001 0xf81a   BL       __aeabi_cdcmple        ; 0x1000'1ba0
  0x1000'0b6c: 0xd20f          BCS.N    ??_ftoa_2              ; 0x1000'0b8e
  //     return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
  0x1000'0b6e: 0xf8cd 0x900c   STR.W    R9, [SP, #0xc]
  0x1000'0b72: 0xf8cd 0x8008   STR.W    R8, [SP, #0x8]
  0x1000'0b76: 0x2004          MOVS     R0, #4
  0x1000'0b78: 0x9001          STR      R0, [SP, #0x4]
  0x1000'0b7a: 0xf8df 0x0634   LDR.W    R0, ??DataTable2       ; ?_1
  0x1000'0b7e: 0x9000          STR      R0, [SP]
  0x1000'0b80: 0x465b          MOV      R3, R11
  0x1000'0b82: 0x9a18          LDR      R2, [SP, #0x60]
  0x1000'0b84: 0x9917          LDR      R1, [SP, #0x5c]
  0x1000'0b86: 0x9816          LDR      R0, [SP, #0x58]
  0x1000'0b88: 0xf7ff 0xfe55   BL       _out_rev               ; 0x1000'0836
  0x1000'0b8c: 0xe143          B.N      ??_ftoa_1              ; 0x1000'0e16
                 ??_ftoa_2:
  //   if (value > DBL_MAX)
  0x1000'0b8e: 0xec51 0x0b19   VMOV     R0, R1, D9
  0x1000'0b92: 0x2200          MOVS     R2, #0
  0x1000'0b94: 0xf8df 0x361c   LDR.W    R3, ??DataTable2_1     ; 0x7ff0'0000
  0x1000'0b98: 0xf000 0xfff2   BL       __aeabi_cdcmpeq        ; 0x1000'1b80
  0x1000'0b9c: 0xd119          BNE.N    ??_ftoa_3              ; 0x1000'0bd2
  //     return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
  0x1000'0b9e: 0xea5f 0x7049   LSLS.W   R0, R9, #29
  0x1000'0ba2: 0xd501          BPL.N    ??_ftoa_4              ; 0x1000'0ba8
  0x1000'0ba4: 0x2004          MOVS     R0, #4
  0x1000'0ba6: 0xe000          B.N      ??_ftoa_5              ; 0x1000'0baa
                 ??_ftoa_4:
  0x1000'0ba8: 0x2003          MOVS     R0, #3
                 ??_ftoa_5:
  0x1000'0baa: 0xea5f 0x7149   LSLS.W   R1, R9, #29
  0x1000'0bae: 0xd502          BPL.N    ??_ftoa_6              ; 0x1000'0bb6
  0x1000'0bb0: 0xf8df 0x1604   LDR.W    R1, ??DataTable2_2     ; ?_2
  0x1000'0bb4: 0xe000          B.N      ??_ftoa_7              ; 0x1000'0bb8
                 ??_ftoa_6:
  0x1000'0bb6: 0xa19b          ADR.N    R1, ??DataTable1_1     ; 0x1000'0e24
                 ??_ftoa_7:
  0x1000'0bb8: 0xf8cd 0x900c   STR.W    R9, [SP, #0xc]
  0x1000'0bbc: 0xf8cd 0x8008   STR.W    R8, [SP, #0x8]
  0x1000'0bc0: 0x9001          STR      R0, [SP, #0x4]
  0x1000'0bc2: 0x9100          STR      R1, [SP]
  0x1000'0bc4: 0x465b          MOV      R3, R11
  0x1000'0bc6: 0x9a18          LDR      R2, [SP, #0x60]
  0x1000'0bc8: 0x9917          LDR      R1, [SP, #0x5c]
  0x1000'0bca: 0x9816          LDR      R0, [SP, #0x58]
  0x1000'0bcc: 0xf7ff 0xfe33   BL       _out_rev               ; 0x1000'0836
  0x1000'0bd0: 0xe121          B.N      ??_ftoa_1              ; 0x1000'0e16
                 ??_ftoa_3:
  //   if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
  0x1000'0bd2: 0xec51 0x0b19   VMOV     R0, R1, D9
  0x1000'0bd6: 0x2201          MOVS     R2, #1
  0x1000'0bd8: 0xf8df 0x35e0   LDR.W    R3, ??DataTable2_3     ; 0x41cd'cd65
  0x1000'0bdc: 0xf000 0xfffa   BL       __aeabi_cdrcmple       ; 0x1000'1bd4
  0x1000'0be0: 0xd907          BLS.N    ??_ftoa_8              ; 0x1000'0bf2
  0x1000'0be2: 0xec51 0x0b19   VMOV     R0, R1, D9
  0x1000'0be6: 0x2200          MOVS     R2, #0
  0x1000'0be8: 0xf8df 0x35d4   LDR.W    R3, ??DataTable2_4     ; 0xc1cd'cd65
  0x1000'0bec: 0xf000 0xffd8   BL       __aeabi_cdcmple        ; 0x1000'1ba0
  0x1000'0bf0: 0xd20f          BCS.N    ??_ftoa_9              ; 0x1000'0c12
                 ??_ftoa_8:
  //     return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
  0x1000'0bf2: 0xf8cd 0x9008   STR.W    R9, [SP, #0x8]
  0x1000'0bf6: 0xf8cd 0x8004   STR.W    R8, [SP, #0x4]
  0x1000'0bfa: 0x9600          STR      R6, [SP]
  0x1000'0bfc: 0xeeb0 0x0a49   VMOV.F32 S0, S18
  0x1000'0c00: 0xeef0 0x0a69   VMOV.F32 S1, S19
  0x1000'0c04: 0x465b          MOV      R3, R11
  0x1000'0c06: 0x9a18          LDR      R2, [SP, #0x60]
  0x1000'0c08: 0x9917          LDR      R1, [SP, #0x5c]
  0x1000'0c0a: 0x9816          LDR      R0, [SP, #0x58]
  0x1000'0c0c: 0xf000 0xf910   BL       _etoa                  ; 0x1000'0e30
  0x1000'0c10: 0xe101          B.N      ??_ftoa_1              ; 0x1000'0e16
                 ??_ftoa_9:
  //   bool negative = false;
  0x1000'0c12: 0x2000          MOVS     R0, #0
  0x1000'0c14: 0xf88d 0x0010   STRB.W   R0, [SP, #0x10]
  //   if (value < 0) {
  0x1000'0c18: 0xec51 0x0b19   VMOV     R0, R1, D9
  0x1000'0c1c: 0x2200          MOVS     R2, #0
  0x1000'0c1e: 0x2300          MOVS     R3, #0
  0x1000'0c20: 0xf000 0xffbe   BL       __aeabi_cdcmple        ; 0x1000'1ba0
  0x1000'0c24: 0xd208          BCS.N    ??_ftoa_10             ; 0x1000'0c38
  //     negative = true;
  0x1000'0c26: 0x2001          MOVS     R0, #1
  0x1000'0c28: 0xf88d 0x0010   STRB.W   R0, [SP, #0x10]
  //     value = 0 - value;
  0x1000'0c2c: 0xec51 0x0b19   VMOV     R0, R1, D9
  0x1000'0c30: 0xf091 0x4100   EORS.W   R1, R1, #-2147483648   ; 0x8000'0000
  0x1000'0c34: 0xec41 0x0b19   VMOV     D9, R0, R1
                 ??_ftoa_10:
  //   if (!(flags & FLAGS_PRECISION)) {
  0x1000'0c38: 0xea5f 0x5049   LSLS.W   R0, R9, #21
  0x1000'0c3c: 0xd401          BMI.N    ??_ftoa_11             ; 0x1000'0c42
  //     prec = PRINTF_DEFAULT_FLOAT_PRECISION;
  0x1000'0c3e: 0x2006          MOVS     R0, #6
  0x1000'0c40: 0x0006          MOVS     R6, R0
                 ??_ftoa_11:
  //   while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
  0x1000'0c42: 0x2f20          CMP      R7, #32                ; 0x20
  0x1000'0c44: 0xd207          BCS.N    ??_ftoa_12             ; 0x1000'0c56
  0x1000'0c46: 0x2e0a          CMP      R6, #10                ; 0xa
  0x1000'0c48: 0xd305          BCC.N    ??_ftoa_12             ; 0x1000'0c56
  //     buf[len++] = '0';
  0x1000'0c4a: 0x2130          MOVS     R1, #48                ; 0x30
  0x1000'0c4c: 0xa805          ADD      R0, SP, #0x14
  0x1000'0c4e: 0x55c1          STRB     R1, [R0, R7]
  0x1000'0c50: 0x1c7f          ADDS     R7, R7, #1
  //     prec--;
  0x1000'0c52: 0x1e76          SUBS     R6, R6, #1
  0x1000'0c54: 0xe7f5          B.N      ??_ftoa_11             ; 0x1000'0c42
                 ??_ftoa_12:
  //   int whole = (int)value;
  0x1000'0c56: 0xec51 0x0b19   VMOV     R0, R1, D9
  0x1000'0c5a: 0xf000 0xffd5   BL       __aeabi_d2iz           ; 0x1000'1c08
  0x1000'0c5e: 0x0005          MOVS     R5, R0
  //   double tmp = (value - whole) * pow10[prec];
  0x1000'0c60: 0xf8df 0xa560   LDR.W    R10, ??DataTable2_5    ; `_ftoa::pow10`
  0x1000'0c64: 0x0028          MOVS     R0, R5
  0x1000'0c66: 0xf000 0xffff   BL       __aeabi_i2d            ; 0x1000'1c68
  0x1000'0c6a: 0x0002          MOVS     R2, R0
  0x1000'0c6c: 0x000b          MOVS     R3, R1
  0x1000'0c6e: 0xec51 0x0b19   VMOV     R0, R1, D9
  0x1000'0c72: 0xf001 0xf8c9   BL       __aeabi_dsub           ; 0x1000'1e08
  0x1000'0c76: 0xeb0a 0x02c6   ADD.W    R2, R10, R6, LSL #3
  0x1000'0c7a: 0xe9d2 0x2300   LDRD     R2, R3, [R2]
  0x1000'0c7e: 0xf001 0xf935   BL       __aeabi_dmul           ; 0x1000'1eec
  0x1000'0c82: 0xec41 0x0b1a   VMOV     D10, R0, R1
  //   unsigned long frac = (unsigned long)tmp;
  0x1000'0c86: 0xec51 0x0b1a   VMOV     R0, R1, D10
  0x1000'0c8a: 0xf001 0xfa05   BL       __aeabi_d2uiz          ; 0x1000'2098
  0x1000'0c8e: 0x0004          MOVS     R4, R0
  //   diff = tmp - frac;
  0x1000'0c90: 0x0020          MOVS     R0, R4
  0x1000'0c92: 0xf001 0xfa13   BL       __aeabi_ui2d           ; 0x1000'20bc
  0x1000'0c96: 0x0002          MOVS     R2, R0
  0x1000'0c98: 0x000b          MOVS     R3, R1
  0x1000'0c9a: 0xec51 0x0b1a   VMOV     R0, R1, D10
  0x1000'0c9e: 0xf001 0xf8b3   BL       __aeabi_dsub           ; 0x1000'1e08
  0x1000'0ca2: 0xec41 0x0b1b   VMOV     D11, R0, R1
  //   if (diff > 0.5) {
  0x1000'0ca6: 0xec51 0x0b1b   VMOV     R0, R1, D11
  0x1000'0caa: 0x2201          MOVS     R2, #1
  0x1000'0cac: 0xf8df 0x3be8   LDR.W    R3, ??DataTable9       ; 0x3fe0'0000
  0x1000'0cb0: 0xf000 0xff90   BL       __aeabi_cdrcmple       ; 0x1000'1bd4
  0x1000'0cb4: 0xd80e          BHI.N    ??_ftoa_13             ; 0x1000'0cd4
  //     ++frac;
  0x1000'0cb6: 0x1c64          ADDS     R4, R4, #1
  //     if (frac >= pow10[prec]) {
  0x1000'0cb8: 0x0020          MOVS     R0, R4
  0x1000'0cba: 0xf001 0xf9ff   BL       __aeabi_ui2d           ; 0x1000'20bc
  0x1000'0cbe: 0xeb0a 0x02c6   ADD.W    R2, R10, R6, LSL #3
  0x1000'0cc2: 0xe9d2 0x2300   LDRD     R2, R3, [R2]
  0x1000'0cc6: 0xf000 0xff85   BL       __aeabi_cdrcmple       ; 0x1000'1bd4
  0x1000'0cca: 0xd810          BHI.N    ??_ftoa_14             ; 0x1000'0cee
  //       frac = 0;
  0x1000'0ccc: 0x2000          MOVS     R0, #0
  0x1000'0cce: 0x0004          MOVS     R4, R0
  //       ++whole;
  0x1000'0cd0: 0x1c6d          ADDS     R5, R5, #1
  0x1000'0cd2: 0xe00c          B.N      ??_ftoa_14             ; 0x1000'0cee
                 ??_ftoa_13:
  //   else if (diff < 0.5) {
  0x1000'0cd4: 0xec51 0x0b1b   VMOV     R0, R1, D11
  0x1000'0cd8: 0x2200          MOVS     R2, #0
  0x1000'0cda: 0xf8df 0x3bbc   LDR.W    R3, ??DataTable9       ; 0x3fe0'0000
  0x1000'0cde: 0xf000 0xff5f   BL       __aeabi_cdcmple        ; 0x1000'1ba0
  0x1000'0ce2: 0xd304          BCC.N    ??_ftoa_14             ; 0x1000'0cee
                 ??_ftoa_15:
  //   else if ((frac == 0U) || (frac & 1U)) {
  0x1000'0ce4: 0x2c00          CMP      R4, #0
  0x1000'0ce6: 0xd001          BEQ.N    ??_ftoa_16             ; 0x1000'0cec
  0x1000'0ce8: 0x07e0          LSLS     R0, R4, #31
  0x1000'0cea: 0xd500          BPL.N    ??_ftoa_14             ; 0x1000'0cee
                 ??_ftoa_16:
  //     ++frac;
  0x1000'0cec: 0x1c64          ADDS     R4, R4, #1
                 ??_ftoa_14:
  //   if (prec == 0U) {
  0x1000'0cee: 0x2e00          CMP      R6, #0
  0x1000'0cf0: 0xd11e          BNE.N    ??_ftoa_17             ; 0x1000'0d30
  //     diff = value - (double)whole;
  0x1000'0cf2: 0x0028          MOVS     R0, R5
  0x1000'0cf4: 0xf000 0xffb8   BL       __aeabi_i2d            ; 0x1000'1c68
  0x1000'0cf8: 0x0002          MOVS     R2, R0
  0x1000'0cfa: 0x000b          MOVS     R3, R1
  0x1000'0cfc: 0xec51 0x0b19   VMOV     R0, R1, D9
  0x1000'0d00: 0xf001 0xf882   BL       __aeabi_dsub           ; 0x1000'1e08
  0x1000'0d04: 0xec41 0x0b1b   VMOV     D11, R0, R1
  //     if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
  0x1000'0d08: 0xec51 0x0b1b   VMOV     R0, R1, D11
  0x1000'0d0c: 0x2200          MOVS     R2, #0
  0x1000'0d0e: 0xf8df 0x3b88   LDR.W    R3, ??DataTable9       ; 0x3fe0'0000
  0x1000'0d12: 0xf000 0xff45   BL       __aeabi_cdcmple        ; 0x1000'1ba0
  0x1000'0d16: 0xd207          BCS.N    ??_ftoa_18             ; 0x1000'0d28
  0x1000'0d18: 0xec51 0x0b1b   VMOV     R0, R1, D11
  0x1000'0d1c: 0x2201          MOVS     R2, #1
  0x1000'0d1e: 0xf8df 0x3b78   LDR.W    R3, ??DataTable9       ; 0x3fe0'0000
  0x1000'0d22: 0xf000 0xff57   BL       __aeabi_cdrcmple       ; 0x1000'1bd4
  0x1000'0d26: 0xd826          BHI.N    ??_ftoa_19             ; 0x1000'0d76
                 ??_ftoa_18:
  0x1000'0d28: 0x07e8          LSLS     R0, R5, #31
  0x1000'0d2a: 0xd524          BPL.N    ??_ftoa_19             ; 0x1000'0d76
  //       ++whole;
  0x1000'0d2c: 0x1c6d          ADDS     R5, R5, #1
  0x1000'0d2e: 0xe022          B.N      ??_ftoa_19             ; 0x1000'0d76
                 ??_ftoa_17:
  //     unsigned int count = prec;
  0x1000'0d30: 0x0031          MOVS     R1, R6
                 ??_ftoa_20:
  //     while (len < PRINTF_FTOA_BUFFER_SIZE) {
  0x1000'0d32: 0x2f20          CMP      R7, #32                ; 0x20
  0x1000'0d34: 0xd20e          BCS.N    ??_ftoa_21             ; 0x1000'0d54
  //       --count;
  0x1000'0d36: 0x1e49          SUBS     R1, R1, #1
  //       buf[len++] = (char)(48U + (frac % 10U));
  0x1000'0d38: 0x200a          MOVS     R0, #10                ; 0xa
  0x1000'0d3a: 0xfbb4 0xf2f0   UDIV     R2, R4, R0
  0x1000'0d3e: 0xfb00 0x4012   MLS      R0, R0, R2, R4
  0x1000'0d42: 0x3030          ADDS     R0, R0, #48            ; 0x30
  0x1000'0d44: 0xaa05          ADD      R2, SP, #0x14
  0x1000'0d46: 0x55d0          STRB     R0, [R2, R7]
  0x1000'0d48: 0x1c7f          ADDS     R7, R7, #1
  //       if (!(frac /= 10U)) {
  0x1000'0d4a: 0x200a          MOVS     R0, #10                ; 0xa
  0x1000'0d4c: 0xfbb4 0xf4f0   UDIV     R4, R4, R0
  0x1000'0d50: 0x2c00          CMP      R4, #0
  0x1000'0d52: 0xd1ee          BNE.N    ??_ftoa_20             ; 0x1000'0d32
                 ??_ftoa_21:
  //     while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
  0x1000'0d54: 0x2f20          CMP      R7, #32                ; 0x20
  0x1000'0d56: 0xd208          BCS.N    ??_ftoa_22             ; 0x1000'0d6a
  0x1000'0d58: 0x0008          MOVS     R0, R1
  0x1000'0d5a: 0x1e41          SUBS     R1, R0, #1
  0x1000'0d5c: 0x2800          CMP      R0, #0
  0x1000'0d5e: 0xd004          BEQ.N    ??_ftoa_22             ; 0x1000'0d6a
  //       buf[len++] = '0';
  0x1000'0d60: 0x2230          MOVS     R2, #48                ; 0x30
  0x1000'0d62: 0xa805          ADD      R0, SP, #0x14
  0x1000'0d64: 0x55c2          STRB     R2, [R0, R7]
  0x1000'0d66: 0x1c7f          ADDS     R7, R7, #1
  0x1000'0d68: 0xe7f4          B.N      ??_ftoa_21             ; 0x1000'0d54
                 ??_ftoa_22:
  //     if (len < PRINTF_FTOA_BUFFER_SIZE) {
  0x1000'0d6a: 0x2f20          CMP      R7, #32                ; 0x20
  0x1000'0d6c: 0xd203          BCS.N    ??_ftoa_19             ; 0x1000'0d76
  //       buf[len++] = '.';
  0x1000'0d6e: 0x222e          MOVS     R2, #46                ; 0x2e
  0x1000'0d70: 0xa805          ADD      R0, SP, #0x14
  0x1000'0d72: 0x55c2          STRB     R2, [R0, R7]
  0x1000'0d74: 0x1c7f          ADDS     R7, R7, #1
                 ??_ftoa_19:
  //   while (len < PRINTF_FTOA_BUFFER_SIZE) {
  0x1000'0d76: 0x2f20          CMP      R7, #32                ; 0x20
  0x1000'0d78: 0xd20d          BCS.N    ??_ftoa_23             ; 0x1000'0d96
  //     buf[len++] = (char)(48 + (whole % 10));
  0x1000'0d7a: 0x200a          MOVS     R0, #10                ; 0xa
  0x1000'0d7c: 0xfb95 0xf1f0   SDIV     R1, R5, R0
  0x1000'0d80: 0xfb00 0x5011   MLS      R0, R0, R1, R5
  0x1000'0d84: 0x3030          ADDS     R0, R0, #48            ; 0x30
  0x1000'0d86: 0xa905          ADD      R1, SP, #0x14
  0x1000'0d88: 0x55c8          STRB     R0, [R1, R7]
  0x1000'0d8a: 0x1c7f          ADDS     R7, R7, #1
  //     if (!(whole /= 10)) {
  0x1000'0d8c: 0x200a          MOVS     R0, #10                ; 0xa
  0x1000'0d8e: 0xfb95 0xf5f0   SDIV     R5, R5, R0
  0x1000'0d92: 0x2d00          CMP      R5, #0
  0x1000'0d94: 0xd1ef          BNE.N    ??_ftoa_19             ; 0x1000'0d76
                 ??_ftoa_23:
  //   if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
  0x1000'0d96: 0xf019 0x0003   ANDS.W   R0, R9, #3
  0x1000'0d9a: 0x2801          CMP      R0, #1
  0x1000'0d9c: 0xd114          BNE.N    ??_ftoa_24             ; 0x1000'0dc8
  //     if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
  0x1000'0d9e: 0xf1b8 0x0f00   CMP.W    R8, #0
  0x1000'0da2: 0xd008          BEQ.N    ??_ftoa_25             ; 0x1000'0db6
  0x1000'0da4: 0xf89d 0x0010   LDRB.W   R0, [SP, #0x10]
  0x1000'0da8: 0x2800          CMP      R0, #0
  0x1000'0daa: 0xd102          BNE.N    ??_ftoa_26             ; 0x1000'0db2
  0x1000'0dac: 0xf019 0x0f0c   TST.W    R9, #12                ; 0xc
  0x1000'0db0: 0xd001          BEQ.N    ??_ftoa_25             ; 0x1000'0db6
                 ??_ftoa_26:
  //       width--;
  0x1000'0db2: 0xf1b8 0x0801   SUBS.W   R8, R8, #1
                 ??_ftoa_25:
  //     while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
  0x1000'0db6: 0x4547          CMP      R7, R8
  0x1000'0db8: 0xd206          BCS.N    ??_ftoa_24             ; 0x1000'0dc8
  0x1000'0dba: 0x2f20          CMP      R7, #32                ; 0x20
  0x1000'0dbc: 0xd204          BCS.N    ??_ftoa_24             ; 0x1000'0dc8
  //       buf[len++] = '0';
  0x1000'0dbe: 0x2130          MOVS     R1, #48                ; 0x30
  0x1000'0dc0: 0xa805          ADD      R0, SP, #0x14
  0x1000'0dc2: 0x55c1          STRB     R1, [R0, R7]
  0x1000'0dc4: 0x1c7f          ADDS     R7, R7, #1
  0x1000'0dc6: 0xe7f6          B.N      ??_ftoa_25             ; 0x1000'0db6
                 ??_ftoa_24:
  //   if (len < PRINTF_FTOA_BUFFER_SIZE) {
  0x1000'0dc8: 0x2f20          CMP      R7, #32                ; 0x20
  0x1000'0dca: 0xd217          BCS.N    ??_ftoa_27             ; 0x1000'0dfc
  //     if (negative) {
  0x1000'0dcc: 0xf89d 0x0010   LDRB.W   R0, [SP, #0x10]
  0x1000'0dd0: 0x2800          CMP      R0, #0
  0x1000'0dd2: 0xd004          BEQ.N    ??_ftoa_28             ; 0x1000'0dde
  //       buf[len++] = '-';
  0x1000'0dd4: 0x212d          MOVS     R1, #45                ; 0x2d
  0x1000'0dd6: 0xa805          ADD      R0, SP, #0x14
  0x1000'0dd8: 0x55c1          STRB     R1, [R0, R7]
  0x1000'0dda: 0x1c7f          ADDS     R7, R7, #1
  0x1000'0ddc: 0xe00e          B.N      ??_ftoa_27             ; 0x1000'0dfc
                 ??_ftoa_28:
  //     else if (flags & FLAGS_PLUS) {
  0x1000'0dde: 0xea5f 0x7049   LSLS.W   R0, R9, #29
  0x1000'0de2: 0xd504          BPL.N    ??_ftoa_29             ; 0x1000'0dee
  //       buf[len++] = '+';  // ignore the space if the '+' exists
  0x1000'0de4: 0x202b          MOVS     R0, #43                ; 0x2b
  0x1000'0de6: 0xa905          ADD      R1, SP, #0x14
  0x1000'0de8: 0x55c8          STRB     R0, [R1, R7]
  0x1000'0dea: 0x1c7f          ADDS     R7, R7, #1
  0x1000'0dec: 0xe006          B.N      ??_ftoa_27             ; 0x1000'0dfc
                 ??_ftoa_29:
  //     else if (flags & FLAGS_SPACE) {
  0x1000'0dee: 0xea5f 0x7009   LSLS.W   R0, R9, #28
  0x1000'0df2: 0xd503          BPL.N    ??_ftoa_27             ; 0x1000'0dfc
  //       buf[len++] = ' ';
  0x1000'0df4: 0x2120          MOVS     R1, #32                ; 0x20
  0x1000'0df6: 0xa805          ADD      R0, SP, #0x14
  0x1000'0df8: 0x55c1          STRB     R1, [R0, R7]
  0x1000'0dfa: 0x1c7f          ADDS     R7, R7, #1
                 ??_ftoa_27:
  //   return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
  0x1000'0dfc: 0xf8cd 0x900c   STR.W    R9, [SP, #0xc]
  0x1000'0e00: 0xf8cd 0x8008   STR.W    R8, [SP, #0x8]
  0x1000'0e04: 0x9701          STR      R7, [SP, #0x4]
  0x1000'0e06: 0xa805          ADD      R0, SP, #0x14
  0x1000'0e08: 0x9000          STR      R0, [SP]
  0x1000'0e0a: 0x465b          MOV      R3, R11
  0x1000'0e0c: 0x9a18          LDR      R2, [SP, #0x60]
  0x1000'0e0e: 0x9917          LDR      R1, [SP, #0x5c]
  0x1000'0e10: 0x9816          LDR      R0, [SP, #0x58]
  0x1000'0e12: 0xf7ff 0xfd10   BL       _out_rev               ; 0x1000'0836
                 ??_ftoa_1:
  0x1000'0e16: 0xb00e          ADD      SP, SP, #0x38
  0x1000'0e18: 0xecbd 0x8b08   VPOP     {D8-D11}
  0x1000'0e1c: 0xe8bd 0x8ffe   POP.W    {R1-R11, PC}
                 `$d.8`:
                 ??DataTable1:
  0x1000'0e20: 0x006e'616e     DC8      "nan"
                 ??DataTable1_1:
  0x1000'0e24: 0x0069'6e66     DC8      "fni"
                 `$d.32`:
                 ??DataTable1_2:
  0x1000'0e28: 0x0000'0000     DC32     0                      ; '....'
  0x1000'0e2c: 0x0000'0000     DC32     0                      ; '....'
                 $t:
                 `.text_22`:
                 _etoa:
  // static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
  // {
  0x1000'0e30: 0xe92d 0x4ffe   PUSH.W   {R1-R11, LR}
  0x1000'0e34: 0xed2d 0x8b06   VPUSH    {D8-D10}
  0x1000'0e38: 0xb08a          SUB      SP, SP, #0x28
  0x1000'0e3a: 0x4680          MOV      R8, R0
  0x1000'0e3c: 0xeeb0 0x8a40   VMOV.F32 S16, S0
  0x1000'0e40: 0xeef0 0x8a60   VMOV.F32 S17, S1
  0x1000'0e44: 0x9d1c          LDR      R5, [SP, #0x70]
  0x1000'0e46: 0x9f1e          LDR      R7, [SP, #0x78]
  //   if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
  0x1000'0e48: 0xec51 0x0b18   VMOV     R0, R1, D8
  0x1000'0e4c: 0xec53 0x2b18   VMOV     R2, R3, D8
  0x1000'0e50: 0xf000 0xfe96   BL       __aeabi_cdcmpeq        ; 0x1000'1b80
  0x1000'0e54: 0xd10f          BNE.N    ??_etoa_0              ; 0x1000'0e76
  0x1000'0e56: 0xec51 0x0b18   VMOV     R0, R1, D8
  0x1000'0e5a: 0x2200          MOVS     R2, #0
  0x1000'0e5c: 0x4bd5          LDR.N    R3, ??DataTable2_1     ; 0x7ff0'0000
  0x1000'0e5e: 0xf000 0xfe8f   BL       __aeabi_cdcmpeq        ; 0x1000'1b80
  0x1000'0e62: 0xd008          BEQ.N    ??_etoa_0              ; 0x1000'0e76
  0x1000'0e64: 0xec51 0x0b18   VMOV     R0, R1, D8
  0x1000'0e68: 0xf05f 0x32ff   MOVS.W   R2, #-1                ; 0xffff'ffff
  0x1000'0e6c: 0xf47f 0x1380   MVNS.W   R3, #1048576           ; 0x10'0000
  0x1000'0e70: 0xf000 0xfe96   BL       __aeabi_cdcmple        ; 0x1000'1ba0
  0x1000'0e74: 0xd20e          BCS.N    ??_etoa_1              ; 0x1000'0e94
                 ??_etoa_0:
  //     return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
  0x1000'0e76: 0x9702          STR      R7, [SP, #0x8]
  0x1000'0e78: 0x981d          LDR      R0, [SP, #0x74]
  0x1000'0e7a: 0x9001          STR      R0, [SP, #0x4]
  0x1000'0e7c: 0x9500          STR      R5, [SP]
  0x1000'0e7e: 0xeeb0 0x0a48   VMOV.F32 S0, S16
  0x1000'0e82: 0xeef0 0x0a68   VMOV.F32 S1, S17
  0x1000'0e86: 0x9b12          LDR      R3, [SP, #0x48]
  0x1000'0e88: 0x9a11          LDR      R2, [SP, #0x44]
  0x1000'0e8a: 0x9910          LDR      R1, [SP, #0x40]
  0x1000'0e8c: 0x4640          MOV      R0, R8
  0x1000'0e8e: 0xf7ff 0xfe3d   BL       _ftoa                  ; 0x1000'0b0c
  0x1000'0e92: 0xe188          B.N      ??_etoa_2              ; 0x1000'11a6
                 ??_etoa_1:
  //   const bool negative = value < 0;
  0x1000'0e94: 0xec51 0x0b18   VMOV     R0, R1, D8
  0x1000'0e98: 0x2200          MOVS     R2, #0
  0x1000'0e9a: 0x2300          MOVS     R3, #0
  0x1000'0e9c: 0xf000 0xfe80   BL       __aeabi_cdcmple        ; 0x1000'1ba0
  0x1000'0ea0: 0xd202          BCS.N    ??_etoa_3              ; 0x1000'0ea8
  0x1000'0ea2: 0xf05f 0x0a01   MOVS.W   R10, #1
  0x1000'0ea6: 0xe001          B.N      ??_etoa_4              ; 0x1000'0eac
                 ??_etoa_3:
  0x1000'0ea8: 0xf05f 0x0a00   MOVS.W   R10, #0
                 ??_etoa_4:
  //   if (negative) {
  0x1000'0eac: 0x4650          MOV      R0, R10
  0x1000'0eae: 0xb2c0          UXTB     R0, R0
  0x1000'0eb0: 0x2800          CMP      R0, #0
  0x1000'0eb2: 0xd005          BEQ.N    ??_etoa_5              ; 0x1000'0ec0
  //     value = -value;
  0x1000'0eb4: 0xec51 0x0b18   VMOV     R0, R1, D8
  0x1000'0eb8: 0xf091 0x4100   EORS.W   R1, R1, #-2147483648   ; 0x8000'0000
  0x1000'0ebc: 0xec41 0x0b18   VMOV     D8, R0, R1
                 ??_etoa_5:
  //   if (!(flags & FLAGS_PRECISION)) {
  0x1000'0ec0: 0x0578          LSLS     R0, R7, #21
  0x1000'0ec2: 0xd401          BMI.N    ??_etoa_6              ; 0x1000'0ec8
  //     prec = PRINTF_DEFAULT_FLOAT_PRECISION;
  0x1000'0ec4: 0x2006          MOVS     R0, #6
  0x1000'0ec6: 0x0005          MOVS     R5, R0
                 ??_etoa_6:
  //   conv.F = value;
  0x1000'0ec8: 0xed8d 0x8b06   VSTR     D8, [SP, #24]
  //   int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
  0x1000'0ecc: 0xe9dd 0x0106   LDRD     R0, R1, [SP, #0x18]
  0x1000'0ed0: 0x0d08          LSRS     R0, R1, #20
  0x1000'0ed2: 0x2100          MOVS     R1, #0
  0x1000'0ed4: 0x0004          MOVS     R4, R0
  0x1000'0ed6: 0x0564          LSLS     R4, R4, #21
  0x1000'0ed8: 0x0d64          LSRS     R4, R4, #21
  0x1000'0eda: 0xf2a4 0x34ff   SUBW     R4, R4, #1023          ; 0x3ff
  //   conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
  0x1000'0ede: 0xe9dd 0x0106   LDRD     R0, R1, [SP, #0x18]
  0x1000'0ee2: 0xf05f 0x32ff   MOVS.W   R2, #-1                ; 0xffff'ffff
  0x1000'0ee6: 0xf8df 0x39b4   LDR.W    R3, ??DataTable9_1     ; 0xf'ffff
  0x1000'0eea: 0x4010          ANDS     R0, R0, R2
  0x1000'0eec: 0x4019          ANDS     R1, R1, R3
  0x1000'0eee: 0x2200          MOVS     R2, #0
  0x1000'0ef0: 0xf8df 0x39ac   LDR.W    R3, ??DataTable9_2     ; 0x3ff0'0000
  0x1000'0ef4: 0x4310          ORRS     R0, R0, R2
  0x1000'0ef6: 0x4319          ORRS     R1, R1, R3
  0x1000'0ef8: 0xe9cd 0x0106   STRD     R0, R1, [SP, #0x18]
  //   int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
  0x1000'0efc: 0x0020          MOVS     R0, R4
  0x1000'0efe: 0xf000 0xfeb3   BL       __aeabi_i2d            ; 0x1000'1c68
  0x1000'0f02: 0xf8df 0x29a0   LDR.W    R2, ??DataTable9_3     ; 0x509f'79fb
  0x1000'0f06: 0xf8df 0x39a0   LDR.W    R3, ??DataTable9_4     ; 0x3fd3'4413
  0x1000'0f0a: 0xf000 0xffef   BL       __aeabi_dmul           ; 0x1000'1eec
  0x1000'0f0e: 0xf8df 0x299c   LDR.W    R2, ??DataTable9_5     ; 0x8b60'c8b3
  0x1000'0f12: 0xf8df 0x399c   LDR.W    R3, ??DataTable9_6     ; 0x3fc6'8a28
  0x1000'0f16: 0xf000 0xfeb9   BL       __aeabi_dadd           ; 0x1000'1c8c
  0x1000'0f1a: 0xe9cd 0x0100   STRD     R0, R1, [SP]
  0x1000'0f1e: 0xe9dd 0x0106   LDRD     R0, R1, [SP, #0x18]
  0x1000'0f22: 0x2200          MOVS     R2, #0
  0x1000'0f24: 0xf8df 0x398c   LDR.W    R3, ??DataTable9_7     ; 0xbff8'0000
  0x1000'0f28: 0xf000 0xfeb0   BL       __aeabi_dadd           ; 0x1000'1c8c
  0x1000'0f2c: 0xf8df 0x2988   LDR.W    R2, ??DataTable9_8     ; 0x636f'4361
  0x1000'0f30: 0xf8df 0x3988   LDR.W    R3, ??DataTable9_9     ; 0x3fd2'87a7
  0x1000'0f34: 0xf000 0xffda   BL       __aeabi_dmul           ; 0x1000'1eec
  0x1000'0f38: 0xe9dd 0x2300   LDRD     R2, R3, [SP]
  0x1000'0f3c: 0xf000 0xfea6   BL       __aeabi_dadd           ; 0x1000'1c8c
  0x1000'0f40: 0xf000 0xfe62   BL       __aeabi_d2iz           ; 0x1000'1c08
  0x1000'0f44: 0x0006          MOVS     R6, R0
  //   exp2 = (int)(expval * 3.321928094887362 + 0.5);
  0x1000'0f46: 0x0030          MOVS     R0, R6
  0x1000'0f48: 0xf000 0xfe8e   BL       __aeabi_i2d            ; 0x1000'1c68
  0x1000'0f4c: 0xf8df 0x2970   LDR.W    R2, ??DataTable9_10    ; 0x979'a371
  0x1000'0f50: 0xf8df 0x3970   LDR.W    R3, ??DataTable9_11    ; 0x400a'934f
  0x1000'0f54: 0xf000 0xffca   BL       __aeabi_dmul           ; 0x1000'1eec
  0x1000'0f58: 0x2200          MOVS     R2, #0
  0x1000'0f5a: 0xf8df 0x393c   LDR.W    R3, ??DataTable9       ; 0x3fe0'0000
  0x1000'0f5e: 0xf000 0xfe95   BL       __aeabi_dadd           ; 0x1000'1c8c
  0x1000'0f62: 0xf000 0xfe51   BL       __aeabi_d2iz           ; 0x1000'1c08
  0x1000'0f66: 0x9008          STR      R0, [SP, #0x20]
  //   const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
  0x1000'0f68: 0x0030          MOVS     R0, R6
  0x1000'0f6a: 0xf000 0xfe7d   BL       __aeabi_i2d            ; 0x1000'1c68
  0x1000'0f6e: 0xf8df 0x2958   LDR.W    R2, ??DataTable9_12    ; 0xbbb5'5516
  0x1000'0f72: 0xf8df 0x3958   LDR.W    R3, ??DataTable9_13    ; 0x4002'6bb1
  0x1000'0f76: 0xf000 0xffb9   BL       __aeabi_dmul           ; 0x1000'1eec
  0x1000'0f7a: 0xe9cd 0x0100   STRD     R0, R1, [SP]
  0x1000'0f7e: 0x9808          LDR      R0, [SP, #0x20]
  0x1000'0f80: 0xf000 0xfe72   BL       __aeabi_i2d            ; 0x1000'1c68
  0x1000'0f84: 0xf8df 0x2948   LDR.W    R2, ??DataTable9_14    ; 0xfefa'39ef
  0x1000'0f88: 0xf8df 0x3948   LDR.W    R3, ??DataTable9_15    ; 0xbfe6'2e42
  0x1000'0f8c: 0xf000 0xffae   BL       __aeabi_dmul           ; 0x1000'1eec
  0x1000'0f90: 0xe9dd 0x2300   LDRD     R2, R3, [SP]
  0x1000'0f94: 0xf000 0xfe7a   BL       __aeabi_dadd           ; 0x1000'1c8c
  0x1000'0f98: 0xec41 0x0b1a   VMOV     D10, R0, R1
  //   const double z2 = z * z;
  0x1000'0f9c: 0xec51 0x0b1a   VMOV     R0, R1, D10
  0x1000'0fa0: 0xec53 0x2b1a   VMOV     R2, R3, D10
  0x1000'0fa4: 0xf000 0xffa2   BL       __aeabi_dmul           ; 0x1000'1eec
  0x1000'0fa8: 0xec41 0x0b19   VMOV     D9, R0, R1
  //   conv.U = (uint64_t)(exp2 + 1023) << 52U;
  0x1000'0fac: 0x9808          LDR      R0, [SP, #0x20]
  0x1000'0fae: 0xf200 0x30ff   ADDW     R0, R0, #1023          ; 0x3ff
  0x1000'0fb2: 0x17c1          ASRS     R1, R0, #31
  0x1000'0fb4: 0x0501          LSLS     R1, R0, #20
  0x1000'0fb6: 0x2000          MOVS     R0, #0
  0x1000'0fb8: 0xe9cd 0x0106   STRD     R0, R1, [SP, #0x18]
  //   conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
  0x1000'0fbc: 0xec51 0x0b1a   VMOV     R0, R1, D10
  0x1000'0fc0: 0x2200          MOVS     R2, #0
  0x1000'0fc2: 0xf05f 0x4380   MOVS.W   R3, #1073741824        ; 0x4000'0000
  0x1000'0fc6: 0xf000 0xff91   BL       __aeabi_dmul           ; 0x1000'1eec
  0x1000'0fca: 0xe9cd 0x0102   STRD     R0, R1, [SP, #0x8]
  0x1000'0fce: 0x2000          MOVS     R0, #0
  0x1000'0fd0: 0xf05f 0x4180   MOVS.W   R1, #1073741824        ; 0x4000'0000
  0x1000'0fd4: 0xec53 0x2b1a   VMOV     R2, R3, D10
  0x1000'0fd8: 0xf000 0xff16   BL       __aeabi_dsub           ; 0x1000'1e08
  0x1000'0fdc: 0xe9cd 0x0100   STRD     R0, R1, [SP]
  0x1000'0fe0: 0xec51 0x0b19   VMOV     R0, R1, D9
  0x1000'0fe4: 0x2200          MOVS     R2, #0
  0x1000'0fe6: 0xf8df 0x38f0   LDR.W    R3, ??DataTable9_16    ; 0x402c'0000
  0x1000'0fea: 0xf001 0xf875   BL       __aeabi_ddiv           ; 0x1000'20d8
  0x1000'0fee: 0x2200          MOVS     R2, #0
  0x1000'0ff0: 0xf8df 0x38e8   LDR.W    R3, ??DataTable9_17    ; 0x4024'0000
  0x1000'0ff4: 0xf000 0xfe4a   BL       __aeabi_dadd           ; 0x1000'1c8c
  0x1000'0ff8: 0x0002          MOVS     R2, R0
  0x1000'0ffa: 0x000b          MOVS     R3, R1
  0x1000'0ffc: 0xec51 0x0b19   VMOV     R0, R1, D9
  0x1000'1000: 0xf001 0xf86a   BL       __aeabi_ddiv           ; 0x1000'20d8
  0x1000'1004: 0x2200          MOVS     R2, #0
  0x1000'1006: 0xf8df 0x38d8   LDR.W    R3, ??DataTable9_18    ; 0x4018'0000
  0x1000'100a: 0xf000 0xfe3f   BL       __aeabi_dadd           ; 0x1000'1c8c
  0x1000'100e: 0x0002          MOVS     R2, R0
  0x1000'1010: 0x000b          MOVS     R3, R1
  0x1000'1012: 0xec51 0x0b19   VMOV     R0, R1, D9
  0x1000'1016: 0xf001 0xf85f   BL       __aeabi_ddiv           ; 0x1000'20d8
  0x1000'101a: 0xe9dd 0x2300   LDRD     R2, R3, [SP]
  0x1000'101e: 0xf000 0xfe35   BL       __aeabi_dadd           ; 0x1000'1c8c
  0x1000'1022: 0x0002          MOVS     R2, R0
  0x1000'1024: 0x000b          MOVS     R3, R1
  0x1000'1026: 0xe9dd 0x0102   LDRD     R0, R1, [SP, #0x8]
  0x1000'102a: 0xf001 0xf855   BL       __aeabi_ddiv           ; 0x1000'20d8
  0x1000'102e: 0x2200          MOVS     R2, #0
  0x1000'1030: 0xf8df 0x386c   LDR.W    R3, ??DataTable9_2     ; 0x3ff0'0000
  0x1000'1034: 0xf000 0xfe2a   BL       __aeabi_dadd           ; 0x1000'1c8c
  0x1000'1038: 0xe9dd 0x2306   LDRD     R2, R3, [SP, #0x18]
  0x1000'103c: 0xf000 0xff56   BL       __aeabi_dmul           ; 0x1000'1eec
  0x1000'1040: 0xe9cd 0x0106   STRD     R0, R1, [SP, #0x18]
  //   if (value < conv.F) {
  0x1000'1044: 0xec51 0x0b18   VMOV     R0, R1, D8
  0x1000'1048: 0xe9dd 0x2306   LDRD     R2, R3, [SP, #0x18]
  0x1000'104c: 0xf000 0xfda8   BL       __aeabi_cdcmple        ; 0x1000'1ba0
  0x1000'1050: 0xd209          BCS.N    ??_etoa_7              ; 0x1000'1066
  //     expval--;
  0x1000'1052: 0x1e76          SUBS     R6, R6, #1
  //     conv.F /= 10;
  0x1000'1054: 0xe9dd 0x0106   LDRD     R0, R1, [SP, #0x18]
  0x1000'1058: 0x2200          MOVS     R2, #0
  0x1000'105a: 0xf8df 0x3880   LDR.W    R3, ??DataTable9_17    ; 0x4024'0000
  0x1000'105e: 0xf001 0xf83b   BL       __aeabi_ddiv           ; 0x1000'20d8
  0x1000'1062: 0xe9cd 0x0106   STRD     R0, R1, [SP, #0x18]
                 ??_etoa_7:
  //   unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
  0x1000'1066: 0x2e64          CMP      R6, #100               ; 0x64
  0x1000'1068: 0xda04          BGE.N    ??_etoa_8              ; 0x1000'1074
  0x1000'106a: 0xf116 0x0f63   CMN.W    R6, #99                ; 0x63
  0x1000'106e: 0xdb01          BLT.N    ??_etoa_8              ; 0x1000'1074
  0x1000'1070: 0x2404          MOVS     R4, #4
  0x1000'1072: 0xe000          B.N      ??_etoa_9              ; 0x1000'1076
                 ??_etoa_8:
  0x1000'1074: 0x2405          MOVS     R4, #5
                 ??_etoa_9:
  //   if (flags & FLAGS_ADAPT_EXP) {
  0x1000'1076: 0x0538          LSLS     R0, R7, #20
  0x1000'1078: 0xd523          BPL.N    ??_etoa_10             ; 0x1000'10c2
  //     if ((value >= 1e-4) && (value < 1e6)) {
  0x1000'107a: 0xec51 0x0b18   VMOV     R0, R1, D8
  0x1000'107e: 0xf8df 0x2864   LDR.W    R2, ??DataTable9_19    ; 0xeb1c'432d
  0x1000'1082: 0xf8df 0x3864   LDR.W    R3, ??DataTable9_20    ; 0x3f1a'36e2
  0x1000'1086: 0xf000 0xfda5   BL       __aeabi_cdrcmple       ; 0x1000'1bd4
  0x1000'108a: 0xd815          BHI.N    ??_etoa_11             ; 0x1000'10b8
  0x1000'108c: 0xec51 0x0b18   VMOV     R0, R1, D8
  0x1000'1090: 0x2200          MOVS     R2, #0
  0x1000'1092: 0xf8df 0x3858   LDR.W    R3, ??DataTable9_21    ; 0x412e'8480
  0x1000'1096: 0xf000 0xfd83   BL       __aeabi_cdcmple        ; 0x1000'1ba0
  0x1000'109a: 0xd20d          BCS.N    ??_etoa_11             ; 0x1000'10b8
  //       if ((int)prec > expval) {
  0x1000'109c: 0x42ae          CMP      R6, R5
  0x1000'109e: 0xda02          BGE.N    ??_etoa_12             ; 0x1000'10a6
  //         prec = (unsigned)((int)prec - expval - 1);
  0x1000'10a0: 0x1bad          SUBS     R5, R5, R6
  0x1000'10a2: 0x1e6d          SUBS     R5, R5, #1
  0x1000'10a4: 0xe001          B.N      ??_etoa_13             ; 0x1000'10aa
                 ??_etoa_12:
  //         prec = 0;
  0x1000'10a6: 0x2000          MOVS     R0, #0
  0x1000'10a8: 0x0005          MOVS     R5, R0
                 ??_etoa_13:
  //       flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
  0x1000'10aa: 0xf457 0x6780   ORRS.W   R7, R7, #1024          ; 0x400
  //       minwidth = 0U;
  0x1000'10ae: 0x2000          MOVS     R0, #0
  0x1000'10b0: 0x0004          MOVS     R4, R0
  //       expval   = 0;
  0x1000'10b2: 0x2000          MOVS     R0, #0
  0x1000'10b4: 0x0006          MOVS     R6, R0
  0x1000'10b6: 0xe004          B.N      ??_etoa_10             ; 0x1000'10c2
                 ??_etoa_11:
  //       if ((prec > 0) && (flags & FLAGS_PRECISION)) {
  0x1000'10b8: 0x2d00          CMP      R5, #0
  0x1000'10ba: 0xd002          BEQ.N    ??_etoa_10             ; 0x1000'10c2
  0x1000'10bc: 0x0578          LSLS     R0, R7, #21
  0x1000'10be: 0xd500          BPL.N    ??_etoa_10             ; 0x1000'10c2
  //         --prec;
  0x1000'10c0: 0x1e6d          SUBS     R5, R5, #1
                 ??_etoa_10:
  //   unsigned int fwidth = width;
  0x1000'10c2: 0x981d          LDR      R0, [SP, #0x74]
  //   if (width > minwidth) {
  0x1000'10c4: 0x991d          LDR      R1, [SP, #0x74]
  0x1000'10c6: 0x428c          CMP      R4, R1
  0x1000'10c8: 0xd202          BCS.N    ??_etoa_14             ; 0x1000'10d0
  //     fwidth -= minwidth;
  0x1000'10ca: 0x1b00          SUBS     R0, R0, R4
  0x1000'10cc: 0x4681          MOV      R9, R0
  0x1000'10ce: 0xe001          B.N      ??_etoa_15             ; 0x1000'10d4
                 ??_etoa_14:
  //     fwidth = 0U;
  0x1000'10d0: 0xf05f 0x0900   MOVS.W   R9, #0
                 ??_etoa_15:
  //   if ((flags & FLAGS_LEFT) && minwidth) {
  0x1000'10d4: 0x07b8          LSLS     R0, R7, #30
  0x1000'10d6: 0xd503          BPL.N    ??_etoa_16             ; 0x1000'10e0
  0x1000'10d8: 0x2c00          CMP      R4, #0
  0x1000'10da: 0xd001          BEQ.N    ??_etoa_16             ; 0x1000'10e0
  //     fwidth = 0U;
  0x1000'10dc: 0x2000          MOVS     R0, #0
  0x1000'10de: 0x4681          MOV      R9, R0
                 ??_etoa_16:
  //   if (expval) {
  0x1000'10e0: 0x2e00          CMP      R6, #0
  0x1000'10e2: 0xd007          BEQ.N    ??_etoa_17             ; 0x1000'10f4
  //     value /= conv.F;
  0x1000'10e4: 0xec51 0x0b18   VMOV     R0, R1, D8
  0x1000'10e8: 0xe9dd 0x2306   LDRD     R2, R3, [SP, #0x18]
  0x1000'10ec: 0xf000 0xfff4   BL       __aeabi_ddiv           ; 0x1000'20d8
  0x1000'10f0: 0xec41 0x0b18   VMOV     D8, R0, R1
                 ??_etoa_17:
  //   const size_t start_idx = idx;
  0x1000'10f4: 0x9811          LDR      R0, [SP, #0x44]
  0x1000'10f6: 0x9009          STR      R0, [SP, #0x24]
  //   idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
  0x1000'10f8: 0x4650          MOV      R0, R10
  0x1000'10fa: 0xb2c0          UXTB     R0, R0
  0x1000'10fc: 0x2800          CMP      R0, #0
  0x1000'10fe: 0xd006          BEQ.N    ??_etoa_18             ; 0x1000'110e
  0x1000'1100: 0xec51 0x0b18   VMOV     R0, R1, D8
  0x1000'1104: 0xf091 0x4100   EORS.W   R1, R1, #-2147483648   ; 0x8000'0000
  0x1000'1108: 0xec41 0x0b10   VMOV     D0, R0, R1
  0x1000'110c: 0xe003          B.N      ??_etoa_19             ; 0x1000'1116
                 ??_etoa_18:
  0x1000'110e: 0xeeb0 0x0a48   VMOV.F32 S0, S16
  0x1000'1112: 0xeef0 0x0a68   VMOV.F32 S1, S17
                 ??_etoa_19:
  0x1000'1116: 0xf437 0x6000   BICS.W   R0, R7, #2048          ; 0x800
  0x1000'111a: 0x9002          STR      R0, [SP, #0x8]
  0x1000'111c: 0xf8cd 0x9004   STR.W    R9, [SP, #0x4]
  0x1000'1120: 0x9500          STR      R5, [SP]
  0x1000'1122: 0x9b12          LDR      R3, [SP, #0x48]
  0x1000'1124: 0x9a11          LDR      R2, [SP, #0x44]
  0x1000'1126: 0x9910          LDR      R1, [SP, #0x40]
  0x1000'1128: 0x4640          MOV      R0, R8
  0x1000'112a: 0xf7ff 0xfcef   BL       _ftoa                  ; 0x1000'0b0c
  0x1000'112e: 0x4683          MOV      R11, R0
  //   if (minwidth) {
  0x1000'1130: 0x2c00          CMP      R4, #0
  0x1000'1132: 0xd037          BEQ.N    ??_etoa_20             ; 0x1000'11a4
  //     out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
  0x1000'1134: 0x465a          MOV      R2, R11
  0x1000'1136: 0x1c50          ADDS     R0, R2, #1
  0x1000'1138: 0x9011          STR      R0, [SP, #0x44]
  0x1000'113a: 0x06b8          LSLS     R0, R7, #26
  0x1000'113c: 0xd501          BPL.N    ??_etoa_21             ; 0x1000'1142
  0x1000'113e: 0x2045          MOVS     R0, #69                ; 0x45
  0x1000'1140: 0xe000          B.N      ??_etoa_22             ; 0x1000'1144
                 ??_etoa_21:
  0x1000'1142: 0x2065          MOVS     R0, #101               ; 0x65
                 ??_etoa_22:
  0x1000'1144: 0x9b12          LDR      R3, [SP, #0x48]
  0x1000'1146: 0x9910          LDR      R1, [SP, #0x40]
  0x1000'1148: 0xb2c0          UXTB     R0, R0
  0x1000'114a: 0x47c0          BLX      R8
  //     idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
  0x1000'114c: 0x2e00          CMP      R6, #0
  0x1000'114e: 0xd501          BPL.N    ??_etoa_23             ; 0x1000'1154
  0x1000'1150: 0x2001          MOVS     R0, #1
  0x1000'1152: 0xe000          B.N      ??_etoa_24             ; 0x1000'1156
                 ??_etoa_23:
  0x1000'1154: 0x2000          MOVS     R0, #0
                 ??_etoa_24:
  0x1000'1156: 0x2e00          CMP      R6, #0
  0x1000'1158: 0xd501          BPL.N    ??_etoa_25             ; 0x1000'115e
  0x1000'115a: 0x4271          RSBS     R1, R6, #0
  0x1000'115c: 0xe000          B.N      ??_etoa_26             ; 0x1000'1160
                 ??_etoa_25:
  0x1000'115e: 0x0031          MOVS     R1, R6
                 ??_etoa_26:
  0x1000'1160: 0x2205          MOVS     R2, #5
  0x1000'1162: 0x9205          STR      R2, [SP, #0x14]
  0x1000'1164: 0x1e62          SUBS     R2, R4, #1
  0x1000'1166: 0x9204          STR      R2, [SP, #0x10]
  0x1000'1168: 0x2200          MOVS     R2, #0
  0x1000'116a: 0x9203          STR      R2, [SP, #0xc]
  0x1000'116c: 0x220a          MOVS     R2, #10                ; 0xa
  0x1000'116e: 0x9202          STR      R2, [SP, #0x8]
  0x1000'1170: 0xb2c0          UXTB     R0, R0
  0x1000'1172: 0x9001          STR      R0, [SP, #0x4]
  0x1000'1174: 0x9100          STR      R1, [SP]
  0x1000'1176: 0x9b12          LDR      R3, [SP, #0x48]
  0x1000'1178: 0x9a11          LDR      R2, [SP, #0x44]
  0x1000'117a: 0x9910          LDR      R1, [SP, #0x40]
  0x1000'117c: 0x4640          MOV      R0, R8
  0x1000'117e: 0xf7ff 0xfc1f   BL       _ntoa_long             ; 0x1000'09c0
  0x1000'1182: 0x4683          MOV      R11, R0
  //     if (flags & FLAGS_LEFT) {
  0x1000'1184: 0x07b8          LSLS     R0, R7, #30
  0x1000'1186: 0xd50d          BPL.N    ??_etoa_20             ; 0x1000'11a4
                 ??_etoa_27:
  //       while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
  0x1000'1188: 0x9909          LDR      R1, [SP, #0x24]
  0x1000'118a: 0xebbb 0x0101   SUBS.W   R1, R11, R1
  0x1000'118e: 0x981d          LDR      R0, [SP, #0x74]
  0x1000'1190: 0x4281          CMP      R1, R0
  0x1000'1192: 0xd207          BCS.N    ??_etoa_20             ; 0x1000'11a4
  //       while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
  0x1000'1194: 0x9b12          LDR      R3, [SP, #0x48]
  0x1000'1196: 0x465a          MOV      R2, R11
  0x1000'1198: 0x9910          LDR      R1, [SP, #0x40]
  0x1000'119a: 0x2020          MOVS     R0, #32                ; 0x20
  0x1000'119c: 0x47c0          BLX      R8
  0x1000'119e: 0xf11b 0x0b01   ADDS.W   R11, R11, #1
  0x1000'11a2: 0xe7f1          B.N      ??_etoa_27             ; 0x1000'1188
                 ??_etoa_20:
  //   return idx;
  0x1000'11a4: 0x4658          MOV      R0, R11
                 ??_etoa_2:
  0x1000'11a6: 0xb00a          ADD      SP, SP, #0x28
  0x1000'11a8: 0xecbd 0x8b06   VPOP     {D8-D10}
  0x1000'11ac: 0xe8bd 0x8ffe   POP.W    {R1-R11, PC}
                 `$d.32`:
                 ??DataTable2:
  0x1000'11b0: 0x1000'42e4     DC32     ?_1
                 ??DataTable2_1:
  0x1000'11b4: 0x7ff0'0000     DC32     0x7ff0'0000            ; '....'
                 ??DataTable2_2:
  0x1000'11b8: 0x1000'42ec     DC32     ?_2
                 ??DataTable2_3:
  0x1000'11bc: 0x41cd'cd65     DC32     0x41cd'cd65            ; 'e..A'
                 ??DataTable2_4:
  0x1000'11c0: 0xc1cd'cd65     DC32     0xc1cd'cd65            ; 'e...'
                 ??DataTable2_5:
  0x1000'11c4: 0x1000'4048     DC32     `_ftoa::pow10`
                 $t:
                 `.text_29`:
                 _vsnprintf:
  // static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
  // {
  0x1000'11c8: 0xe92d 0x4ffb   PUSH.W   {R0, R1, R3-R11, LR}
  0x1000'11cc: 0xb090          SUB      SP, SP, #0x40
  0x1000'11ce: 0x0007          MOVS     R7, R0
  0x1000'11d0: 0x4692          MOV      R10, R2
  0x1000'11d2: 0x9e1c          LDR      R6, [SP, #0x70]
  //   size_t idx = 0U;
  0x1000'11d4: 0x2500          MOVS     R5, #0
  //   if (!buffer) {
  0x1000'11d6: 0x9811          LDR      R0, [SP, #0x44]
  0x1000'11d8: 0x2800          CMP      R0, #0
  0x1000'11da: 0xd102          BNE.N    ??_vsnprintf_0         ; 0x1000'11e2
  //     out = _out_null;
  0x1000'11dc: 0xf8df 0x0710   LDR.W    R0, ??DataTable9_22    ; _out_null
  0x1000'11e0: 0x0007          MOVS     R7, R0
                 ??_vsnprintf_0:
  //   while (*format)
  0x1000'11e2: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'11e4: 0x7800          LDRB     R0, [R0]
  0x1000'11e6: 0x2800          CMP      R0, #0
  0x1000'11e8: 0xf000 0x8338   BEQ.W    ??_vsnprintf_1         ; 0x1000'185c
  //     if (*format != '%') {
  0x1000'11ec: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'11ee: 0x7800          LDRB     R0, [R0]
  0x1000'11f0: 0x2825          CMP      R0, #37                ; 0x25
  0x1000'11f2: 0xd00a          BEQ.N    ??_vsnprintf_2         ; 0x1000'120a
  //       out(*format, buffer, idx++, maxlen);
  0x1000'11f4: 0x4653          MOV      R3, R10
  0x1000'11f6: 0x002a          MOVS     R2, R5
  0x1000'11f8: 0x9911          LDR      R1, [SP, #0x44]
  0x1000'11fa: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'11fc: 0x7800          LDRB     R0, [R0]
  0x1000'11fe: 0x47b8          BLX      R7
  0x1000'1200: 0x1c6d          ADDS     R5, R5, #1
  //       format++;
  0x1000'1202: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'1204: 0x1c40          ADDS     R0, R0, #1
  0x1000'1206: 0x9012          STR      R0, [SP, #0x48]
  //       continue;
  0x1000'1208: 0xe7eb          B.N      ??_vsnprintf_0         ; 0x1000'11e2
                 ??_vsnprintf_2:
  //       format++;
  0x1000'120a: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'120c: 0x1c40          ADDS     R0, R0, #1
  0x1000'120e: 0x9012          STR      R0, [SP, #0x48]
  //     flags = 0U;
  0x1000'1210: 0x2000          MOVS     R0, #0
  0x1000'1212: 0x0004          MOVS     R4, R0
                 ??_vsnprintf_3:
  //       switch (*format) {
  0x1000'1214: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'1216: 0x7800          LDRB     R0, [R0]
  0x1000'1218: 0x2820          CMP      R0, #32                ; 0x20
  0x1000'121a: 0xd01f          BEQ.N    ??_vsnprintf_4         ; 0x1000'125c
  0x1000'121c: 0x2823          CMP      R0, #35                ; 0x23
  0x1000'121e: 0xd025          BEQ.N    ??_vsnprintf_5         ; 0x1000'126c
  0x1000'1220: 0x282b          CMP      R0, #43                ; 0x2b
  0x1000'1222: 0xd013          BEQ.N    ??_vsnprintf_6         ; 0x1000'124c
  0x1000'1224: 0x282d          CMP      R0, #45                ; 0x2d
  0x1000'1226: 0xd009          BEQ.N    ??_vsnprintf_7         ; 0x1000'123c
  0x1000'1228: 0x2830          CMP      R0, #48                ; 0x30
  0x1000'122a: 0xd127          BNE.N    ??_vsnprintf_8         ; 0x1000'127c
                 ??_vsnprintf_9:
  //         case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
  0x1000'122c: 0xf054 0x0401   ORRS.W   R4, R4, #1
  //         case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
  0x1000'1230: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'1232: 0x1c40          ADDS     R0, R0, #1
  0x1000'1234: 0x9012          STR      R0, [SP, #0x48]
  //         case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
  0x1000'1236: 0x2001          MOVS     R0, #1
  0x1000'1238: 0x900a          STR      R0, [SP, #0x28]
  //         case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
  0x1000'123a: 0xe021          B.N      ??_vsnprintf_10        ; 0x1000'1280
                 ??_vsnprintf_7:
  //         case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
  0x1000'123c: 0xf054 0x0402   ORRS.W   R4, R4, #2
  //         case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
  0x1000'1240: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'1242: 0x1c40          ADDS     R0, R0, #1
  0x1000'1244: 0x9012          STR      R0, [SP, #0x48]
  //         case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
  0x1000'1246: 0x2001          MOVS     R0, #1
  0x1000'1248: 0x900a          STR      R0, [SP, #0x28]
  //         case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
  0x1000'124a: 0xe019          B.N      ??_vsnprintf_10        ; 0x1000'1280
                 ??_vsnprintf_6:
  //         case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
  0x1000'124c: 0xf054 0x0404   ORRS.W   R4, R4, #4
  //         case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
  0x1000'1250: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'1252: 0x1c40          ADDS     R0, R0, #1
  0x1000'1254: 0x9012          STR      R0, [SP, #0x48]
  //         case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
  0x1000'1256: 0x2001          MOVS     R0, #1
  0x1000'1258: 0x900a          STR      R0, [SP, #0x28]
  //         case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
  0x1000'125a: 0xe011          B.N      ??_vsnprintf_10        ; 0x1000'1280
                 ??_vsnprintf_4:
  //         case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
  0x1000'125c: 0xf054 0x0408   ORRS.W   R4, R4, #8
  //         case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
  0x1000'1260: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'1262: 0x1c40          ADDS     R0, R0, #1
  0x1000'1264: 0x9012          STR      R0, [SP, #0x48]
  //         case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
  0x1000'1266: 0x2001          MOVS     R0, #1
  0x1000'1268: 0x900a          STR      R0, [SP, #0x28]
  //         case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
  0x1000'126a: 0xe009          B.N      ??_vsnprintf_10        ; 0x1000'1280
                 ??_vsnprintf_5:
  //         case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
  0x1000'126c: 0xf054 0x0410   ORRS.W   R4, R4, #16            ; 0x10
  //         case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
  0x1000'1270: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'1272: 0x1c40          ADDS     R0, R0, #1
  0x1000'1274: 0x9012          STR      R0, [SP, #0x48]
  //         case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
  0x1000'1276: 0x2001          MOVS     R0, #1
  0x1000'1278: 0x900a          STR      R0, [SP, #0x28]
  //         case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
  0x1000'127a: 0xe001          B.N      ??_vsnprintf_10        ; 0x1000'1280
                 ??_vsnprintf_8:
  //         default :                                   n = 0U; break;
  0x1000'127c: 0x2000          MOVS     R0, #0
  0x1000'127e: 0x900a          STR      R0, [SP, #0x28]
                 ??_vsnprintf_10:
  //     } while (n);
  0x1000'1280: 0x980a          LDR      R0, [SP, #0x28]
  0x1000'1282: 0x2800          CMP      R0, #0
  0x1000'1284: 0xd1c6          BNE.N    ??_vsnprintf_3         ; 0x1000'1214
  //     width = 0U;
  0x1000'1286: 0x2000          MOVS     R0, #0
  0x1000'1288: 0x9009          STR      R0, [SP, #0x24]
  //     if (_is_digit(*format)) {
  0x1000'128a: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'128c: 0x7800          LDRB     R0, [R0]
  0x1000'128e: 0xf7ff 0xfab2   BL       _is_digit              ; 0x1000'07f6
  0x1000'1292: 0x2800          CMP      R0, #0
  0x1000'1294: 0xd004          BEQ.N    ??_vsnprintf_11        ; 0x1000'12a0
  //       width = _atoi(&format);
  0x1000'1296: 0xa812          ADD      R0, SP, #0x48
  0x1000'1298: 0xf7ff 0xfab9   BL       _atoi                  ; 0x1000'080e
  0x1000'129c: 0x9009          STR      R0, [SP, #0x24]
  0x1000'129e: 0xe010          B.N      ??_vsnprintf_12        ; 0x1000'12c2
                 ??_vsnprintf_11:
  //     else if (*format == '*') {
  0x1000'12a0: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'12a2: 0x7800          LDRB     R0, [R0]
  0x1000'12a4: 0x282a          CMP      R0, #42                ; 0x2a
  0x1000'12a6: 0xd10c          BNE.N    ??_vsnprintf_12        ; 0x1000'12c2
  //       const int w = va_arg(va, int);
  0x1000'12a8: 0x6830          LDR      R0, [R6]
  0x1000'12aa: 0x1d36          ADDS     R6, R6, #4
  //       if (w < 0) {
  0x1000'12ac: 0x2800          CMP      R0, #0
  0x1000'12ae: 0xd504          BPL.N    ??_vsnprintf_13        ; 0x1000'12ba
  //         flags |= FLAGS_LEFT;    // reverse padding
  0x1000'12b0: 0xf054 0x0402   ORRS.W   R4, R4, #2
  //         width = (unsigned int)-w;
  0x1000'12b4: 0x4241          RSBS     R1, R0, #0
  0x1000'12b6: 0x9109          STR      R1, [SP, #0x24]
  0x1000'12b8: 0xe000          B.N      ??_vsnprintf_14        ; 0x1000'12bc
                 ??_vsnprintf_13:
  //         width = (unsigned int)w;
  0x1000'12ba: 0x9009          STR      R0, [SP, #0x24]
                 ??_vsnprintf_14:
  //       format++;
  0x1000'12bc: 0x9912          LDR      R1, [SP, #0x48]
  0x1000'12be: 0x1c49          ADDS     R1, R1, #1
  0x1000'12c0: 0x9112          STR      R1, [SP, #0x48]
                 ??_vsnprintf_12:
  //     precision = 0U;
  0x1000'12c2: 0x2000          MOVS     R0, #0
  0x1000'12c4: 0x4680          MOV      R8, R0
  //     if (*format == '.') {
  0x1000'12c6: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'12c8: 0x7800          LDRB     R0, [R0]
  0x1000'12ca: 0x282e          CMP      R0, #46                ; 0x2e
  0x1000'12cc: 0xd11e          BNE.N    ??_vsnprintf_15        ; 0x1000'130c
  //       flags |= FLAGS_PRECISION;
  0x1000'12ce: 0xf454 0x6480   ORRS.W   R4, R4, #1024          ; 0x400
  //       format++;
  0x1000'12d2: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'12d4: 0x1c40          ADDS     R0, R0, #1
  0x1000'12d6: 0x9012          STR      R0, [SP, #0x48]
  //       if (_is_digit(*format)) {
  0x1000'12d8: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'12da: 0x7800          LDRB     R0, [R0]
  0x1000'12dc: 0xf7ff 0xfa8b   BL       _is_digit              ; 0x1000'07f6
  0x1000'12e0: 0x2800          CMP      R0, #0
  0x1000'12e2: 0xd004          BEQ.N    ??_vsnprintf_16        ; 0x1000'12ee
  //         precision = _atoi(&format);
  0x1000'12e4: 0xa812          ADD      R0, SP, #0x48
  0x1000'12e6: 0xf7ff 0xfa92   BL       _atoi                  ; 0x1000'080e
  0x1000'12ea: 0x4680          MOV      R8, R0
  0x1000'12ec: 0xe00e          B.N      ??_vsnprintf_15        ; 0x1000'130c
                 ??_vsnprintf_16:
  //       else if (*format == '*') {
  0x1000'12ee: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'12f0: 0x7800          LDRB     R0, [R0]
  0x1000'12f2: 0x282a          CMP      R0, #42                ; 0x2a
  0x1000'12f4: 0xd10a          BNE.N    ??_vsnprintf_15        ; 0x1000'130c
  //         const int prec = (int)va_arg(va, int);
  0x1000'12f6: 0x6830          LDR      R0, [R6]
  0x1000'12f8: 0x1d36          ADDS     R6, R6, #4
  //         precision = prec > 0 ? (unsigned int)prec : 0U;
  0x1000'12fa: 0x2801          CMP      R0, #1
  0x1000'12fc: 0xdb01          BLT.N    ??_vsnprintf_17        ; 0x1000'1302
  0x1000'12fe: 0x4680          MOV      R8, R0
  0x1000'1300: 0xe001          B.N      ??_vsnprintf_18        ; 0x1000'1306
                 ??_vsnprintf_17:
  0x1000'1302: 0xf05f 0x0800   MOVS.W   R8, #0
                 ??_vsnprintf_18:
  //         format++;
  0x1000'1306: 0x9912          LDR      R1, [SP, #0x48]
  0x1000'1308: 0x1c49          ADDS     R1, R1, #1
  0x1000'130a: 0x9112          STR      R1, [SP, #0x48]
                 ??_vsnprintf_15:
  //     switch (*format) {
  0x1000'130c: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'130e: 0x7800          LDRB     R0, [R0]
  0x1000'1310: 0x2868          CMP      R0, #104               ; 0x68
  0x1000'1312: 0xd017          BEQ.N    ??_vsnprintf_19        ; 0x1000'1344
  0x1000'1314: 0x286a          CMP      R0, #106               ; 0x6a
  0x1000'1316: 0xd02a          BEQ.N    ??_vsnprintf_20        ; 0x1000'136e
  0x1000'1318: 0x286c          CMP      R0, #108               ; 0x6c
  0x1000'131a: 0xd004          BEQ.N    ??_vsnprintf_21        ; 0x1000'1326
  0x1000'131c: 0x2874          CMP      R0, #116               ; 0x74
  0x1000'131e: 0xd020          BEQ.N    ??_vsnprintf_22        ; 0x1000'1362
  0x1000'1320: 0x287a          CMP      R0, #122               ; 0x7a
  0x1000'1322: 0xd02a          BEQ.N    ??_vsnprintf_23        ; 0x1000'137a
  0x1000'1324: 0xe02f          B.N      ??_vsnprintf_26        ; 0x1000'1386
                 ??_vsnprintf_21:
  //         flags |= FLAGS_LONG;
  0x1000'1326: 0xf454 0x7480   ORRS.W   R4, R4, #256           ; 0x100
  //         format++;
  0x1000'132a: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'132c: 0x1c40          ADDS     R0, R0, #1
  0x1000'132e: 0x9012          STR      R0, [SP, #0x48]
  //         if (*format == 'l') {
  0x1000'1330: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'1332: 0x7800          LDRB     R0, [R0]
  0x1000'1334: 0x286c          CMP      R0, #108               ; 0x6c
  0x1000'1336: 0xd104          BNE.N    ??_vsnprintf_25        ; 0x1000'1342
  //           flags |= FLAGS_LONG_LONG;
  0x1000'1338: 0xf454 0x7400   ORRS.W   R4, R4, #512           ; 0x200
  //           format++;
  0x1000'133c: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'133e: 0x1c40          ADDS     R0, R0, #1
  0x1000'1340: 0x9012          STR      R0, [SP, #0x48]
                 ??_vsnprintf_25:
  //         break;
  0x1000'1342: 0xe020          B.N      ??_vsnprintf_26        ; 0x1000'1386
                 ??_vsnprintf_19:
  //         flags |= FLAGS_SHORT;
  0x1000'1344: 0xf054 0x0480   ORRS.W   R4, R4, #128           ; 0x80
  //         format++;
  0x1000'1348: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'134a: 0x1c40          ADDS     R0, R0, #1
  0x1000'134c: 0x9012          STR      R0, [SP, #0x48]
  //         if (*format == 'h') {
  0x1000'134e: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'1350: 0x7800          LDRB     R0, [R0]
  0x1000'1352: 0x2868          CMP      R0, #104               ; 0x68
  0x1000'1354: 0xd104          BNE.N    ??_vsnprintf_27        ; 0x1000'1360
  //           flags |= FLAGS_CHAR;
  0x1000'1356: 0xf054 0x0440   ORRS.W   R4, R4, #64            ; 0x40
  //           format++;
  0x1000'135a: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'135c: 0x1c40          ADDS     R0, R0, #1
  0x1000'135e: 0x9012          STR      R0, [SP, #0x48]
                 ??_vsnprintf_27:
  //         break;
  0x1000'1360: 0xe011          B.N      ??_vsnprintf_26        ; 0x1000'1386
                 ??_vsnprintf_22:
  //         flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
  0x1000'1362: 0xf454 0x7480   ORRS.W   R4, R4, #256           ; 0x100
  //         format++;
  0x1000'1366: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'1368: 0x1c40          ADDS     R0, R0, #1
  0x1000'136a: 0x9012          STR      R0, [SP, #0x48]
  //         break;
  0x1000'136c: 0xe00b          B.N      ??_vsnprintf_26        ; 0x1000'1386
                 ??_vsnprintf_20:
  //         flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
  0x1000'136e: 0xf454 0x7400   ORRS.W   R4, R4, #512           ; 0x200
  //         format++;
  0x1000'1372: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'1374: 0x1c40          ADDS     R0, R0, #1
  0x1000'1376: 0x9012          STR      R0, [SP, #0x48]
  //         break;
  0x1000'1378: 0xe005          B.N      ??_vsnprintf_26        ; 0x1000'1386
                 ??_vsnprintf_23:
  //         flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
  0x1000'137a: 0xf454 0x7480   ORRS.W   R4, R4, #256           ; 0x100
  //         format++;
  0x1000'137e: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'1380: 0x1c40          ADDS     R0, R0, #1
  0x1000'1382: 0x9012          STR      R0, [SP, #0x48]
  //         break;
  0x1000'1384: 0xe7ff          B.N      ??_vsnprintf_26        ; 0x1000'1386
                 ??_vsnprintf_24:
                 ??_vsnprintf_26:
  //     switch (*format) {
  0x1000'1386: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'1388: 0x7800          LDRB     R0, [R0]
  0x1000'138a: 0x2825          CMP      R0, #37                ; 0x25
  0x1000'138c: 0xf000 0x8251   BEQ.W    ??_vsnprintf_28        ; 0x1000'1832
  0x1000'1390: 0x2845          CMP      R0, #69                ; 0x45
  0x1000'1392: 0xf000 0x8173   BEQ.W    ??_vsnprintf_29        ; 0x1000'167c
  0x1000'1396: 0x2846          CMP      R0, #70                ; 0x46
  0x1000'1398: 0xf000 0x8153   BEQ.W    ??_vsnprintf_30        ; 0x1000'1642
  0x1000'139c: 0x2847          CMP      R0, #71                ; 0x47
  0x1000'139e: 0xf000 0x816d   BEQ.W    ??_vsnprintf_29        ; 0x1000'167c
  0x1000'13a2: 0x2858          CMP      R0, #88                ; 0x58
  0x1000'13a4: 0xd01e          BEQ.N    ??_vsnprintf_31        ; 0x1000'13e4
  0x1000'13a6: 0x2862          CMP      R0, #98                ; 0x62
  0x1000'13a8: 0xd01c          BEQ.N    ??_vsnprintf_31        ; 0x1000'13e4
  0x1000'13aa: 0x2863          CMP      R0, #99                ; 0x63
  0x1000'13ac: 0xf000 0x8191   BEQ.W    ??_vsnprintf_32        ; 0x1000'16d2
  0x1000'13b0: 0x2864          CMP      R0, #100               ; 0x64
  0x1000'13b2: 0xd017          BEQ.N    ??_vsnprintf_31        ; 0x1000'13e4
  0x1000'13b4: 0x2865          CMP      R0, #101               ; 0x65
  0x1000'13b6: 0xf000 0x8161   BEQ.W    ??_vsnprintf_29        ; 0x1000'167c
  0x1000'13ba: 0x2866          CMP      R0, #102               ; 0x66
  0x1000'13bc: 0xf000 0x8141   BEQ.W    ??_vsnprintf_30        ; 0x1000'1642
  0x1000'13c0: 0x2867          CMP      R0, #103               ; 0x67
  0x1000'13c2: 0xf000 0x815b   BEQ.W    ??_vsnprintf_29        ; 0x1000'167c
  0x1000'13c6: 0x2869          CMP      R0, #105               ; 0x69
  0x1000'13c8: 0xd00c          BEQ.N    ??_vsnprintf_31        ; 0x1000'13e4
  0x1000'13ca: 0x286f          CMP      R0, #111               ; 0x6f
  0x1000'13cc: 0xd00a          BEQ.N    ??_vsnprintf_31        ; 0x1000'13e4
  0x1000'13ce: 0x2870          CMP      R0, #112               ; 0x70
  0x1000'13d0: 0xf000 0x81f5   BEQ.W    ??_vsnprintf_33        ; 0x1000'17be
  0x1000'13d4: 0x2873          CMP      R0, #115               ; 0x73
  0x1000'13d6: 0xf000 0x81a8   BEQ.W    ??_vsnprintf_34        ; 0x1000'172a
  0x1000'13da: 0x2875          CMP      R0, #117               ; 0x75
  0x1000'13dc: 0xd002          BEQ.N    ??_vsnprintf_31        ; 0x1000'13e4
  0x1000'13de: 0x2878          CMP      R0, #120               ; 0x78
  0x1000'13e0: 0xf040 0x8231   BNE.W    ??_vsnprintf_35        ; 0x1000'1846
                 ??_vsnprintf_31:
  //         if (*format == 'x' || *format == 'X') {
  0x1000'13e4: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'13e6: 0x7800          LDRB     R0, [R0]
  0x1000'13e8: 0x2878          CMP      R0, #120               ; 0x78
  0x1000'13ea: 0xd003          BEQ.N    ??_vsnprintf_36        ; 0x1000'13f4
  0x1000'13ec: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'13ee: 0x7800          LDRB     R0, [R0]
  0x1000'13f0: 0x2858          CMP      R0, #88                ; 0x58
  0x1000'13f2: 0xd102          BNE.N    ??_vsnprintf_37        ; 0x1000'13fa
                 ??_vsnprintf_36:
  //           base = 16U;
  0x1000'13f4: 0xf05f 0x0910   MOVS.W   R9, #16                ; 0x10
  0x1000'13f8: 0xe011          B.N      ??_vsnprintf_38        ; 0x1000'141e
                 ??_vsnprintf_37:
  //         else if (*format == 'o') {
  0x1000'13fa: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'13fc: 0x7800          LDRB     R0, [R0]
  0x1000'13fe: 0x286f          CMP      R0, #111               ; 0x6f
  0x1000'1400: 0xd102          BNE.N    ??_vsnprintf_39        ; 0x1000'1408
  //           base =  8U;
  0x1000'1402: 0xf05f 0x0908   MOVS.W   R9, #8
  0x1000'1406: 0xe00a          B.N      ??_vsnprintf_38        ; 0x1000'141e
                 ??_vsnprintf_39:
  //         else if (*format == 'b') {
  0x1000'1408: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'140a: 0x7800          LDRB     R0, [R0]
  0x1000'140c: 0x2862          CMP      R0, #98                ; 0x62
  0x1000'140e: 0xd102          BNE.N    ??_vsnprintf_40        ; 0x1000'1416
  //           base =  2U;
  0x1000'1410: 0xf05f 0x0902   MOVS.W   R9, #2
  0x1000'1414: 0xe003          B.N      ??_vsnprintf_38        ; 0x1000'141e
                 ??_vsnprintf_40:
  //           base = 10U;
  0x1000'1416: 0xf05f 0x090a   MOVS.W   R9, #10                ; 0xa
  //           flags &= ~FLAGS_HASH;   // no hash for dec format
  0x1000'141a: 0xf034 0x0410   BICS.W   R4, R4, #16            ; 0x10
                 ??_vsnprintf_38:
  //         if (*format == 'X') {
  0x1000'141e: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'1420: 0x7800          LDRB     R0, [R0]
  0x1000'1422: 0x2858          CMP      R0, #88                ; 0x58
  0x1000'1424: 0xd101          BNE.N    ??_vsnprintf_41        ; 0x1000'142a
  //           flags |= FLAGS_UPPERCASE;
  0x1000'1426: 0xf054 0x0420   ORRS.W   R4, R4, #32            ; 0x20
                 ??_vsnprintf_41:
  //         if ((*format != 'i') && (*format != 'd')) {
  0x1000'142a: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'142c: 0x7800          LDRB     R0, [R0]
  0x1000'142e: 0x2869          CMP      R0, #105               ; 0x69
  0x1000'1430: 0xd005          BEQ.N    ??_vsnprintf_42        ; 0x1000'143e
  0x1000'1432: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'1434: 0x7800          LDRB     R0, [R0]
  0x1000'1436: 0x2864          CMP      R0, #100               ; 0x64
  0x1000'1438: 0xd001          BEQ.N    ??_vsnprintf_42        ; 0x1000'143e
  //           flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
  0x1000'143a: 0xf034 0x040c   BICS.W   R4, R4, #12            ; 0xc
                 ??_vsnprintf_42:
  //         if (flags & FLAGS_PRECISION) {
  0x1000'143e: 0x0560          LSLS     R0, R4, #21
  0x1000'1440: 0xd501          BPL.N    ??_vsnprintf_43        ; 0x1000'1446
  //           flags &= ~FLAGS_ZEROPAD;
  0x1000'1442: 0x0864          LSRS     R4, R4, #1
  0x1000'1444: 0x0064          LSLS     R4, R4, #1
                 ??_vsnprintf_43:
  //         if ((*format == 'i') || (*format == 'd')) {
  0x1000'1446: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'1448: 0x7800          LDRB     R0, [R0]
  0x1000'144a: 0x2869          CMP      R0, #105               ; 0x69
  0x1000'144c: 0xd004          BEQ.N    ??_vsnprintf_44        ; 0x1000'1458
  0x1000'144e: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'1450: 0x7800          LDRB     R0, [R0]
  0x1000'1452: 0x2864          CMP      R0, #100               ; 0x64
  0x1000'1454: 0xf040 0x8098   BNE.W    ??_vsnprintf_45        ; 0x1000'1588
                 ??_vsnprintf_44:
  //           if (flags & FLAGS_LONG_LONG) {
  0x1000'1458: 0x05a0          LSLS     R0, R4, #22
  0x1000'145a: 0xd53f          BPL.N    ??_vsnprintf_46        ; 0x1000'14dc
  //             const long long value = va_arg(va, long long);
  0x1000'145c: 0x1df2          ADDS     R2, R6, #7
  0x1000'145e: 0xf032 0x0207   BICS.W   R2, R2, #7
  0x1000'1462: 0xe9d2 0x0100   LDRD     R0, R1, [R2]
  0x1000'1466: 0xf112 0x0608   ADDS.W   R6, R2, #8
  0x1000'146a: 0xe9cd 0x010c   STRD     R0, R1, [SP, #0x30]
  //             idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
  0x1000'146e: 0xe9dd 0x010c   LDRD     R0, R1, [SP, #0x30]
  0x1000'1472: 0x2900          CMP      R1, #0
  0x1000'1474: 0xd502          BPL.N    ??_vsnprintf_47        ; 0x1000'147c
  0x1000'1476: 0xf05f 0x0c01   MOVS.W   R12, #1
  0x1000'147a: 0xe001          B.N      ??_vsnprintf_48        ; 0x1000'1480
                 ??_vsnprintf_47:
  0x1000'147c: 0xf05f 0x0c00   MOVS.W   R12, #0
                 ??_vsnprintf_48:
  0x1000'1480: 0xe9dd 0x230c   LDRD     R2, R3, [SP, #0x30]
  0x1000'1484: 0x2001          MOVS     R0, #1
  0x1000'1486: 0x2100          MOVS     R1, #0
  0x1000'1488: 0x428b          CMP      R3, R1
  0x1000'148a: 0xdb07          BLT.N    ??_vsnprintf_49        ; 0x1000'149c
  0x1000'148c: 0xdc01          BGT.N    ??_vsnprintf_50        ; 0x1000'1492
  0x1000'148e: 0x4282          CMP      R2, R0
  0x1000'1490: 0xd304          BCC.N    ??_vsnprintf_49        ; 0x1000'149c
                 ??_vsnprintf_50:
  0x1000'1492: 0xe9dd 0x010c   LDRD     R0, R1, [SP, #0x30]
  0x1000'1496: 0xe9cd 0x010e   STRD     R0, R1, [SP, #0x38]
  0x1000'149a: 0xe006          B.N      ??_vsnprintf_51        ; 0x1000'14aa
                 ??_vsnprintf_49:
  0x1000'149c: 0xe9dd 0x010c   LDRD     R0, R1, [SP, #0x30]
  0x1000'14a0: 0x4240          RSBS     R0, R0, #0
  0x1000'14a2: 0xeb71 0x0141   SBCS.W   R1, R1, R1, LSL #1
  0x1000'14a6: 0xe9cd 0x010e   STRD     R0, R1, [SP, #0x38]
                 ??_vsnprintf_51:
  0x1000'14aa: 0x9408          STR      R4, [SP, #0x20]
  0x1000'14ac: 0x9809          LDR      R0, [SP, #0x24]
  0x1000'14ae: 0x9007          STR      R0, [SP, #0x1c]
  0x1000'14b0: 0xf8cd 0x8018   STR.W    R8, [SP, #0x18]
  0x1000'14b4: 0x4648          MOV      R0, R9
  0x1000'14b6: 0x2100          MOVS     R1, #0
  0x1000'14b8: 0xe9cd 0x0104   STRD     R0, R1, [SP, #0x10]
  0x1000'14bc: 0xfa5f 0xfc8c   UXTB.W   R12, R12
  0x1000'14c0: 0xf8cd 0xc008   STR.W    R12, [SP, #0x8]
  0x1000'14c4: 0xe9dd 0x010e   LDRD     R0, R1, [SP, #0x38]
  0x1000'14c8: 0xe9cd 0x0100   STRD     R0, R1, [SP]
  0x1000'14cc: 0x4653          MOV      R3, R10
  0x1000'14ce: 0x002a          MOVS     R2, R5
  0x1000'14d0: 0x9911          LDR      R1, [SP, #0x44]
  0x1000'14d2: 0x0038          MOVS     R0, R7
  0x1000'14d4: 0xf7ff 0xfac3   BL       _ntoa_long_long        ; 0x1000'0a5e
  0x1000'14d8: 0x0005          MOVS     R5, R0
  0x1000'14da: 0xe0ae          B.N      ??_vsnprintf_52        ; 0x1000'163a
                 ??_vsnprintf_46:
  //           else if (flags & FLAGS_LONG) {
  0x1000'14dc: 0x05e0          LSLS     R0, R4, #23
  0x1000'14de: 0xd521          BPL.N    ??_vsnprintf_53        ; 0x1000'1524
  //             const long value = va_arg(va, long);
  0x1000'14e0: 0xf8d6 0xb000   LDR.W    R11, [R6]
  0x1000'14e4: 0x1d36          ADDS     R6, R6, #4
  //             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
  0x1000'14e6: 0xf1bb 0x0f00   CMP.W    R11, #0
  0x1000'14ea: 0xd501          BPL.N    ??_vsnprintf_54        ; 0x1000'14f0
  0x1000'14ec: 0x2201          MOVS     R2, #1
  0x1000'14ee: 0xe000          B.N      ??_vsnprintf_55        ; 0x1000'14f2
                 ??_vsnprintf_54:
  0x1000'14f0: 0x2200          MOVS     R2, #0
                 ??_vsnprintf_55:
  0x1000'14f2: 0xf1bb 0x0f01   CMP.W    R11, #1
  0x1000'14f6: 0xdb01          BLT.N    ??_vsnprintf_56        ; 0x1000'14fc
  0x1000'14f8: 0x4658          MOV      R0, R11
  0x1000'14fa: 0xe001          B.N      ??_vsnprintf_57        ; 0x1000'1500
                 ??_vsnprintf_56:
  0x1000'14fc: 0xf1db 0x0000   RSBS.W   R0, R11, #0
                 ??_vsnprintf_57:
  0x1000'1500: 0x9405          STR      R4, [SP, #0x14]
  0x1000'1502: 0x9909          LDR      R1, [SP, #0x24]
  0x1000'1504: 0x9104          STR      R1, [SP, #0x10]
  0x1000'1506: 0xf8cd 0x800c   STR.W    R8, [SP, #0xc]
  0x1000'150a: 0xf8cd 0x9008   STR.W    R9, [SP, #0x8]
  0x1000'150e: 0xb2d2          UXTB     R2, R2
  0x1000'1510: 0x9201          STR      R2, [SP, #0x4]
  0x1000'1512: 0x9000          STR      R0, [SP]
  0x1000'1514: 0x4653          MOV      R3, R10
  0x1000'1516: 0x002a          MOVS     R2, R5
  0x1000'1518: 0x9911          LDR      R1, [SP, #0x44]
  0x1000'151a: 0x0038          MOVS     R0, R7
  0x1000'151c: 0xf7ff 0xfa50   BL       _ntoa_long             ; 0x1000'09c0
  0x1000'1520: 0x0005          MOVS     R5, R0
  0x1000'1522: 0xe08a          B.N      ??_vsnprintf_52        ; 0x1000'163a
                 ??_vsnprintf_53:
  //             const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
  0x1000'1524: 0x0660          LSLS     R0, R4, #25
  0x1000'1526: 0xd505          BPL.N    ??_vsnprintf_58        ; 0x1000'1534
  0x1000'1528: 0xf8d6 0xb000   LDR.W    R11, [R6]
  0x1000'152c: 0x1d36          ADDS     R6, R6, #4
  0x1000'152e: 0xfa5f 0xfb8b   UXTB.W   R11, R11
  0x1000'1532: 0xe00a          B.N      ??_vsnprintf_59        ; 0x1000'154a
                 ??_vsnprintf_58:
  0x1000'1534: 0x0620          LSLS     R0, R4, #24
  0x1000'1536: 0xd505          BPL.N    ??_vsnprintf_60        ; 0x1000'1544
  0x1000'1538: 0xf8d6 0xb000   LDR.W    R11, [R6]
  0x1000'153c: 0x1d36          ADDS     R6, R6, #4
  0x1000'153e: 0xfa0f 0xfb8b   SXTH.W   R11, R11
  0x1000'1542: 0xe002          B.N      ??_vsnprintf_59        ; 0x1000'154a
                 ??_vsnprintf_60:
  0x1000'1544: 0xf8d6 0xb000   LDR.W    R11, [R6]
  0x1000'1548: 0x1d36          ADDS     R6, R6, #4
                 ??_vsnprintf_59:
  //             idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
  0x1000'154a: 0xf1bb 0x0f00   CMP.W    R11, #0
  0x1000'154e: 0xd501          BPL.N    ??_vsnprintf_61        ; 0x1000'1554
  0x1000'1550: 0x2001          MOVS     R0, #1
  0x1000'1552: 0xe000          B.N      ??_vsnprintf_62        ; 0x1000'1556
                 ??_vsnprintf_61:
  0x1000'1554: 0x2000          MOVS     R0, #0
                 ??_vsnprintf_62:
  0x1000'1556: 0xf1bb 0x0f01   CMP.W    R11, #1
  0x1000'155a: 0xdb01          BLT.N    ??_vsnprintf_63        ; 0x1000'1560
  0x1000'155c: 0x4659          MOV      R1, R11
  0x1000'155e: 0xe001          B.N      ??_vsnprintf_64        ; 0x1000'1564
                 ??_vsnprintf_63:
  0x1000'1560: 0xf1db 0x0100   RSBS.W   R1, R11, #0
                 ??_vsnprintf_64:
  0x1000'1564: 0x9405          STR      R4, [SP, #0x14]
  0x1000'1566: 0x9a09          LDR      R2, [SP, #0x24]
  0x1000'1568: 0x9204          STR      R2, [SP, #0x10]
  0x1000'156a: 0xf8cd 0x800c   STR.W    R8, [SP, #0xc]
  0x1000'156e: 0xf8cd 0x9008   STR.W    R9, [SP, #0x8]
  0x1000'1572: 0xb2c0          UXTB     R0, R0
  0x1000'1574: 0x9001          STR      R0, [SP, #0x4]
  0x1000'1576: 0x9100          STR      R1, [SP]
  0x1000'1578: 0x4653          MOV      R3, R10
  0x1000'157a: 0x002a          MOVS     R2, R5
  0x1000'157c: 0x9911          LDR      R1, [SP, #0x44]
  0x1000'157e: 0x0038          MOVS     R0, R7
  0x1000'1580: 0xf7ff 0xfa1e   BL       _ntoa_long             ; 0x1000'09c0
  0x1000'1584: 0x0005          MOVS     R5, R0
  0x1000'1586: 0xe058          B.N      ??_vsnprintf_52        ; 0x1000'163a
                 ??_vsnprintf_45:
  //           if (flags & FLAGS_LONG_LONG) {
  0x1000'1588: 0x05a0          LSLS     R0, R4, #22
  0x1000'158a: 0xd51b          BPL.N    ??_vsnprintf_65        ; 0x1000'15c4
  //             idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
  0x1000'158c: 0x1df0          ADDS     R0, R6, #7
  0x1000'158e: 0xf030 0x0007   BICS.W   R0, R0, #7
  0x1000'1592: 0xe9d0 0x2300   LDRD     R2, R3, [R0]
  0x1000'1596: 0xf110 0x0608   ADDS.W   R6, R0, #8
  0x1000'159a: 0x9408          STR      R4, [SP, #0x20]
  0x1000'159c: 0x9809          LDR      R0, [SP, #0x24]
  0x1000'159e: 0x9007          STR      R0, [SP, #0x1c]
  0x1000'15a0: 0xf8cd 0x8018   STR.W    R8, [SP, #0x18]
  0x1000'15a4: 0x4648          MOV      R0, R9
  0x1000'15a6: 0x2100          MOVS     R1, #0
  0x1000'15a8: 0xe9cd 0x0104   STRD     R0, R1, [SP, #0x10]
  0x1000'15ac: 0x2000          MOVS     R0, #0
  0x1000'15ae: 0x9002          STR      R0, [SP, #0x8]
  0x1000'15b0: 0xe9cd 0x2300   STRD     R2, R3, [SP]
  0x1000'15b4: 0x4653          MOV      R3, R10
  0x1000'15b6: 0x002a          MOVS     R2, R5
  0x1000'15b8: 0x9911          LDR      R1, [SP, #0x44]
  0x1000'15ba: 0x0038          MOVS     R0, R7
  0x1000'15bc: 0xf7ff 0xfa4f   BL       _ntoa_long_long        ; 0x1000'0a5e
  0x1000'15c0: 0x0005          MOVS     R5, R0
  0x1000'15c2: 0xe03a          B.N      ??_vsnprintf_52        ; 0x1000'163a
                 ??_vsnprintf_65:
  //           else if (flags & FLAGS_LONG) {
  0x1000'15c4: 0x05e0          LSLS     R0, R4, #23
  0x1000'15c6: 0xd513          BPL.N    ??_vsnprintf_66        ; 0x1000'15f0
  //             idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
  0x1000'15c8: 0x6830          LDR      R0, [R6]
  0x1000'15ca: 0x1d36          ADDS     R6, R6, #4
  0x1000'15cc: 0x9405          STR      R4, [SP, #0x14]
  0x1000'15ce: 0x9909          LDR      R1, [SP, #0x24]
  0x1000'15d0: 0x9104          STR      R1, [SP, #0x10]
  0x1000'15d2: 0xf8cd 0x800c   STR.W    R8, [SP, #0xc]
  0x1000'15d6: 0xf8cd 0x9008   STR.W    R9, [SP, #0x8]
  0x1000'15da: 0x2100          MOVS     R1, #0
  0x1000'15dc: 0x9101          STR      R1, [SP, #0x4]
  0x1000'15de: 0x9000          STR      R0, [SP]
  0x1000'15e0: 0x4653          MOV      R3, R10
  0x1000'15e2: 0x002a          MOVS     R2, R5
  0x1000'15e4: 0x9911          LDR      R1, [SP, #0x44]
  0x1000'15e6: 0x0038          MOVS     R0, R7
  0x1000'15e8: 0xf7ff 0xf9ea   BL       _ntoa_long             ; 0x1000'09c0
  0x1000'15ec: 0x0005          MOVS     R5, R0
  0x1000'15ee: 0xe024          B.N      ??_vsnprintf_52        ; 0x1000'163a
                 ??_vsnprintf_66:
  //             const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
  0x1000'15f0: 0x0660          LSLS     R0, R4, #25
  0x1000'15f2: 0xd505          BPL.N    ??_vsnprintf_67        ; 0x1000'1600
  0x1000'15f4: 0xf8d6 0xb000   LDR.W    R11, [R6]
  0x1000'15f8: 0x1d36          ADDS     R6, R6, #4
  0x1000'15fa: 0xfa5f 0xfb8b   UXTB.W   R11, R11
  0x1000'15fe: 0xe00a          B.N      ??_vsnprintf_68        ; 0x1000'1616
                 ??_vsnprintf_67:
  0x1000'1600: 0x0620          LSLS     R0, R4, #24
  0x1000'1602: 0xd505          BPL.N    ??_vsnprintf_69        ; 0x1000'1610
  0x1000'1604: 0xf8d6 0xb000   LDR.W    R11, [R6]
  0x1000'1608: 0x1d36          ADDS     R6, R6, #4
  0x1000'160a: 0xfa1f 0xfb8b   UXTH.W   R11, R11
  0x1000'160e: 0xe002          B.N      ??_vsnprintf_68        ; 0x1000'1616
                 ??_vsnprintf_69:
  0x1000'1610: 0xf8d6 0xb000   LDR.W    R11, [R6]
  0x1000'1614: 0x1d36          ADDS     R6, R6, #4
                 ??_vsnprintf_68:
  //             idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
  0x1000'1616: 0x9405          STR      R4, [SP, #0x14]
  0x1000'1618: 0x9809          LDR      R0, [SP, #0x24]
  0x1000'161a: 0x9004          STR      R0, [SP, #0x10]
  0x1000'161c: 0xf8cd 0x800c   STR.W    R8, [SP, #0xc]
  0x1000'1620: 0xf8cd 0x9008   STR.W    R9, [SP, #0x8]
  0x1000'1624: 0x2000          MOVS     R0, #0
  0x1000'1626: 0x9001          STR      R0, [SP, #0x4]
  0x1000'1628: 0xf8cd 0xb000   STR.W    R11, [SP]
  0x1000'162c: 0x4653          MOV      R3, R10
  0x1000'162e: 0x002a          MOVS     R2, R5
  0x1000'1630: 0x9911          LDR      R1, [SP, #0x44]
  0x1000'1632: 0x0038          MOVS     R0, R7
  0x1000'1634: 0xf7ff 0xf9c4   BL       _ntoa_long             ; 0x1000'09c0
  0x1000'1638: 0x0005          MOVS     R5, R0
                 ??_vsnprintf_52:
  //         format++;
  0x1000'163a: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'163c: 0x1c40          ADDS     R0, R0, #1
  0x1000'163e: 0x9012          STR      R0, [SP, #0x48]
  //         break;
  0x1000'1640: 0xe5cf          B.N      ??_vsnprintf_0         ; 0x1000'11e2
                 ??_vsnprintf_30:
  //         if (*format == 'F') flags |= FLAGS_UPPERCASE;
  0x1000'1642: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'1644: 0x7800          LDRB     R0, [R0]
  0x1000'1646: 0x2846          CMP      R0, #70                ; 0x46
  0x1000'1648: 0xd101          BNE.N    ??_vsnprintf_70        ; 0x1000'164e
  //         if (*format == 'F') flags |= FLAGS_UPPERCASE;
  0x1000'164a: 0xf054 0x0420   ORRS.W   R4, R4, #32            ; 0x20
                 ??_vsnprintf_70:
  //         idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
  0x1000'164e: 0x1df0          ADDS     R0, R6, #7
  0x1000'1650: 0xf030 0x0007   BICS.W   R0, R0, #7
  0x1000'1654: 0xed90 0x0b00   VLDR     D0, [R0]
  0x1000'1658: 0xf110 0x0608   ADDS.W   R6, R0, #8
  0x1000'165c: 0x9402          STR      R4, [SP, #0x8]
  0x1000'165e: 0x9809          LDR      R0, [SP, #0x24]
  0x1000'1660: 0x9001          STR      R0, [SP, #0x4]
  0x1000'1662: 0xf8cd 0x8000   STR.W    R8, [SP]
  0x1000'1666: 0x4653          MOV      R3, R10
  0x1000'1668: 0x002a          MOVS     R2, R5
  0x1000'166a: 0x9911          LDR      R1, [SP, #0x44]
  0x1000'166c: 0x0038          MOVS     R0, R7
  0x1000'166e: 0xf7ff 0xfa4d   BL       _ftoa                  ; 0x1000'0b0c
  0x1000'1672: 0x0005          MOVS     R5, R0
  //         format++;
  0x1000'1674: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'1676: 0x1c40          ADDS     R0, R0, #1
  0x1000'1678: 0x9012          STR      R0, [SP, #0x48]
  //         break;
  0x1000'167a: 0xe5b2          B.N      ??_vsnprintf_0         ; 0x1000'11e2
                 ??_vsnprintf_29:
  //         if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
  0x1000'167c: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'167e: 0x7800          LDRB     R0, [R0]
  0x1000'1680: 0x2867          CMP      R0, #103               ; 0x67
  0x1000'1682: 0xd003          BEQ.N    ??_vsnprintf_71        ; 0x1000'168c
  0x1000'1684: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'1686: 0x7800          LDRB     R0, [R0]
  0x1000'1688: 0x2847          CMP      R0, #71                ; 0x47
  0x1000'168a: 0xd101          BNE.N    ??_vsnprintf_72        ; 0x1000'1690
                 ??_vsnprintf_71:
  //         if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
  0x1000'168c: 0xf454 0x6400   ORRS.W   R4, R4, #2048          ; 0x800
                 ??_vsnprintf_72:
  //         if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
  0x1000'1690: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'1692: 0x7800          LDRB     R0, [R0]
  0x1000'1694: 0x2845          CMP      R0, #69                ; 0x45
  0x1000'1696: 0xd003          BEQ.N    ??_vsnprintf_73        ; 0x1000'16a0
  0x1000'1698: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'169a: 0x7800          LDRB     R0, [R0]
  0x1000'169c: 0x2847          CMP      R0, #71                ; 0x47
  0x1000'169e: 0xd101          BNE.N    ??_vsnprintf_74        ; 0x1000'16a4
                 ??_vsnprintf_73:
  //         if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
  0x1000'16a0: 0xf054 0x0420   ORRS.W   R4, R4, #32            ; 0x20
                 ??_vsnprintf_74:
  //         idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
  0x1000'16a4: 0x1df0          ADDS     R0, R6, #7
  0x1000'16a6: 0xf030 0x0007   BICS.W   R0, R0, #7
  0x1000'16aa: 0xed90 0x0b00   VLDR     D0, [R0]
  0x1000'16ae: 0xf110 0x0608   ADDS.W   R6, R0, #8
  0x1000'16b2: 0x9402          STR      R4, [SP, #0x8]
  0x1000'16b4: 0x9809          LDR      R0, [SP, #0x24]
  0x1000'16b6: 0x9001          STR      R0, [SP, #0x4]
  0x1000'16b8: 0xf8cd 0x8000   STR.W    R8, [SP]
  0x1000'16bc: 0x4653          MOV      R3, R10
  0x1000'16be: 0x002a          MOVS     R2, R5
  0x1000'16c0: 0x9911          LDR      R1, [SP, #0x44]
  0x1000'16c2: 0x0038          MOVS     R0, R7
  0x1000'16c4: 0xf7ff 0xfbb4   BL       _etoa                  ; 0x1000'0e30
  0x1000'16c8: 0x0005          MOVS     R5, R0
  //         format++;
  0x1000'16ca: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'16cc: 0x1c40          ADDS     R0, R0, #1
  0x1000'16ce: 0x9012          STR      R0, [SP, #0x48]
  //         break;
  0x1000'16d0: 0xe587          B.N      ??_vsnprintf_0         ; 0x1000'11e2
                 ??_vsnprintf_32:
  //         unsigned int l = 1U;
  0x1000'16d2: 0xf05f 0x0901   MOVS.W   R9, #1
  //         if (!(flags & FLAGS_LEFT)) {
  0x1000'16d6: 0x07a0          LSLS     R0, R4, #30
  0x1000'16d8: 0xd40c          BMI.N    ??_vsnprintf_75        ; 0x1000'16f4
                 ??_vsnprintf_76:
  //           while (l++ < width) {
  0x1000'16da: 0x4649          MOV      R1, R9
  0x1000'16dc: 0xf111 0x0901   ADDS.W   R9, R1, #1
  0x1000'16e0: 0x9809          LDR      R0, [SP, #0x24]
  0x1000'16e2: 0x4281          CMP      R1, R0
  0x1000'16e4: 0xd206          BCS.N    ??_vsnprintf_75        ; 0x1000'16f4
  //             out(' ', buffer, idx++, maxlen);
  0x1000'16e6: 0x4653          MOV      R3, R10
  0x1000'16e8: 0x002a          MOVS     R2, R5
  0x1000'16ea: 0x9911          LDR      R1, [SP, #0x44]
  0x1000'16ec: 0x2020          MOVS     R0, #32                ; 0x20
  0x1000'16ee: 0x47b8          BLX      R7
  0x1000'16f0: 0x1c6d          ADDS     R5, R5, #1
  0x1000'16f2: 0xe7f2          B.N      ??_vsnprintf_76        ; 0x1000'16da
                 ??_vsnprintf_75:
  //         out((char)va_arg(va, int), buffer, idx++, maxlen);
  0x1000'16f4: 0x6830          LDR      R0, [R6]
  0x1000'16f6: 0x1d36          ADDS     R6, R6, #4
  0x1000'16f8: 0x4653          MOV      R3, R10
  0x1000'16fa: 0x002a          MOVS     R2, R5
  0x1000'16fc: 0x9911          LDR      R1, [SP, #0x44]
  0x1000'16fe: 0xb2c0          UXTB     R0, R0
  0x1000'1700: 0x47b8          BLX      R7
  0x1000'1702: 0x1c6d          ADDS     R5, R5, #1
  //         if (flags & FLAGS_LEFT) {
  0x1000'1704: 0x07a0          LSLS     R0, R4, #30
  0x1000'1706: 0xd50c          BPL.N    ??_vsnprintf_77        ; 0x1000'1722
                 ??_vsnprintf_78:
  //           while (l++ < width) {
  0x1000'1708: 0x4649          MOV      R1, R9
  0x1000'170a: 0xf111 0x0901   ADDS.W   R9, R1, #1
  0x1000'170e: 0x9809          LDR      R0, [SP, #0x24]
  0x1000'1710: 0x4281          CMP      R1, R0
  0x1000'1712: 0xd206          BCS.N    ??_vsnprintf_77        ; 0x1000'1722
  //             out(' ', buffer, idx++, maxlen);
  0x1000'1714: 0x4653          MOV      R3, R10
  0x1000'1716: 0x002a          MOVS     R2, R5
  0x1000'1718: 0x9911          LDR      R1, [SP, #0x44]
  0x1000'171a: 0x2020          MOVS     R0, #32                ; 0x20
  0x1000'171c: 0x47b8          BLX      R7
  0x1000'171e: 0x1c6d          ADDS     R5, R5, #1
  0x1000'1720: 0xe7f2          B.N      ??_vsnprintf_78        ; 0x1000'1708
                 ??_vsnprintf_77:
  //         format++;
  0x1000'1722: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'1724: 0x1c40          ADDS     R0, R0, #1
  0x1000'1726: 0x9012          STR      R0, [SP, #0x48]
  //         break;
  0x1000'1728: 0xe55b          B.N      ??_vsnprintf_0         ; 0x1000'11e2
                 ??_vsnprintf_34:
  //         const char* p = va_arg(va, char*);
  0x1000'172a: 0xf8d6 0xb000   LDR.W    R11, [R6]
  0x1000'172e: 0x1d36          ADDS     R6, R6, #4
  //         unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
  0x1000'1730: 0xf1b8 0x0f00   CMP.W    R8, #0
  0x1000'1734: 0xd001          BEQ.N    ??_vsnprintf_79        ; 0x1000'173a
  0x1000'1736: 0x4641          MOV      R1, R8
  0x1000'1738: 0xe001          B.N      ??_vsnprintf_80        ; 0x1000'173e
                 ??_vsnprintf_79:
  0x1000'173a: 0xf05f 0x31ff   MOVS.W   R1, #-1                ; 0xffff'ffff
                 ??_vsnprintf_80:
  0x1000'173e: 0x4658          MOV      R0, R11
  0x1000'1740: 0xf7ff 0xf84d   BL       _strnlen_s             ; 0x1000'07de
  0x1000'1744: 0x4681          MOV      R9, R0
  //         if (flags & FLAGS_PRECISION) {
  0x1000'1746: 0x0560          LSLS     R0, R4, #21
  0x1000'1748: 0xd502          BPL.N    ??_vsnprintf_81        ; 0x1000'1750
  //           l = (l < precision ? l : precision);
  0x1000'174a: 0x45c1          CMP      R9, R8
  0x1000'174c: 0xd300          BCC.N    ??_vsnprintf_81        ; 0x1000'1750
                 ??_vsnprintf_82:
  0x1000'174e: 0x46c1          MOV      R9, R8
                 ??_vsnprintf_81:
  //         if (!(flags & FLAGS_LEFT)) {
  0x1000'1750: 0x07a0          LSLS     R0, R4, #30
  0x1000'1752: 0xd40c          BMI.N    ??_vsnprintf_83        ; 0x1000'176e
                 ??_vsnprintf_84:
  //           while (l++ < width) {
  0x1000'1754: 0x4649          MOV      R1, R9
  0x1000'1756: 0xf111 0x0901   ADDS.W   R9, R1, #1
  0x1000'175a: 0x9809          LDR      R0, [SP, #0x24]
  0x1000'175c: 0x4281          CMP      R1, R0
  0x1000'175e: 0xd206          BCS.N    ??_vsnprintf_83        ; 0x1000'176e
  //             out(' ', buffer, idx++, maxlen);
  0x1000'1760: 0x4653          MOV      R3, R10
  0x1000'1762: 0x002a          MOVS     R2, R5
  0x1000'1764: 0x9911          LDR      R1, [SP, #0x44]
  0x1000'1766: 0x2020          MOVS     R0, #32                ; 0x20
  0x1000'1768: 0x47b8          BLX      R7
  0x1000'176a: 0x1c6d          ADDS     R5, R5, #1
  0x1000'176c: 0xe7f2          B.N      ??_vsnprintf_84        ; 0x1000'1754
                 ??_vsnprintf_83:
  //         while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
  0x1000'176e: 0xf89b 0x0000   LDRB.W   R0, [R11]
  0x1000'1772: 0x2800          CMP      R0, #0
  0x1000'1774: 0xd010          BEQ.N    ??_vsnprintf_85        ; 0x1000'1798
  0x1000'1776: 0x0560          LSLS     R0, R4, #21
  0x1000'1778: 0xd504          BPL.N    ??_vsnprintf_86        ; 0x1000'1784
  0x1000'177a: 0x4640          MOV      R0, R8
  0x1000'177c: 0xf1b0 0x0801   SUBS.W   R8, R0, #1
  0x1000'1780: 0x2800          CMP      R0, #0
  0x1000'1782: 0xd009          BEQ.N    ??_vsnprintf_85        ; 0x1000'1798
                 ??_vsnprintf_86:
  //           out(*(p++), buffer, idx++, maxlen);
  0x1000'1784: 0x002a          MOVS     R2, R5
  0x1000'1786: 0x1c55          ADDS     R5, R2, #1
  0x1000'1788: 0x4653          MOV      R3, R10
  0x1000'178a: 0x9911          LDR      R1, [SP, #0x44]
  0x1000'178c: 0xf89b 0x0000   LDRB.W   R0, [R11]
  0x1000'1790: 0x47b8          BLX      R7
  0x1000'1792: 0xf11b 0x0b01   ADDS.W   R11, R11, #1
  0x1000'1796: 0xe7ea          B.N      ??_vsnprintf_83        ; 0x1000'176e
                 ??_vsnprintf_85:
  //         if (flags & FLAGS_LEFT) {
  0x1000'1798: 0x07a0          LSLS     R0, R4, #30
  0x1000'179a: 0xd50c          BPL.N    ??_vsnprintf_87        ; 0x1000'17b6
                 ??_vsnprintf_88:
  //           while (l++ < width) {
  0x1000'179c: 0x4648          MOV      R0, R9
  0x1000'179e: 0xf110 0x0901   ADDS.W   R9, R0, #1
  0x1000'17a2: 0x9909          LDR      R1, [SP, #0x24]
  0x1000'17a4: 0x4288          CMP      R0, R1
  0x1000'17a6: 0xd206          BCS.N    ??_vsnprintf_87        ; 0x1000'17b6
  //             out(' ', buffer, idx++, maxlen);
  0x1000'17a8: 0x4653          MOV      R3, R10
  0x1000'17aa: 0x002a          MOVS     R2, R5
  0x1000'17ac: 0x9911          LDR      R1, [SP, #0x44]
  0x1000'17ae: 0x2020          MOVS     R0, #32                ; 0x20
  0x1000'17b0: 0x47b8          BLX      R7
  0x1000'17b2: 0x1c6d          ADDS     R5, R5, #1
  0x1000'17b4: 0xe7f2          B.N      ??_vsnprintf_88        ; 0x1000'179c
                 ??_vsnprintf_87:
  //         format++;
  0x1000'17b6: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'17b8: 0x1c40          ADDS     R0, R0, #1
  0x1000'17ba: 0x9012          STR      R0, [SP, #0x48]
  //         break;
  0x1000'17bc: 0xe511          B.N      ??_vsnprintf_0         ; 0x1000'11e2
                 ??_vsnprintf_33:
  //         width = sizeof(void*) * 2U;
  0x1000'17be: 0x2008          MOVS     R0, #8
  0x1000'17c0: 0x9009          STR      R0, [SP, #0x24]
  //         flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
  0x1000'17c2: 0xf054 0x0421   ORRS.W   R4, R4, #33            ; 0x21
  //         const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
  0x1000'17c6: 0xf05f 0x0900   MOVS.W   R9, #0
  //         if (is_ll) {
  0x1000'17ca: 0x4648          MOV      R0, R9
  0x1000'17cc: 0xb2c0          UXTB     R0, R0
  0x1000'17ce: 0x2800          CMP      R0, #0
  0x1000'17d0: 0xd018          BEQ.N    ??_vsnprintf_89        ; 0x1000'1804
  //           idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
  0x1000'17d2: 0x6832          LDR      R2, [R6]
  0x1000'17d4: 0x1d36          ADDS     R6, R6, #4
  0x1000'17d6: 0x9408          STR      R4, [SP, #0x20]
  0x1000'17d8: 0x9809          LDR      R0, [SP, #0x24]
  0x1000'17da: 0x9007          STR      R0, [SP, #0x1c]
  0x1000'17dc: 0xf8cd 0x8018   STR.W    R8, [SP, #0x18]
  0x1000'17e0: 0x2010          MOVS     R0, #16                ; 0x10
  0x1000'17e2: 0x2100          MOVS     R1, #0
  0x1000'17e4: 0xe9cd 0x0104   STRD     R0, R1, [SP, #0x10]
  0x1000'17e8: 0x2000          MOVS     R0, #0
  0x1000'17ea: 0x9002          STR      R0, [SP, #0x8]
  0x1000'17ec: 0x0010          MOVS     R0, R2
  0x1000'17ee: 0x2100          MOVS     R1, #0
  0x1000'17f0: 0xe9cd 0x0100   STRD     R0, R1, [SP]
  0x1000'17f4: 0x4653          MOV      R3, R10
  0x1000'17f6: 0x002a          MOVS     R2, R5
  0x1000'17f8: 0x9911          LDR      R1, [SP, #0x44]
  0x1000'17fa: 0x0038          MOVS     R0, R7
  0x1000'17fc: 0xf7ff 0xf92f   BL       _ntoa_long_long        ; 0x1000'0a5e
  0x1000'1800: 0x0005          MOVS     R5, R0
  0x1000'1802: 0xe012          B.N      ??_vsnprintf_90        ; 0x1000'182a
                 ??_vsnprintf_89:
  //           idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
  0x1000'1804: 0x6830          LDR      R0, [R6]
  0x1000'1806: 0x1d36          ADDS     R6, R6, #4
  0x1000'1808: 0x9405          STR      R4, [SP, #0x14]
  0x1000'180a: 0x9909          LDR      R1, [SP, #0x24]
  0x1000'180c: 0x9104          STR      R1, [SP, #0x10]
  0x1000'180e: 0xf8cd 0x800c   STR.W    R8, [SP, #0xc]
  0x1000'1812: 0x2110          MOVS     R1, #16                ; 0x10
  0x1000'1814: 0x9102          STR      R1, [SP, #0x8]
  0x1000'1816: 0x2100          MOVS     R1, #0
  0x1000'1818: 0x9101          STR      R1, [SP, #0x4]
  0x1000'181a: 0x9000          STR      R0, [SP]
  0x1000'181c: 0x4653          MOV      R3, R10
  0x1000'181e: 0x002a          MOVS     R2, R5
  0x1000'1820: 0x9911          LDR      R1, [SP, #0x44]
  0x1000'1822: 0x0038          MOVS     R0, R7
  0x1000'1824: 0xf7ff 0xf8cc   BL       _ntoa_long             ; 0x1000'09c0
  0x1000'1828: 0x0005          MOVS     R5, R0
                 ??_vsnprintf_90:
  //         format++;
  0x1000'182a: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'182c: 0x1c40          ADDS     R0, R0, #1
  0x1000'182e: 0x9012          STR      R0, [SP, #0x48]
  //         break;
  0x1000'1830: 0xe4d7          B.N      ??_vsnprintf_0         ; 0x1000'11e2
                 ??_vsnprintf_28:
  //         out('%', buffer, idx++, maxlen);
  0x1000'1832: 0x4653          MOV      R3, R10
  0x1000'1834: 0x002a          MOVS     R2, R5
  0x1000'1836: 0x9911          LDR      R1, [SP, #0x44]
  0x1000'1838: 0x2025          MOVS     R0, #37                ; 0x25
  0x1000'183a: 0x47b8          BLX      R7
  0x1000'183c: 0x1c6d          ADDS     R5, R5, #1
  //         format++;
  0x1000'183e: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'1840: 0x1c40          ADDS     R0, R0, #1
  0x1000'1842: 0x9012          STR      R0, [SP, #0x48]
  //         break;
  0x1000'1844: 0xe4cd          B.N      ??_vsnprintf_0         ; 0x1000'11e2
                 ??_vsnprintf_35:
  //         out(*format, buffer, idx++, maxlen);
  0x1000'1846: 0x4653          MOV      R3, R10
  0x1000'1848: 0x002a          MOVS     R2, R5
  0x1000'184a: 0x9911          LDR      R1, [SP, #0x44]
  0x1000'184c: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'184e: 0x7800          LDRB     R0, [R0]
  0x1000'1850: 0x47b8          BLX      R7
  0x1000'1852: 0x1c6d          ADDS     R5, R5, #1
  //         format++;
  0x1000'1854: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'1856: 0x1c40          ADDS     R0, R0, #1
  0x1000'1858: 0x9012          STR      R0, [SP, #0x48]
  //         break;
  0x1000'185a: 0xe4c2          B.N      ??_vsnprintf_0         ; 0x1000'11e2
                 ??_vsnprintf_1:
  //   out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
  0x1000'185c: 0x4555          CMP      R5, R10
  0x1000'185e: 0xd201          BCS.N    ??_vsnprintf_91        ; 0x1000'1864
  0x1000'1860: 0x002a          MOVS     R2, R5
  0x1000'1862: 0xe001          B.N      ??_vsnprintf_92        ; 0x1000'1868
                 ??_vsnprintf_91:
  0x1000'1864: 0xf1ba 0x0201   SUBS.W   R2, R10, #1
                 ??_vsnprintf_92:
  0x1000'1868: 0x4653          MOV      R3, R10
  0x1000'186a: 0x9911          LDR      R1, [SP, #0x44]
  0x1000'186c: 0x2000          MOVS     R0, #0
  0x1000'186e: 0x47b8          BLX      R7
  //   return (int)idx;
  0x1000'1870: 0x0028          MOVS     R0, R5
  0x1000'1872: 0xb013          ADD      SP, SP, #0x4c
  0x1000'1874: 0xe8bd 0x8ff0   POP.W    {R4-R11, PC}
                 `.text_30`:
                 printf:
  // int printf(const char* format, ...)
  // {
  0x1000'1878: 0xb40e          PUSH     {R1-R3}
  0x1000'187a: 0xb53c          PUSH     {R2-R5, LR}
  0x1000'187c: 0x0005          MOVS     R5, R0
  //   va_start(va, format);
  0x1000'187e: 0xac05          ADD      R4, SP, #0x14
  //   const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
  0x1000'1880: 0x9400          STR      R4, [SP]
  0x1000'1882: 0x002b          MOVS     R3, R5
  0x1000'1884: 0xf05f 0x32ff   MOVS.W   R2, #-1                ; 0xffff'ffff
  0x1000'1888: 0xa901          ADD      R1, SP, #0x4
  0x1000'188a: 0x481a          LDR.N    R0, ??DataTable9_23    ; _out_char
  0x1000'188c: 0xf7ff 0xfc9c   BL       _vsnprintf             ; 0x1000'11c8
  //   return ret;
  0x1000'1890: 0xbc36          POP      {R1, R2, R4, R5}
  0x1000'1892: 0xf85d 0xfb10   LDR.W    PC, [SP], #0x10
  0x1000'1896: 0x0000          MOVS     R0, R0
                 `$d.32`:
                 ??DataTable9:
  0x1000'1898: 0x3fe0'0000     DC32     0x3fe0'0000            ; 1.75
                 ??DataTable9_1:
  0x1000'189c: 0x000f'ffff     DC32     0xf'ffff               ; '....'
                 ??DataTable9_2:
  0x1000'18a0: 0x3ff0'0000     DC32     0x3ff0'0000            ; 1.875
                 ??DataTable9_3:
  0x1000'18a4: 0x509f'79fb     DC32     0x509f'79fb            ; '.y.P'
                 ??DataTable9_4:
  0x1000'18a8: 0x3fd3'4413     DC32     0x3fd3'4413            ; '.D.?'
                 ??DataTable9_5:
  0x1000'18ac: 0x8b60'c8b3     DC32     0x8b60'c8b3            ; '..`.'
                 ??DataTable9_6:
  0x1000'18b0: 0x3fc6'8a28     DC32     0x3fc6'8a28            ; '(..?'
                 ??DataTable9_7:
  0x1000'18b4: 0xbff8'0000     DC32     0xbff8'0000            ; '....'
                 ??DataTable9_8:
  0x1000'18b8: 0x636f'4361     DC32     0x636f'4361            ; 'aCoc'
                 ??DataTable9_9:
  0x1000'18bc: 0x3fd2'87a7     DC32     0x3fd2'87a7            ; '...?'
                 ??DataTable9_10:
  0x1000'18c0: 0x0979'a371     DC32     0x979'a371             ; 'q.y.'
                 ??DataTable9_11:
  0x1000'18c4: 0x400a'934f     DC32     0x400a'934f            ; 'O..@'
                 ??DataTable9_12:
  0x1000'18c8: 0xbbb5'5516     DC32     0xbbb5'5516            ; '.U..'
                 ??DataTable9_13:
  0x1000'18cc: 0x4002'6bb1     DC32     0x4002'6bb1            ; '.k.@'
                 ??DataTable9_14:
  0x1000'18d0: 0xfefa'39ef     DC32     0xfefa'39ef            ; '.9..'
                 ??DataTable9_15:
  0x1000'18d4: 0xbfe6'2e42     DC32     0xbfe6'2e42            ; 'B...'
                 ??DataTable9_16:
  0x1000'18d8: 0x402c'0000     DC32     0x402c'0000            ; '..,@'
                 ??DataTable9_17:
  0x1000'18dc: 0x4024'0000     DC32     0x4024'0000            ; '..$@'
                 ??DataTable9_18:
  0x1000'18e0: 0x4018'0000     DC32     0x4018'0000            ; 2.375
                 ??DataTable9_19:
  0x1000'18e4: 0xeb1c'432d     DC32     0xeb1c'432d            ; '-C..'
                 ??DataTable9_20:
  0x1000'18e8: 0x3f1a'36e2     DC32     0x3f1a'36e2            ; '.6.?'
                 ??DataTable9_21:
  0x1000'18ec: 0x412e'8480     DC32     0x412e'8480            ; '...A'
                 ??DataTable9_22:
  0x1000'18f0: 0x1000'07c1     DC32     _out_null
                 ??DataTable9_23:
  0x1000'18f4: 0x1000'07c3     DC32     _out_char
                 $t:
                 `.text8`:
                 ??put_char_0:
                 put_char:
  //     while (UART_FLAG(UART0) & 0x20);
  0x1000'18f8: 0x490d          LDR.N    R1, ??DataTable2       ; 0x4020'0018
  0x1000'18fa: 0x6809          LDR      R1, [R1]
  0x1000'18fc: 0x0689          LSLS     R1, R1, #26
  0x1000'18fe: 0xd4fb          BMI.N    put_char               ; 0x1000'18f8
  //     UART_DATA(UART0) = ch;
  0x1000'1900: 0x490c          LDR.N    R1, ??DataTable2_1     ; 0x4020'0000
  0x1000'1902: 0x6008          STR      R0, [R1]
  //     return ch;
  0x1000'1904: 0x4770          BX       LR
                 `.text_5`:
                 uart_init:
  //     UART_IBRD(UART0) = 40;
  0x1000'1906: 0x2128          MOVS     R1, #40                ; 0x28
  0x1000'1908: 0x480b          LDR.N    R0, ??DataTable2_2     ; 0x4020'0024
  0x1000'190a: 0x6001          STR      R1, [R0]
  //     UART_FBRD(UART0) = 11;
  0x1000'190c: 0x210b          MOVS     R1, #11                ; 0xb
  0x1000'190e: 0x480b          LDR.N    R0, ??DataTable2_3     ; 0x4020'0028
  0x1000'1910: 0x6001          STR      R1, [R0]
  //     UART_LCRH(UART0) = 0x60;
  0x1000'1912: 0x2160          MOVS     R1, #96                ; 0x60
  0x1000'1914: 0x480a          LDR.N    R0, ??DataTable2_4     ; 0x4020'002c
  0x1000'1916: 0x6001          STR      R1, [R0]
  //     UART_CR(UART0)   = 0x301;
  0x1000'1918: 0xf240 0x3101   MOVW     R1, #769               ; 0x301
  0x1000'191c: 0x4809          LDR.N    R0, ??DataTable2_5     ; 0x4020'0030
  0x1000'191e: 0x6001          STR      R1, [R0]
  //     UART_RSR(UART0)  = 0x0A;
  0x1000'1920: 0x210a          MOVS     R1, #10                ; 0xa
  0x1000'1922: 0x4809          LDR.N    R0, ??DataTable2_6     ; 0x4020'0004
  0x1000'1924: 0x6001          STR      R1, [R0]
  //     UART_CTRL(UART0) = 0x01;
  0x1000'1926: 0x2101          MOVS     R1, #1
  0x1000'1928: 0x4808          LDR.N    R0, ??DataTable2_7     ; 0x4020'0008
  0x1000'192a: 0x6001          STR      R1, [R0]
  // }
  0x1000'192c: 0x4770          BX       LR
  0x1000'192e: 0x0000          MOVS     R0, R0
                 `$d.32`:
                 ??DataTable2:
  0x1000'1930: 0x4020'0018     DC32     0x4020'0018            ; '.. @'
                 ??DataTable2_1:
  0x1000'1934: 0x4020'0000     DC32     0x4020'0000            ; 2.5
                 ??DataTable2_2:
  0x1000'1938: 0x4020'0024     DC32     0x4020'0024            ; '$. @'
                 ??DataTable2_3:
  0x1000'193c: 0x4020'0028     DC32     0x4020'0028            ; '(. @'
                 ??DataTable2_4:
  0x1000'1940: 0x4020'002c     DC32     0x4020'002c            ; ',. @'
                 ??DataTable2_5:
  0x1000'1944: 0x4020'0030     DC32     0x4020'0030            ; '0. @'
                 ??DataTable2_6:
  0x1000'1948: 0x4020'0004     DC32     0x4020'0004            ; '.. @'
                 ??DataTable2_7:
  0x1000'194c: 0x4020'0008     DC32     0x4020'0008            ; '.. @'
                 $t:
                 `.text_2`:
                 __aeabi_uldivmod:
  0x1000'1950: 0xbbbb          CBNZ     R3, @100019c2
  0x1000'1952: 0xb1e1          CBZ      R1, @1000198e
  0x1000'1954: 0xf5b2 0x3f80   CMP.W    R2, #65536             ; 0x1'0000
  0x1000'1958: 0xf080 0x807e   BCS.W    @10001a58
  0x1000'195c: 0x2a02          CMP      R2, #2
  0x1000'195e: 0xd91e          BLS.N    @1000199e
  0x1000'1960: 0x468c          MOV      R12, R1
  0x1000'1962: 0xfbb1 0xf1f2   UDIV     R1, R1, R2
  0x1000'1966: 0xfb02 0xc311   MLS      R3, R2, R1, R12
  0x1000'196a: 0x041b          LSLS     R3, R3, #16
  0x1000'196c: 0xea43 0x4310   ORR.W    R3, R3, R0, LSR #16
  0x1000'1970: 0xfbb3 0xfcf2   UDIV     R12, R3, R2
  0x1000'1974: 0xfb02 0x331c   MLS      R3, R2, R12, R3
  0x1000'1978: 0xb280          UXTH     R0, R0
  0x1000'197a: 0xea40 0x4303   ORR.W    R3, R0, R3, LSL #16
  0x1000'197e: 0xfbb3 0xf0f2   UDIV     R0, R3, R2
  0x1000'1982: 0xfb02 0x3210   MLS      R2, R2, R0, R3
  0x1000'1986: 0xea40 0x400c   ORR.W    R0, R0, R12, LSL #16
  0x1000'198a: 0x2300          MOVS     R3, #0
  0x1000'198c: 0x4770          BX       LR
                 @1000198e:
  0x1000'198e: 0x2a02          CMP      R2, #2
  0x1000'1990: 0xd905          BLS.N    @1000199e
  0x1000'1992: 0x4684          MOV      R12, R0
  0x1000'1994: 0xfbb0 0xf0f2   UDIV     R0, R0, R2
  0x1000'1998: 0xfb02 0xc210   MLS      R2, R2, R0, R12
  0x1000'199c: 0x4770          BX       LR
                 @1000199e:
  0x1000'199e: 0xb14a          CBZ      R2, @100019b4
  0x1000'19a0: 0xd105          BNE.N    @100019ae
  0x1000'19a2: 0xf000 0x0201   AND.W    R2, R0, #1
  0x1000'19a6: 0x0849          LSRS     R1, R1, #1
  0x1000'19a8: 0xea5f 0x0030   RRXS.W   R0, R0
  0x1000'19ac: 0x4770          BX       LR
                 @100019ae:
  0x1000'19ae: 0x2200          MOVS     R2, #0
  0x1000'19b0: 0x2300          MOVS     R3, #0
  0x1000'19b2: 0x4770          BX       LR
                 @100019b4:
  0x1000'19b4: 0xf000 0xbcb4   B.W      __aeabi_ldiv0          ; 0x1000'2320
                 @100019b8:
  0x1000'19b8: 0x000b          MOVS     R3, R1
  0x1000'19ba: 0x0002          MOVS     R2, R0
  0x1000'19bc: 0x2100          MOVS     R1, #0
  0x1000'19be: 0x2000          MOVS     R0, #0
  0x1000'19c0: 0x4770          BX       LR
                 @100019c2:
  0x1000'19c2: 0x4290          CMP      R0, R2
  0x1000'19c4: 0xeb71 0x0c03   SBCS.W   R12, R1, R3
  0x1000'19c8: 0xd3f6          BCC.N    @100019b8
  0x1000'19ca: 0xf5b3 0x3f80   CMP.W    R3, #65536             ; 0x1'0000
  0x1000'19ce: 0xd22f          BCS.N    @10001a30
  0x1000'19d0: 0xb5f0          PUSH     {R4-R7, LR}
  0x1000'19d2: 0xfab3 0xf783   CLZ      R7, R3
  0x1000'19d6: 0xfab1 0xf481   CLZ      R4, R1
  0x1000'19da: 0xf1a7 0x0e0f   SUB.W    LR, R7, #15            ; 0xf
  0x1000'19de: 0x1b3d          SUBS     R5, R7, R4
  0x1000'19e0: 0x4053          EORS     R3, R3, R2
  0x1000'19e2: 0xf1ce 0x0620   RSB.W    R6, LR, #32            ; 0x20
  0x1000'19e6: 0xfa02 0xf20e   LSL.W    R2, R2, LR
  0x1000'19ea: 0x41f3          RORS     R3, R3, R6
  0x1000'19ec: 0x4053          EORS     R3, R3, R2
  0x1000'19ee: 0xf1b5 0x070f   SUBS.W   R7, R5, #15            ; 0xf
  0x1000'19f2: 0xd846          BHI.N    @10001a82
                 @100019f4:
  0x1000'19f4: 0x3c0f          SUBS     R4, R4, #15            ; 0xf
  0x1000'19f6: 0x442c          ADD      R4, R4, R5
  0x1000'19f8: 0x4041          EORS     R1, R1, R0
  0x1000'19fa: 0xf1c4 0x0620   RSB.W    R6, R4, #32            ; 0x20
  0x1000'19fe: 0x40a0          LSLS     R0, R0, R4
  0x1000'1a00: 0x41f1          RORS     R1, R1, R6
  0x1000'1a02: 0x4041          EORS     R1, R1, R0
  0x1000'1a04: 0xfbb1 0xf6f3   UDIV     R6, R1, R3
  0x1000'1a08: 0xfb03 0x1116   MLS      R1, R3, R6, R1
  0x1000'1a0c: 0xfba2 0x4506   UMULL    R4, R5, R2, R6
  0x1000'1a10: 0x1b00          SUBS     R0, R0, R4
  0x1000'1a12: 0x41a9          SBCS     R1, R1, R5
  0x1000'1a14: 0xd202          BCS.N    @10001a1c
  0x1000'1a16: 0x1e76          SUBS     R6, R6, #1
  0x1000'1a18: 0x1880          ADDS     R0, R0, R2
  0x1000'1a1a: 0x4159          ADCS     R1, R1, R3
                 @10001a1c:
  0x1000'1a1c: 0xea80 0x0201   EOR.W    R2, R0, R1
  0x1000'1a20: 0xfa21 0xf30e   LSR.W    R3, R1, LR
  0x1000'1a24: 0xfa62 0xf20e   ROR.W    R2, R2, LR
  0x1000'1a28: 0x2100          MOVS     R1, #0
  0x1000'1a2a: 0x405a          EORS     R2, R2, R3
  0x1000'1a2c: 0x4630          MOV      R0, R6
  0x1000'1a2e: 0xbdf0          POP      {R4-R7, PC}
                 @10001a30:
  0x1000'1a30: 0xb430          PUSH     {R4, R5}
  0x1000'1a32: 0xfbb1 0xfcf3   UDIV     R12, R1, R3
  0x1000'1a36: 0xfb03 0x111c   MLS      R1, R3, R12, R1
  0x1000'1a3a: 0xfba2 0x450c   UMULL    R4, R5, R2, R12
  0x1000'1a3e: 0x1b00          SUBS     R0, R0, R4
  0x1000'1a40: 0x41a9          SBCS     R1, R1, R5
  0x1000'1a42: 0xd203          BCS.N    @10001a4c
  0x1000'1a44: 0xf1ac 0x0c01   SUB.W    R12, R12, #1
  0x1000'1a48: 0x1880          ADDS     R0, R0, R2
  0x1000'1a4a: 0x4159          ADCS     R1, R1, R3
                 @10001a4c:
  0x1000'1a4c: 0xbc30          POP      {R4, R5}
  0x1000'1a4e: 0x4602          MOV      R2, R0
  0x1000'1a50: 0x460b          MOV      R3, R1
  0x1000'1a52: 0x4660          MOV      R0, R12
  0x1000'1a54: 0x2100          MOVS     R1, #0
  0x1000'1a56: 0x4770          BX       LR
                 @10001a58:
  0x1000'1a58: 0xf1b2 0x7f80   CMP.W    R2, #16777216          ; 0x100'0000
  0x1000'1a5c: 0xd365          BCC.N    @10001b2a
  0x1000'1a5e: 0xb5f0          PUSH     {R4-R7, LR}
  0x1000'1a60: 0xfab2 0xf782   CLZ      R7, R2
  0x1000'1a64: 0xfab1 0xf481   CLZ      R4, R1
  0x1000'1a68: 0xf1c7 0x060f   RSB.W    R6, R7, #15            ; 0xf
  0x1000'1a6c: 0x1b3d          SUBS     R5, R7, R4
  0x1000'1a6e: 0xfa22 0xf306   LSR.W    R3, R2, R6
  0x1000'1a72: 0xf107 0x0e11   ADD.W    LR, R7, #17            ; 0x11
  0x1000'1a76: 0x41f2          RORS     R2, R2, R6
  0x1000'1a78: 0x3520          ADDS     R5, R5, #32            ; 0x20
  0x1000'1a7a: 0x405a          EORS     R2, R2, R3
  0x1000'1a7c: 0xf1b5 0x070f   SUBS.W   R7, R5, #15            ; 0xf
  0x1000'1a80: 0xd9b8          BLS.N    @100019f4
                 @10001a82:
  0x1000'1a82: 0x4041          EORS     R1, R1, R0
  0x1000'1a84: 0xf1c4 0x0620   RSB.W    R6, R4, #32            ; 0x20
  0x1000'1a88: 0x40a0          LSLS     R0, R0, R4
  0x1000'1a8a: 0x41f1          RORS     R1, R1, R6
  0x1000'1a8c: 0x4041          EORS     R1, R1, R0
  0x1000'1a8e: 0xfbb1 0xfcf3   UDIV     R12, R1, R3
  0x1000'1a92: 0xfb03 0x111c   MLS      R1, R3, R12, R1
  0x1000'1a96: 0xfba2 0x450c   UMULL    R4, R5, R2, R12
  0x1000'1a9a: 0x1b00          SUBS     R0, R0, R4
  0x1000'1a9c: 0x41a9          SBCS     R1, R1, R5
  0x1000'1a9e: 0xd203          BCS.N    @10001aa8
  0x1000'1aa0: 0xf1bc 0x0c01   SUBS.W   R12, R12, #1
  0x1000'1aa4: 0x1880          ADDS     R0, R0, R2
  0x1000'1aa6: 0x4159          ADCS     R1, R1, R3
                 @10001aa8:
  0x1000'1aa8: 0x2f0f          CMP      R7, #15                ; 0xf
  0x1000'1aaa: 0xd312          BCC.N    @10001ad2
  0x1000'1aac: 0x3f0f          SUBS     R7, R7, #15            ; 0xf
  0x1000'1aae: 0x03c9          LSLS     R1, R1, #15
  0x1000'1ab0: 0xea41 0x4150   ORR.W    R1, R1, R0, LSR #17
  0x1000'1ab4: 0xfbb1 0xf6f3   UDIV     R6, R1, R3
  0x1000'1ab8: 0xfb03 0x1116   MLS      R1, R3, R6, R1
  0x1000'1abc: 0xfba2 0x4506   UMULL    R4, R5, R2, R6
  0x1000'1ac0: 0xebd4 0x30c0   RSBS.W   R0, R4, R0, LSL #15
  0x1000'1ac4: 0x41a9          SBCS     R1, R1, R5
  0x1000'1ac6: 0xd202          BCS.N    @10001ace
  0x1000'1ac8: 0x1e76          SUBS     R6, R6, #1
  0x1000'1aca: 0x1880          ADDS     R0, R0, R2
  0x1000'1acc: 0x4159          ADCS     R1, R1, R3
                 @10001ace:
  0x1000'1ace: 0xea46 0x3ccc   ORR.W    R12, R6, R12, LSL #15
                 @10001ad2:
  0x1000'1ad2: 0xb307          CBZ      R7, @10001b16
  0x1000'1ad4: 0x4041          EORS     R1, R1, R0
  0x1000'1ad6: 0xf1c7 0x0620   RSB.W    R6, R7, #32            ; 0x20
  0x1000'1ada: 0x40b8          LSLS     R0, R0, R7
  0x1000'1adc: 0x41f1          RORS     R1, R1, R6
  0x1000'1ade: 0x4041          EORS     R1, R1, R0
  0x1000'1ae0: 0xfbb1 0xf6f3   UDIV     R6, R1, R3
  0x1000'1ae4: 0xfb03 0x1116   MLS      R1, R3, R6, R1
  0x1000'1ae8: 0xfba2 0x4506   UMULL    R4, R5, R2, R6
  0x1000'1aec: 0x1b00          SUBS     R0, R0, R4
  0x1000'1aee: 0x41a9          SBCS     R1, R1, R5
  0x1000'1af0: 0xd202          BCS.N    @10001af8
  0x1000'1af2: 0x1e76          SUBS     R6, R6, #1
  0x1000'1af4: 0x1880          ADDS     R0, R0, R2
  0x1000'1af6: 0x4159          ADCS     R1, R1, R3
                 @10001af8:
  0x1000'1af8: 0xea80 0x0201   EOR.W    R2, R0, R1
  0x1000'1afc: 0xfa21 0xf30e   LSR.W    R3, R1, LR
  0x1000'1b00: 0xf1c7 0x0420   RSB.W    R4, R7, #32            ; 0x20
  0x1000'1b04: 0xfa62 0xf20e   ROR.W    R2, R2, LR
  0x1000'1b08: 0xfa0c 0xf007   LSL.W    R0, R12, R7
  0x1000'1b0c: 0x405a          EORS     R2, R2, R3
  0x1000'1b0e: 0xfa2c 0xf104   LSR.W    R1, R12, R4
  0x1000'1b12: 0x4330          ORRS     R0, R0, R6
  0x1000'1b14: 0xbdf0          POP      {R4-R7, PC}
                 @10001b16:
  0x1000'1b16: 0xea80 0x0201   EOR.W    R2, R0, R1
  0x1000'1b1a: 0xfa21 0xf30e   LSR.W    R3, R1, LR
  0x1000'1b1e: 0x2100          MOVS     R1, #0
  0x1000'1b20: 0xfa62 0xf20e   ROR.W    R2, R2, LR
  0x1000'1b24: 0x4660          MOV      R0, R12
  0x1000'1b26: 0x405a          EORS     R2, R2, R3
  0x1000'1b28: 0xbdf0          POP      {R4-R7, PC}
                 @10001b2a:
  0x1000'1b2a: 0x468c          MOV      R12, R1
  0x1000'1b2c: 0xfbb1 0xf1f2   UDIV     R1, R1, R2
  0x1000'1b30: 0xfb02 0xc311   MLS      R3, R2, R1, R12
  0x1000'1b34: 0x021b          LSLS     R3, R3, #8
  0x1000'1b36: 0xea43 0x6310   ORR.W    R3, R3, R0, LSR #24
  0x1000'1b3a: 0xfbb3 0xfcf2   UDIV     R12, R3, R2
  0x1000'1b3e: 0xfb02 0x331c   MLS      R3, R2, R12, R3
  0x1000'1b42: 0x021b          LSLS     R3, R3, #8
  0x1000'1b44: 0xea4c 0x2000   ORR.W    R0, R12, R0, LSL #8
  0x1000'1b48: 0xea43 0x6310   ORR.W    R3, R3, R0, LSR #24
  0x1000'1b4c: 0xfbb3 0xfcf2   UDIV     R12, R3, R2
  0x1000'1b50: 0xfb02 0x331c   MLS      R3, R2, R12, R3
  0x1000'1b54: 0x021b          LSLS     R3, R3, #8
  0x1000'1b56: 0xea4c 0x2000   ORR.W    R0, R12, R0, LSL #8
  0x1000'1b5a: 0xea43 0x6310   ORR.W    R3, R3, R0, LSR #24
  0x1000'1b5e: 0xfbb3 0xfcf2   UDIV     R12, R3, R2
  0x1000'1b62: 0xfb02 0x331c   MLS      R3, R2, R12, R3
  0x1000'1b66: 0x021b          LSLS     R3, R3, #8
  0x1000'1b68: 0xea4c 0x2000   ORR.W    R0, R12, R0, LSL #8
  0x1000'1b6c: 0xea43 0x6310   ORR.W    R3, R3, R0, LSR #24
  0x1000'1b70: 0xfbb3 0xfcf2   UDIV     R12, R3, R2
  0x1000'1b74: 0xfb02 0x321c   MLS      R2, R2, R12, R3
  0x1000'1b78: 0xea4c 0x2000   ORR.W    R0, R12, R0, LSL #8
  0x1000'1b7c: 0x2300          MOVS     R3, #0
  0x1000'1b7e: 0x4770          BX       LR
                 `.text6`:
                 __aeabi_cdcmpeq:
  0x1000'1b80: 0x4290          CMP      R0, R2
  0x1000'1b82: 0xd105          BNE.N    @10001b90
  0x1000'1b84: 0x4299          CMP      R1, R3
  0x1000'1b86: 0xd004          BEQ.N    @10001b92
  0x1000'1b88: 0xea41 0x0c03   ORR.W    R12, R1, R3
  0x1000'1b8c: 0xea50 0x0c4c   ORRS.W   R12, R0, R12, LSL #1
                 @10001b90:
  0x1000'1b90: 0x4770          BX       LR
                 @10001b92:
  0x1000'1b92: 0xf44f 0x1c00   MOV.W    R12, #2097152          ; 0x20'0000
  0x1000'1b96: 0xeb1c 0x0f41   CMN.W    R12, R1, LSL #1
  0x1000'1b9a: 0xbf38          IT       CC
  0x1000'1b9c: 0x4289          CMPCC    R1, R1
  0x1000'1b9e: 0x4770          BX       LR
                 `.text6`:
                 __aeabi_cdcmple:
  0x1000'1ba0: 0xea41 0x0c03   ORR.W    R12, R1, R3
  0x1000'1ba4: 0xea50 0x0c4c   ORRS.W   R12, R0, R12, LSL #1
  0x1000'1ba8: 0xea52 0x0c0c   ORRS.W   R12, R2, R12
  0x1000'1bac: 0xf44f 0x1c00   MOV.W    R12, #2097152          ; 0x20'0000
  0x1000'1bb0: 0xd309          BCC.N    @10001bc6
  0x1000'1bb2: 0xd007          BEQ.N    @10001bc4
  0x1000'1bb4: 0xeb1c 0x0f41   CMN.W    R12, R1, LSL #1
  0x1000'1bb8: 0xbf9c          ITT      LS
  0x1000'1bba: 0xeb1c 0x0f43   CMNLS.W  R12, R3, LSL #1
  0x1000'1bbe: 0x428b          CMPLS    R3, R1
  0x1000'1bc0: 0xbf08          IT       EQ
  0x1000'1bc2: 0x4282          CMPEQ    R2, R0
                 @10001bc4:
  0x1000'1bc4: 0x4770          BX       LR
                 @10001bc6:
  0x1000'1bc6: 0xeb1c 0x0f43   CMN.W    R12, R3, LSL #1
  0x1000'1bca: 0xd8fb          BHI.N    @10001bc4
  0x1000'1bcc: 0x4299          CMP      R1, R3
  0x1000'1bce: 0xbf08          IT       EQ
  0x1000'1bd0: 0x4290          CMPEQ    R0, R2
  0x1000'1bd2: 0x4770          BX       LR
                 `.text6`:
                 __aeabi_cdrcmple:
  0x1000'1bd4: 0xea41 0x0c03   ORR.W    R12, R1, R3
  0x1000'1bd8: 0xea50 0x0c4c   ORRS.W   R12, R0, R12, LSL #1
  0x1000'1bdc: 0xea52 0x0c0c   ORRS.W   R12, R2, R12
  0x1000'1be0: 0xf44f 0x1c00   MOV.W    R12, #2097152          ; 0x20'0000
  0x1000'1be4: 0xd309          BCC.N    @10001bfa
  0x1000'1be6: 0xd007          BEQ.N    @10001bf8
  0x1000'1be8: 0xeb1c 0x0f41   CMN.W    R12, R1, LSL #1
  0x1000'1bec: 0xbf9c          ITT      LS
  0x1000'1bee: 0xeb1c 0x0f43   CMNLS.W  R12, R3, LSL #1
  0x1000'1bf2: 0x4299          CMPLS    R1, R3
  0x1000'1bf4: 0xbf08          IT       EQ
  0x1000'1bf6: 0x4290          CMPEQ    R0, R2
                 @10001bf8:
  0x1000'1bf8: 0x4770          BX       LR
                 @10001bfa:
  0x1000'1bfa: 0xeb1c 0x0f41   CMN.W    R12, R1, LSL #1
  0x1000'1bfe: 0xd8fb          BHI.N    @10001bf8
  0x1000'1c00: 0x428b          CMP      R3, R1
  0x1000'1c02: 0xbf08          IT       EQ
  0x1000'1c04: 0x4282          CMPEQ    R2, R0
  0x1000'1c06: 0x4770          BX       LR
                 `.text6`:
                 __aeabi_d2iz:
  0x1000'1c08: 0xf3c1 0x530a   UBFX     R3, R1, #20, #11
  0x1000'1c0c: 0xf240 0x421e   MOVW     R2, #1054              ; 0x41e
  0x1000'1c10: 0x1ad3          SUBS     R3, R2, R3
  0x1000'1c12: 0xdd0c          BLE.N    @10001c2e
  0x1000'1c14: 0x02ca          LSLS     R2, R1, #11
  0x1000'1c16: 0xf383 0x0307   USAT     R3, #7, R3
  0x1000'1c1a: 0xea42 0x5250   ORR.W    R2, R2, R0, LSR #21
  0x1000'1c1e: 0xf042 0x4200   ORR.W    R2, R2, #-2147483648   ; 0x8000'0000
  0x1000'1c22: 0x40da          LSRS     R2, R2, R3
  0x1000'1c24: 0xeb02 0x72e1   ADD.W    R2, R2, R1, ASR #31
  0x1000'1c28: 0xea82 0x70e1   EOR.W    R0, R2, R1, ASR #31
  0x1000'1c2c: 0x4770          BX       LR
                 @10001c2e:
  0x1000'1c2e: 0xea6f 0x72e1   MVN.W    R2, R1, ASR #31
  0x1000'1c32: 0xf203 0x30e1   ADDW     R0, R3, #993           ; 0x3e1
  0x1000'1c36: 0xb108          CBZ      R0, @10001c3c
  0x1000'1c38: 0xf082 0x4000   EOR.W    R0, R2, #-2147483648   ; 0x8000'0000
                 @10001c3c:
  0x1000'1c3c: 0x4770          BX       LR
                 `.text7`:
                 __iar_copy_init3:
  0x1000'1c3e: 0xe00e          B.N      ??__iar_copy_init3_2   ; 0x1000'1c5e
                 ??__iar_copy_init3_5:
  0x1000'1c40: 0x6802          LDR      R2, [R0]
  0x1000'1c42: 0x6843          LDR      R3, [R0, #0x4]
  0x1000'1c44: 0x4402          ADD      R2, R2, R0
  0x1000'1c46: 0x3008          ADDS     R0, R0, #8
  0x1000'1c48: 0xea5f 0x7cc3   LSLS.W   R12, R3, #31
  0x1000'1c4c: 0xbf44          ITT      MI
  0x1000'1c4e: 0x444b          ADDMI    R3, R3, R9
  0x1000'1c50: 0x1e5b          SUBMI    R3, R3, #1
                 ??__iar_copy_init3_4:
  0x1000'1c52: 0xf852 0xcb04   LDR.W    R12, [R2], #0x4
  0x1000'1c56: 0xf843 0xcb04   STR.W    R12, [R3], #0x4
  0x1000'1c5a: 0x1f09          SUBS     R1, R1, #4
  0x1000'1c5c: 0xd1f9          BNE.N    ??__iar_copy_init3_4   ; 0x1000'1c52
                 ??__iar_copy_init3_2:
  0x1000'1c5e: 0xf850 0x1b04   LDR.W    R1, [R0], #0x4
  0x1000'1c62: 0x2900          CMP      R1, #0
  0x1000'1c64: 0xd1ec          BNE.N    ??__iar_copy_init3_5   ; 0x1000'1c40
  0x1000'1c66: 0x4770          BX       LR
                 `.text6`:
                 __aeabi_i2d:
  0x1000'1c68: 0xf010 0x4100   ANDS.W   R1, R0, #-2147483648   ; 0x8000'0000
  0x1000'1c6c: 0xb160          CBZ      R0, @10001c88
  0x1000'1c6e: 0xbf48          IT       MI
  0x1000'1c70: 0x4240          RSBMI    R0, R0, #0
  0x1000'1c72: 0xfab0 0xf280   CLZ      R2, R0
  0x1000'1c76: 0x4090          LSLS     R0, R0, R2
  0x1000'1c78: 0x1cd2          ADDS     R2, R2, #3
  0x1000'1c7a: 0xf5c2 0x6284   RSB.W    R2, R2, #1056          ; 0x420
  0x1000'1c7e: 0xea41 0x5202   ORR.W    R2, R1, R2, LSL #20
  0x1000'1c82: 0xeb02 0x21d0   ADD.W    R1, R2, R0, LSR #11
  0x1000'1c86: 0x0540          LSLS     R0, R0, #21
                 @10001c88:
  0x1000'1c88: 0x4770          BX       LR
                 `.text9`:
                 Default_Handler:
                 NMI_Handler:
                 MemManage_Handler:
                 BusFault_Handler:
                 SecureFault_Handler:
                 SVC_Handler:
                 DebugMon_Handler:
                 Interrupt0_Handler:
                 Interrupt1_Handler:
                 Interrupt2_Handler:
                 Interrupt3_Handler:
                 Interrupt4_Handler:
                 Interrupt5_Handler:
                 Interrupt6_Handler:
                 Interrupt7_Handler:
                 Interrupt8_Handler:
                 Interrupt9_Handler:
  //                 B        .
  0x1000'1c8a: 0xe7fe          B.N      Interrupt9_Handler     ; 0x1000'1c8a
                 `.text_1`:
                 __aeabi_dadd:
  0x1000'1c8c: 0xb470          PUSH     {R4-R6}
  0x1000'1c8e: 0xea91 0x0f03   TEQ.W    R1, R3
  0x1000'1c92: 0xf04f 0x4500   MOV.W    R5, #-2147483648       ; 0x8000'0000
  0x1000'1c96: 0xf140 0x80bf   BPL.W    __iar_dadd             ; 0x1000'1e18
  0x1000'1c9a: 0x406b          EORS     R3, R3, R5
                 `.text_2`:
                 __iar_dsub:
  0x1000'1c9c: 0x1a84          SUBS     R4, R0, R2
  0x1000'1c9e: 0xeb71 0x0603   SBCS.W   R6, R1, R3
  0x1000'1ca2: 0xd204          BCS.N    @10001cae
  0x1000'1ca4: 0x406e          EORS     R6, R6, R5
  0x1000'1ca6: 0x1b00          SUBS     R0, R0, R4
  0x1000'1ca8: 0x41b1          SBCS     R1, R1, R6
  0x1000'1caa: 0x1912          ADDS     R2, R2, R4
  0x1000'1cac: 0x4173          ADCS     R3, R3, R6
                 @10001cae:
  0x1000'1cae: 0xf44f 0x1c00   MOV.W    R12, #2097152          ; 0x20'0000
  0x1000'1cb2: 0xeb1c 0x0f41   CMN.W    R12, R1, LSL #1
  0x1000'1cb6: 0xbf34          ITE      CC
  0x1000'1cb8: 0xeb7c 0x0643   SBCSCC.W R6, R12, R3, LSL #1
  0x1000'1cbc: 0xe083          BCS.N    @10001dc6
  0x1000'1cbe: 0x0d0c          LSRS     R4, R1, #20
  0x1000'1cc0: 0xeba4 0x5613   SUB.W    R6, R4, R3, LSR #20
  0x1000'1cc4: 0x2e36          CMP      R6, #54                ; 0x36
  0x1000'1cc6: 0xf300 0x807c   BGT.W    @10001dc2
  0x1000'1cca: 0x2e01          CMP      R6, #1
  0x1000'1ccc: 0xea45 0x23c3   ORR.W    R3, R5, R3, LSL #11
  0x1000'1cd0: 0xdc41          BGT.N    @10001d56
  0x1000'1cd2: 0xea43 0x5352   ORR.W    R3, R3, R2, LSR #21
  0x1000'1cd6: 0xbf12          ITEE     NE
  0x1000'1cd8: 0x02d2          LSLNE    R2, R2, #11
  0x1000'1cda: 0x0292          LSLEQ    R2, R2, #10
  0x1000'1cdc: 0x085b          LSREQ    R3, R3, #1
  0x1000'1cde: 0x0524          LSLS     R4, R4, #20
  0x1000'1ce0: 0xea45 0x21c1   ORR.W    R1, R5, R1, LSL #11
  0x1000'1ce4: 0xea41 0x5150   ORR.W    R1, R1, R0, LSR #21
  0x1000'1ce8: 0xebd2 0x20c0   RSBS.W   R0, R2, R0, LSL #11
  0x1000'1cec: 0x4199          SBCS     R1, R1, R3
  0x1000'1cee: 0xd425          BMI.N    @10001d3c
  0x1000'1cf0: 0xd107          BNE.N    @10001d02
  0x1000'1cf2: 0xfab0 0xf680   CLZ      R6, R0
  0x1000'1cf6: 0xfa10 0xf106   LSLS.W   R1, R0, R6
  0x1000'1cfa: 0xd062          BEQ.N    @10001dc2
  0x1000'1cfc: 0x2000          MOVS     R0, #0
  0x1000'1cfe: 0x3620          ADDS     R6, R6, #32            ; 0x20
  0x1000'1d00: 0xe008          B.N      @10001d14
                 @10001d02:
  0x1000'1d02: 0xfab1 0xf681   CLZ      R6, R1
  0x1000'1d06: 0x40b1          LSLS     R1, R1, R6
  0x1000'1d08: 0xf1c6 0x0220   RSB.W    R2, R6, #32            ; 0x20
  0x1000'1d0c: 0xfa20 0xf202   LSR.W    R2, R0, R2
  0x1000'1d10: 0x4311          ORRS     R1, R1, R2
  0x1000'1d12: 0x40b0          LSLS     R0, R0, R6
                 @10001d14:
  0x1000'1d14: 0xea4f 0x74f4   ROR.W    R4, R4, #31
  0x1000'1d18: 0xebb4 0x5446   SUBS.W   R4, R4, R6, LSL #21
  0x1000'1d1c: 0xf034 0x0601   BICS.W   R6, R4, #1
  0x1000'1d20: 0xea4f 0x0474   ROR.W    R4, R4, #1
  0x1000'1d24: 0xd80a          BHI.N    @10001d3c
  0x1000'1d26: 0xf5d6 0x1600   RSBS.W   R6, R6, #2097152       ; 0x20'0000
  0x1000'1d2a: 0x0d76          LSRS     R6, R6, #21
  0x1000'1d2c: 0xf004 0x4400   AND.W    R4, R4, #-2147483648   ; 0x8000'0000
  0x1000'1d30: 0x40f0          LSRS     R0, R0, R6
  0x1000'1d32: 0xfa61 0xf206   ROR.W    R2, R1, R6
  0x1000'1d36: 0x4050          EORS     R0, R0, R2
  0x1000'1d38: 0x40f1          LSRS     R1, R1, R6
  0x1000'1d3a: 0x4048          EORS     R0, R0, R1
                 @10001d3c:
  0x1000'1d3c: 0x0ac0          LSRS     R0, R0, #11
  0x1000'1d3e: 0xea40 0x5041   ORR.W    R0, R0, R1, LSL #21
  0x1000'1d42: 0xf021 0x4100   BIC.W    R1, R1, #-2147483648   ; 0x8000'0000
  0x1000'1d46: 0xbf28          IT       CS
  0x1000'1d48: 0xea5f 0x0550   LSRSCS.W R5, R0, #1
  0x1000'1d4c: 0xf150 0x0000   ADCS.W   R0, R0, #0
  0x1000'1d50: 0xeb44 0x21d1   ADC.W    R1, R4, R1, LSR #11
  0x1000'1d54: 0xe035          B.N      @10001dc2
                 @10001d56:
  0x1000'1d56: 0x0adb          LSRS     R3, R3, #11
                 @10001d58:
  0x1000'1d58: 0xea45 0x21c1   ORR.W    R1, R5, R1, LSL #11
  0x1000'1d5c: 0x0ac9          LSRS     R1, R1, #11
  0x1000'1d5e: 0xf1b6 0x0520   SUBS.W   R5, R6, #32            ; 0x20
  0x1000'1d62: 0xdd0e          BLE.N    @10001d82
  0x1000'1d64: 0xea42 0x4202   ORR.W    R2, R2, R2, LSL #16
  0x1000'1d68: 0x0c12          LSRS     R2, R2, #16
  0x1000'1d6a: 0xf1c5 0x0620   RSB.W    R6, R5, #32            ; 0x20
  0x1000'1d6e: 0xfa03 0xf606   LSL.W    R6, R3, R6
  0x1000'1d72: 0x40eb          LSRS     R3, R3, R5
  0x1000'1d74: 0xea42 0x0506   ORR.W    R5, R2, R6
  0x1000'1d78: 0x426d          RSBS     R5, R5, #0
  0x1000'1d7a: 0x4198          SBCS     R0, R0, R3
  0x1000'1d7c: 0xf161 0x0100   SBC.W    R1, R1, #0
  0x1000'1d80: 0xe00d          B.N      @10001d9e
                 @10001d82:
  0x1000'1d82: 0xfa62 0xf506   ROR.W    R5, R2, R6
  0x1000'1d86: 0x40f2          LSRS     R2, R2, R6
  0x1000'1d88: 0x4055          EORS     R5, R5, R2
  0x1000'1d8a: 0xfa63 0xfc06   ROR.W    R12, R3, R6
  0x1000'1d8e: 0xea82 0x020c   EOR.W    R2, R2, R12
  0x1000'1d92: 0x40f3          LSRS     R3, R3, R6
  0x1000'1d94: 0x405a          EORS     R2, R2, R3
  0x1000'1d96: 0x426d          RSBS     R5, R5, #0
  0x1000'1d98: 0x4190          SBCS     R0, R0, R2
  0x1000'1d9a: 0xeb61 0x0103   SBC.W    R1, R1, R3
                 @10001d9e:
  0x1000'1d9e: 0xf411 0x1f80   TST.W    R1, #1048576           ; 0x10'0000
  0x1000'1da2: 0xd105          BNE.N    @10001db0
  0x1000'1da4: 0x1e64          SUBS     R4, R4, #1
  0x1000'1da6: 0x0562          LSLS     R2, R4, #21
  0x1000'1da8: 0xd002          BEQ.N    @10001db0
  0x1000'1daa: 0x006d          LSLS     R5, R5, #1
  0x1000'1dac: 0x4140          ADCS     R0, R0, R0
  0x1000'1dae: 0x4149          ADCS     R1, R1, R1
                 @10001db0:
  0x1000'1db0: 0xf421 0x1180   BIC.W    R1, R1, #1048576       ; 0x10'0000
  0x1000'1db4: 0x0843          LSRS     R3, R0, #1
  0x1000'1db6: 0xf175 0x4300   SBCS.W   R3, R5, #-2147483648   ; 0x8000'0000
  0x1000'1dba: 0xf150 0x0000   ADCS.W   R0, R0, #0
  0x1000'1dbe: 0xeb41 0x5104   ADC.W    R1, R1, R4, LSL #20
                 @10001dc2:
  0x1000'1dc2: 0xbc70          POP      {R4-R6}
  0x1000'1dc4: 0x4770          BX       LR
                 @10001dc6:
  0x1000'1dc6: 0xeb1c 0x0f41   CMN.W    R12, R1, LSL #1
  0x1000'1dca: 0xd215          BCS.N    @10001df8
  0x1000'1dcc: 0xf023 0x4300   BIC.W    R3, R3, #-2147483648   ; 0x8000'0000
  0x1000'1dd0: 0xea52 0x0643   ORRS.W   R6, R2, R3, LSL #1
  0x1000'1dd4: 0xd00b          BEQ.N    @10001dee
  0x1000'1dd6: 0xea4f 0x0c4c   LSL.W    R12, R12, #1
  0x1000'1dda: 0xebbc 0x0f41   CMP.W    R12, R1, LSL #1
  0x1000'1dde: 0xd804          BHI.N    @10001dea
  0x1000'1de0: 0x0d0c          LSRS     R4, R1, #20
  0x1000'1de2: 0x1e66          SUBS     R6, R4, #1
  0x1000'1de4: 0x2e34          CMP      R6, #52                ; 0x34
  0x1000'1de6: 0xddb7          BLE.N    @10001d58
  0x1000'1de8: 0xe7eb          B.N      @10001dc2
                 @10001dea:
  0x1000'1dea: 0x1a80          SUBS     R0, R0, R2
  0x1000'1dec: 0x4199          SBCS     R1, R1, R3
                 @10001dee:
  0x1000'1dee: 0xea50 0x0641   ORRS.W   R6, R0, R1, LSL #1
  0x1000'1df2: 0xbf08          IT       EQ
  0x1000'1df4: 0x2100          MOVEQ    R1, #0
  0x1000'1df6: 0xe7e4          B.N      @10001dc2
                 @10001df8:
  0x1000'1df8: 0xbf08          IT       EQ
  0x1000'1dfa: 0xeb1c 0x0f43   CMNEQ.W  R12, R3, LSL #1
  0x1000'1dfe: 0xbf28          IT       CS
  0x1000'1e00: 0xf06f 0x0100   MVNCS.W  R1, #0
  0x1000'1e04: 0xe7dd          B.N      @10001dc2
  0x1000'1e06: 0x0000          MOVS     R0, R0
                 `.text_3`:
                 __aeabi_dsub:
  0x1000'1e08: 0xb470          PUSH     {R4-R6}
  0x1000'1e0a: 0xea91 0x0f03   TEQ.W    R1, R3
  0x1000'1e0e: 0xf04f 0x4500   MOV.W    R5, #-2147483648       ; 0x8000'0000
  0x1000'1e12: 0xf57f 0xaf43   BPL.W    __iar_dsub             ; 0x1000'1c9c
  0x1000'1e16: 0x406b          EORS     R3, R3, R5
                 `.text_4`:
                 __iar_dadd:
  0x1000'1e18: 0x1a84          SUBS     R4, R0, R2
  0x1000'1e1a: 0xeb71 0x0603   SBCS.W   R6, R1, R3
  0x1000'1e1e: 0xd203          BCS.N    @10001e28
  0x1000'1e20: 0x1b00          SUBS     R0, R0, R4
  0x1000'1e22: 0x41b1          SBCS     R1, R1, R6
  0x1000'1e24: 0x1912          ADDS     R2, R2, R4
  0x1000'1e26: 0x4173          ADCS     R3, R3, R6
                 @10001e28:
  0x1000'1e28: 0xf44f 0x1c00   MOV.W    R12, #2097152          ; 0x20'0000
  0x1000'1e2c: 0xeb1c 0x0f41   CMN.W    R12, R1, LSL #1
  0x1000'1e30: 0xbf34          ITE      CC
  0x1000'1e32: 0xeb7c 0x0443   SBCSCC.W R4, R12, R3, LSL #1
  0x1000'1e36: 0xe042          BCS.N    @10001ebe
  0x1000'1e38: 0x0d0c          LSRS     R4, R1, #20
  0x1000'1e3a: 0xeba4 0x5613   SUB.W    R6, R4, R3, LSR #20
  0x1000'1e3e: 0x2e35          CMP      R6, #53                ; 0x35
  0x1000'1e40: 0xdc4f          BGT.N    @10001ee2
  0x1000'1e42: 0xea45 0x23c3   ORR.W    R3, R5, R3, LSL #11
  0x1000'1e46: 0x0adb          LSRS     R3, R3, #11
                 @10001e48:
  0x1000'1e48: 0xea45 0x21c1   ORR.W    R1, R5, R1, LSL #11
  0x1000'1e4c: 0x12c9          ASRS     R1, R1, #11
  0x1000'1e4e: 0xf1b6 0x0520   SUBS.W   R5, R6, #32            ; 0x20
  0x1000'1e52: 0xdd0d          BLE.N    @10001e70
  0x1000'1e54: 0xfa63 0xf605   ROR.W    R6, R3, R5
  0x1000'1e58: 0x40eb          LSRS     R3, R3, R5
  0x1000'1e5a: 0xea86 0x0503   EOR.W    R5, R6, R3
  0x1000'1e5e: 0x4212          TST      R2, R2
  0x1000'1e60: 0xbf18          IT       NE
  0x1000'1e62: 0xf045 0x0501   ORRNE.W  R5, R5, #1
  0x1000'1e66: 0x18c0          ADDS     R0, R0, R3
  0x1000'1e68: 0xf151 0x0100   ADCS.W   R1, R1, #0
  0x1000'1e6c: 0xd20c          BCS.N    @10001e88
  0x1000'1e6e: 0xe013          B.N      @10001e98
                 @10001e70:
  0x1000'1e70: 0xfa62 0xf506   ROR.W    R5, R2, R6
  0x1000'1e74: 0x40f2          LSRS     R2, R2, R6
  0x1000'1e76: 0x4055          EORS     R5, R5, R2
  0x1000'1e78: 0x41f3          RORS     R3, R3, R6
  0x1000'1e7a: 0x405a          EORS     R2, R2, R3
  0x1000'1e7c: 0x40b3          LSLS     R3, R3, R6
  0x1000'1e7e: 0x40f3          LSRS     R3, R3, R6
  0x1000'1e80: 0x405a          EORS     R2, R2, R3
  0x1000'1e82: 0x1880          ADDS     R0, R0, R2
  0x1000'1e84: 0x4159          ADCS     R1, R1, R3
  0x1000'1e86: 0xd307          BCC.N    @10001e98
                 @10001e88:
  0x1000'1e88: 0x0849          LSRS     R1, R1, #1
  0x1000'1e8a: 0xea5f 0x0030   RRXS.W   R0, R0
  0x1000'1e8e: 0xea5f 0x0535   RRXS.W   R5, R5
  0x1000'1e92: 0xbf28          IT       CS
  0x1000'1e94: 0xf045 0x0501   ORRCS.W  R5, R5, #1
                 @10001e98:
  0x1000'1e98: 0xf501 0x1180   ADD.W    R1, R1, #1048576       ; 0x10'0000
  0x1000'1e9c: 0x0842          LSRS     R2, R0, #1
  0x1000'1e9e: 0xf175 0x4200   SBCS.W   R2, R5, #-2147483648   ; 0x8000'0000
  0x1000'1ea2: 0xf150 0x0000   ADCS.W   R0, R0, #0
  0x1000'1ea6: 0xeb41 0x5104   ADC.W    R1, R1, R4, LSL #20
  0x1000'1eaa: 0x004e          LSLS     R6, R1, #1
  0x1000'1eac: 0xf516 0x1f00   CMN.W    R6, #2097152           ; 0x20'0000
  0x1000'1eb0: 0xbc70          POP      {R4-R6}
  0x1000'1eb2: 0xbf38          IT       CC
  0x1000'1eb4: 0x4770          BXCC     LR
  0x1000'1eb6: 0x2000          MOVS     R0, #0
  0x1000'1eb8: 0x0d09          LSRS     R1, R1, #20
  0x1000'1eba: 0x0509          LSLS     R1, R1, #20
  0x1000'1ebc: 0x4770          BX       LR
                 @10001ebe:
  0x1000'1ebe: 0xeb1c 0x0f41   CMN.W    R12, R1, LSL #1
  0x1000'1ec2: 0xd210          BCS.N    @10001ee6
  0x1000'1ec4: 0xea52 0x0643   ORRS.W   R6, R2, R3, LSL #1
  0x1000'1ec8: 0xd00b          BEQ.N    @10001ee2
  0x1000'1eca: 0xebbc 0x0f41   CMP.W    R12, R1, LSL #1
  0x1000'1ece: 0xd805          BHI.N    @10001edc
  0x1000'1ed0: 0x0d0c          LSRS     R4, R1, #20
  0x1000'1ed2: 0x43ab          BICS     R3, R3, R5
  0x1000'1ed4: 0x1e66          SUBS     R6, R4, #1
  0x1000'1ed6: 0x2e34          CMP      R6, #52                ; 0x34
  0x1000'1ed8: 0xddb6          BLE.N    @10001e48
  0x1000'1eda: 0xe002          B.N      @10001ee2
                 @10001edc:
  0x1000'1edc: 0x43ab          BICS     R3, R3, R5
  0x1000'1ede: 0x1880          ADDS     R0, R0, R2
  0x1000'1ee0: 0x4159          ADCS     R1, R1, R3
                 @10001ee2:
  0x1000'1ee2: 0xbc70          POP      {R4-R6}
  0x1000'1ee4: 0x4770          BX       LR
                 @10001ee6:
  0x1000'1ee6: 0xbc70          POP      {R4-R6}
  0x1000'1ee8: 0x4770          BX       LR
  0x1000'1eea: 0x0000          MOVS     R0, R0
                 `.text6`:
                 __aeabi_dmul:
  0x1000'1eec: 0xb530          PUSH     {R4, R5, LR}
  0x1000'1eee: 0xf240 0x7cff   MOVW     R12, #2047             ; 0x7ff
  0x1000'1ef2: 0xea1c 0x5411   ANDS.W   R4, R12, R1, LSR #20
  0x1000'1ef6: 0xbf1d          ITTTE    NE
  0x1000'1ef8: 0xea1c 0x5513   ANDSNE.W R5, R12, R3, LSR #20
  0x1000'1efc: 0x4564          CMPNE    R4, R12
  0x1000'1efe: 0x4565          CMPNE    R5, R12
  0x1000'1f00: 0xe03f          BEQ.N    @10001f82
  0x1000'1f02: 0x1964          ADDS     R4, R4, R5
  0x1000'1f04: 0xea81 0x0c03   EOR.W    R12, R1, R3
  0x1000'1f08: 0xf36f 0x535f   BFC      R3, #21, #11
  0x1000'1f0c: 0xf00c 0x4c00   AND.W    R12, R12, #-2147483648 ; 0x8000'0000
  0x1000'1f10: 0xf443 0x1380   ORR.W    R3, R3, #1048576       ; 0x10'0000
                 @10001f14:
  0x1000'1f14: 0x02c9          LSLS     R1, R1, #11
  0x1000'1f16: 0xf041 0x4100   ORR.W    R1, R1, #-2147483648   ; 0x8000'0000
  0x1000'1f1a: 0xea41 0x5e50   ORR.W    LR, R1, R0, LSR #21
  0x1000'1f1e: 0x02c5          LSLS     R5, R0, #11
                 @10001f20:
  0x1000'1f20: 0x0011          MOVS     R1, R2
  0x1000'1f22: 0xfba5 0x0202   UMULL    R0, R2, R5, R2
  0x1000'1f26: 0x2800          CMP      R0, #0
  0x1000'1f28: 0xf04f 0x0000   MOV.W    R0, #0
  0x1000'1f2c: 0xfbee 0x2001   UMLAL    R2, R0, LR, R1
  0x1000'1f30: 0xf04f 0x0100   MOV.W    R1, #0
  0x1000'1f34: 0xfbe3 0x2105   UMLAL    R2, R1, R3, R5
  0x1000'1f38: 0xbf18          IT       NE
  0x1000'1f3a: 0xf042 0x0201   ORRNE.W  R2, R2, #1
  0x1000'1f3e: 0x1840          ADDS     R0, R0, R1
  0x1000'1f40: 0x2100          MOVS     R1, #0
  0x1000'1f42: 0x4149          ADCS     R1, R1, R1
  0x1000'1f44: 0xfbe3 0x010e   UMLAL    R0, R1, R3, LR
  0x1000'1f48: 0xf5a4 0x6480   SUB.W    R4, R4, #1024          ; 0x400
  0x1000'1f4c: 0x030d          LSLS     R5, R1, #12
  0x1000'1f4e: 0xd202          BCS.N    @10001f56
  0x1000'1f50: 0x1892          ADDS     R2, R2, R2
  0x1000'1f52: 0x4140          ADCS     R0, R0, R0
  0x1000'1f54: 0x4149          ADCS     R1, R1, R1
                 @10001f56:
  0x1000'1f56: 0xf154 0x0401   ADCS.W   R4, R4, #1
  0x1000'1f5a: 0xdd70          BLE.N    @1000203e
  0x1000'1f5c: 0x0845          LSRS     R5, R0, #1
  0x1000'1f5e: 0xf172 0x4200   SBCS.W   R2, R2, #-2147483648   ; 0x8000'0000
  0x1000'1f62: 0xf150 0x0000   ADCS.W   R0, R0, #0
  0x1000'1f66: 0xeb51 0x5104   ADCS.W   R1, R1, R4, LSL #20
  0x1000'1f6a: 0xf5a1 0x1180   SUB.W    R1, R1, #1048576       ; 0x10'0000
  0x1000'1f6e: 0xd402          BMI.N    @10001f76
  0x1000'1f70: 0xea41 0x010c   ORR.W    R1, R1, R12
  0x1000'1f74: 0xbd30          POP      {R4, R5, PC}
                 @10001f76:
  0x1000'1f76: 0xf240 0x7eff   MOVW     LR, #2047              ; 0x7ff
  0x1000'1f7a: 0xea4c 0x510e   ORR.W    R1, R12, LR, LSL #20
  0x1000'1f7e: 0x2000          MOVS     R0, #0
  0x1000'1f80: 0xbd30          POP      {R4, R5, PC}
                 @10001f82:
  0x1000'1f82: 0xea0c 0x5513   AND.W    R5, R12, R3, LSR #20
  0x1000'1f86: 0x4564          CMP      R4, R12
  0x1000'1f88: 0xbf18          IT       NE
  0x1000'1f8a: 0x4565          CMPNE    R5, R12
  0x1000'1f8c: 0xea81 0x0c03   EOR.W    R12, R1, R3
  0x1000'1f90: 0xf00c 0x4c00   AND.W    R12, R12, #-2147483648 ; 0x8000'0000
  0x1000'1f94: 0xd041          BEQ.N    @1000201a
  0x1000'1f96: 0xea50 0x0e41   ORRS.W   LR, R0, R1, LSL #1
  0x1000'1f9a: 0xbf1c          ITT      NE
  0x1000'1f9c: 0xea52 0x0e43   ORRSNE.W LR, R2, R3, LSL #1
  0x1000'1fa0: 0xe002          BNE.N    @10001fa8
                 @10001fa2:
  0x1000'1fa2: 0x4661          MOV      R1, R12
  0x1000'1fa4: 0x2000          MOVS     R0, #0
                 @10001fa6:
  0x1000'1fa6: 0xbd30          POP      {R4, R5, PC}
                 @10001fa8:
  0x1000'1fa8: 0x4224          TST      R4, R4
  0x1000'1faa: 0x442c          ADD      R4, R4, R5
  0x1000'1fac: 0xd11b          BNE.N    @10001fe6
  0x1000'1fae: 0xea5f 0x0e05   MOVS.W   LR, R5
  0x1000'1fb2: 0xd0f6          BEQ.N    @10001fa2
  0x1000'1fb4: 0x0309          LSLS     R1, R1, #12
  0x1000'1fb6: 0xbf02          ITTT     EQ
  0x1000'1fb8: 0x4601          MOVEQ    R1, R0
  0x1000'1fba: 0x2000          MOVEQ    R0, #0
  0x1000'1fbc: 0xf1ae 0x0e14   SUBEQ.W  LR, LR, #20            ; 0x14
  0x1000'1fc0: 0xfab1 0xf581   CLZ      R5, R1
  0x1000'1fc4: 0xebae 0x0405   SUB.W    R4, LR, R5
  0x1000'1fc8: 0xfa01 0xfe05   LSL.W    LR, R1, R5
  0x1000'1fcc: 0x350c          ADDS     R5, R5, #12            ; 0xc
  0x1000'1fce: 0xf1c5 0x0120   RSB.W    R1, R5, #32            ; 0x20
  0x1000'1fd2: 0xfa00 0xf505   LSL.W    R5, R0, R5
  0x1000'1fd6: 0x40c8          LSRS     R0, R0, R1
  0x1000'1fd8: 0xea4e 0x0e00   ORR.W    LR, LR, R0
  0x1000'1fdc: 0xf36f 0x535f   BFC      R3, #21, #11
  0x1000'1fe0: 0xf443 0x1380   ORR.W    R3, R3, #1048576       ; 0x10'0000
  0x1000'1fe4: 0xe79c          B.N      @10001f20
                 @10001fe6:
  0x1000'1fe6: 0xf033 0x4300   BICS.W   R3, R3, #-2147483648   ; 0x8000'0000
  0x1000'1fea: 0xfab3 0xf583   CLZ      R5, R3
  0x1000'1fee: 0xbf04          ITT      EQ
  0x1000'1ff0: 0xfab2 0xfe82   CLZEQ    LR, R2
  0x1000'1ff4: 0x4475          ADDEQ    R5, R5, LR
  0x1000'1ff6: 0x3d0b          SUBS     R5, R5, #11            ; 0xb
  0x1000'1ff8: 0x1b64          SUBS     R4, R4, R5
  0x1000'1ffa: 0xf1b5 0x0e20   SUBS.W   LR, R5, #32            ; 0x20
  0x1000'1ffe: 0xbf2f          ITEEE    CS
  0x1000'2000: 0xfa02 0xf30e   LSLCS.W  R3, R2, LR
  0x1000'2004: 0x40ab          LSLCC    R3, R3, R5
  0x1000'2006: 0xf1c5 0x0e20   RSBCC.W  LR, R5, #32            ; 0x20
  0x1000'200a: 0xfa22 0xfe0e   LSRCC.W  LR, R2, LR
  0x1000'200e: 0xbf38          IT       CC
  0x1000'2010: 0xea43 0x030e   ORRCC.W  R3, R3, LR
  0x1000'2014: 0x40aa          LSLS     R2, R2, R5
  0x1000'2016: 0x1c64          ADDS     R4, R4, #1
  0x1000'2018: 0xe77c          B.N      @10001f14
                 @1000201a:
  0x1000'201a: 0xea50 0x0e41   ORRS.W   LR, R0, R1, LSL #1
  0x1000'201e: 0xbf14          ITE      NE
  0x1000'2020: 0xea52 0x0e43   ORRSNE.W LR, R2, R3, LSL #1
  0x1000'2024: 0xf06f 0x0100   MVNEQ.W  R1, #0
  0x1000'2028: 0xf44f 0x1500   MOV.W    R5, #2097152           ; 0x20'0000
  0x1000'202c: 0xeb15 0x0f43   CMN.W    R5, R3, LSL #1
  0x1000'2030: 0xbf8e          ITEE     HI
  0x1000'2032: 0x4619          MOVHI    R1, R3
  0x1000'2034: 0xeb15 0x0f41   CMNLS.W  R5, R1, LSL #1
  0x1000'2038: 0xe79d          BLS.N    @10001f76
  0x1000'203a: 0xd8b4          BHI.N    @10001fa6
  0x1000'203c: 0xbd30          POP      {R4, R5, PC}
                 @1000203e:
  0x1000'203e: 0xf1d4 0x0401   RSBS.W   R4, R4, #1
  0x1000'2042: 0xf1b4 0x0520   SUBS.W   R5, R4, #32            ; 0x20
  0x1000'2046: 0xda0f          BGE.N    @10002068
  0x1000'2048: 0xf1c4 0x0520   RSB.W    R5, R4, #32            ; 0x20
  0x1000'204c: 0x0852          LSRS     R2, R2, #1
  0x1000'204e: 0xbf28          IT       CS
  0x1000'2050: 0xf042 0x0201   ORRCS.W  R2, R2, #1
  0x1000'2054: 0xfa10 0xfe05   LSLS.W   LR, R0, R5
  0x1000'2058: 0xfa01 0xf505   LSL.W    R5, R1, R5
  0x1000'205c: 0x4472          ADD      R2, R2, LR
  0x1000'205e: 0xbfe2          ITTT     AL
  0x1000'2060: 0x40e0          LSRAL    R0, R0, R4
  0x1000'2062: 0x4328          ORRAL    R0, R0, R5
  0x1000'2064: 0x40e1          LSRAL    R1, R1, R4
  0x1000'2066: 0xe00f          B.N      @10002088
                 @10002068:
  0x1000'2068: 0x2c35          CMP      R4, #53                ; 0x35
  0x1000'206a: 0xdc9a          BGT.N    @10001fa2
  0x1000'206c: 0xf1c5 0x0420   RSB.W    R4, R5, #32            ; 0x20
  0x1000'2070: 0xea52 0x0240   ORRS.W   R2, R2, R0, LSL #1
  0x1000'2074: 0xfa20 0xf205   LSR.W    R2, R0, R5
  0x1000'2078: 0xbf18          IT       NE
  0x1000'207a: 0xf042 0x0201   ORRNE.W  R2, R2, #1
  0x1000'207e: 0xfa31 0xf005   LSRS.W   R0, R1, R5
  0x1000'2082: 0x40a1          LSLS     R1, R1, R4
  0x1000'2084: 0x430a          ORRS     R2, R2, R1
  0x1000'2086: 0x2100          MOVS     R1, #0
                 @10002088:
  0x1000'2088: 0xf172 0x4200   SBCS.W   R2, R2, #-2147483648   ; 0x8000'0000
  0x1000'208c: 0xf150 0x0000   ADCS.W   R0, R0, #0
  0x1000'2090: 0xeb51 0x010c   ADCS.W   R1, R1, R12
  0x1000'2094: 0xbd30          POP      {R4, R5, PC}
  0x1000'2096: 0x0000          MOVS     R0, R0
                 `.text6`:
                 __aeabi_d2uiz:
  0x1000'2098: 0x0d40          LSRS     R0, R0, #21
  0x1000'209a: 0xf240 0x4c1e   MOVW     R12, #1054             ; 0x41e
  0x1000'209e: 0xea40 0x20c1   ORR.W    R0, R0, R1, LSL #11
  0x1000'20a2: 0xebbc 0x5c11   SUBS.W   R12, R12, R1, LSR #20
  0x1000'20a6: 0xf040 0x4000   ORR.W    R0, R0, #-2147483648   ; 0x8000'0000
  0x1000'20aa: 0xd403          BMI.N    @100020b4
  0x1000'20ac: 0xf38c 0x0107   USAT     R1, #7, R12
  0x1000'20b0: 0x40c8          LSRS     R0, R0, R1
  0x1000'20b2: 0x4770          BX       LR
                 @100020b4:
  0x1000'20b4: 0xea6f 0x70e1   MVN.W    R0, R1, ASR #31
  0x1000'20b8: 0x4770          BX       LR
  0x1000'20ba: 0x0000          MOVS     R0, R0
                 `.text6`:
                 __aeabi_ui2d:
  0x1000'20bc: 0xb150          CBZ      R0, @100020d4
  0x1000'20be: 0xfab0 0xf180   CLZ      R1, R0
  0x1000'20c2: 0x4088          LSLS     R0, R0, R1
  0x1000'20c4: 0x1cc9          ADDS     R1, R1, #3
  0x1000'20c6: 0xf5c1 0x6184   RSB.W    R1, R1, #1056          ; 0x420
  0x1000'20ca: 0x0509          LSLS     R1, R1, #20
  0x1000'20cc: 0xeb01 0x21d0   ADD.W    R1, R1, R0, LSR #11
  0x1000'20d0: 0x0540          LSLS     R0, R0, #21
  0x1000'20d2: 0x4770          BX       LR
                 @100020d4:
  0x1000'20d4: 0x4601          MOV      R1, R0
  0x1000'20d6: 0x4770          BX       LR
                 `.text6`:
                 __aeabi_ddiv:
  0x1000'20d8: 0xb5f0          PUSH     {R4-R7, LR}
  0x1000'20da: 0xf240 0x75ff   MOVW     R5, #2047              ; 0x7ff
  0x1000'20de: 0xea81 0x0c03   EOR.W    R12, R1, R3
  0x1000'20e2: 0xf00c 0x4c00   AND.W    R12, R12, #-2147483648 ; 0x8000'0000
  0x1000'20e6: 0xea15 0x5411   ANDS.W   R4, R5, R1, LSR #20
  0x1000'20ea: 0xbf1d          ITTTE    NE
  0x1000'20ec: 0xea15 0x5713   ANDSNE.W R7, R5, R3, LSR #20
  0x1000'20f0: 0x42ac          CMPNE    R4, R5
  0x1000'20f2: 0x42af          CMPNE    R7, R5
  0x1000'20f4: 0xe0e5          BEQ.N    @100022c2
  0x1000'20f6: 0x41bc          SBCS     R4, R4, R7
                 @100020f8:
  0x1000'20f8: 0xf3c1 0x0113   UBFX     R1, R1, #0, #20
  0x1000'20fc: 0xf3c3 0x0313   UBFX     R3, R3, #0, #20
  0x1000'2100: 0x1a80          SUBS     R0, R0, R2
  0x1000'2102: 0x4199          SBCS     R1, R1, R3
  0x1000'2104: 0xf443 0x1380   ORR.W    R3, R3, #1048576       ; 0x10'0000
  0x1000'2108: 0xd204          BCS.N    @10002114
  0x1000'210a: 0x1e64          SUBS     R4, R4, #1
  0x1000'210c: 0x1800          ADDS     R0, R0, R0
  0x1000'210e: 0x4149          ADCS     R1, R1, R1
  0x1000'2110: 0x1880          ADDS     R0, R0, R2
  0x1000'2112: 0x4159          ADCS     R1, R1, R3
                 @10002114:
  0x1000'2114: 0x02c9          LSLS     R1, R1, #11
  0x1000'2116: 0xea41 0x5150   ORR.W    R1, R1, R0, LSR #21
  0x1000'211a: 0xfbb1 0xf6f3   UDIV     R6, R1, R3
  0x1000'211e: 0xfb03 0x1116   MLS      R1, R3, R6, R1
  0x1000'2122: 0xfba2 0x7506   UMULL    R7, R5, R2, R6
  0x1000'2126: 0xebd7 0x20c0   RSBS.W   R0, R7, R0, LSL #11
  0x1000'212a: 0x41a9          SBCS     R1, R1, R5
  0x1000'212c: 0xd202          BCS.N    @10002134
  0x1000'212e: 0x1e76          SUBS     R6, R6, #1
  0x1000'2130: 0x1880          ADDS     R0, R0, R2
  0x1000'2132: 0x4159          ADCS     R1, R1, R3
                 @10002134:
  0x1000'2134: 0x02c9          LSLS     R1, R1, #11
  0x1000'2136: 0xea41 0x5150   ORR.W    R1, R1, R0, LSR #21
  0x1000'213a: 0xfbb1 0xfef3   UDIV     LR, R1, R3
  0x1000'213e: 0xfb03 0x111e   MLS      R1, R3, LR, R1
  0x1000'2142: 0xfba2 0x750e   UMULL    R7, R5, R2, LR
  0x1000'2146: 0xebd7 0x20c0   RSBS.W   R0, R7, R0, LSL #11
  0x1000'214a: 0x41a9          SBCS     R1, R1, R5
  0x1000'214c: 0xd203          BCS.N    @10002156
  0x1000'214e: 0xf1ae 0x0e01   SUB.W    LR, LR, #1
  0x1000'2152: 0x1880          ADDS     R0, R0, R2
  0x1000'2154: 0x4159          ADCS     R1, R1, R3
                 @10002156:
  0x1000'2156: 0x0289          LSLS     R1, R1, #10
  0x1000'2158: 0xea41 0x5190   ORR.W    R1, R1, R0, LSR #22
  0x1000'215c: 0x0576          LSLS     R6, R6, #21
  0x1000'215e: 0xea46 0x2e8e   ORR.W    LR, R6, LR, LSL #10
  0x1000'2162: 0xfbb1 0xf6f3   UDIV     R6, R1, R3
  0x1000'2166: 0xfb03 0x1116   MLS      R1, R3, R6, R1
  0x1000'216a: 0xfba2 0x7506   UMULL    R7, R5, R2, R6
  0x1000'216e: 0xebd7 0x2080   RSBS.W   R0, R7, R0, LSL #10
  0x1000'2172: 0x41a9          SBCS     R1, R1, R5
  0x1000'2174: 0xd202          BCS.N    @1000217c
  0x1000'2176: 0x1e76          SUBS     R6, R6, #1
  0x1000'2178: 0x1880          ADDS     R0, R0, R2
  0x1000'217a: 0x4159          ADCS     R1, R1, R3
                 @1000217c:
  0x1000'217c: 0x02c9          LSLS     R1, R1, #11
  0x1000'217e: 0xea41 0x5150   ORR.W    R1, R1, R0, LSR #21
  0x1000'2182: 0xea4e 0x0e06   ORR.W    LR, LR, R6
  0x1000'2186: 0xfbb1 0xf6f3   UDIV     R6, R1, R3
  0x1000'218a: 0xfb03 0x1116   MLS      R1, R3, R6, R1
  0x1000'218e: 0xfba2 0x7506   UMULL    R7, R5, R2, R6
  0x1000'2192: 0xebd7 0x20c0   RSBS.W   R0, R7, R0, LSL #11
  0x1000'2196: 0x41a9          SBCS     R1, R1, R5
  0x1000'2198: 0xd202          BCS.N    @100021a0
  0x1000'219a: 0x1e76          SUBS     R6, R6, #1
  0x1000'219c: 0x1880          ADDS     R0, R0, R2
  0x1000'219e: 0x4159          ADCS     R1, R1, R3
                 @100021a0:
  0x1000'21a0: 0x02c9          LSLS     R1, R1, #11
  0x1000'21a2: 0xea41 0x5150   ORR.W    R1, R1, R0, LSR #21
  0x1000'21a6: 0xfbb1 0xf7f3   UDIV     R7, R1, R3
  0x1000'21aa: 0xfb03 0x1117   MLS      R1, R3, R7, R1
  0x1000'21ae: 0xfba2 0x3507   UMULL    R3, R5, R2, R7
  0x1000'21b2: 0xebd3 0x20c0   RSBS.W   R0, R3, R0, LSL #11
  0x1000'21b6: 0x41a9          SBCS     R1, R1, R5
  0x1000'21b8: 0xf167 0x0700   SBC.W    R7, R7, #0
  0x1000'21bc: 0xbf0c          ITE      EQ
  0x1000'21be: 0x4200          TSTEQ    R0, R0
  0x1000'21c0: 0xf047 0x0701   ORRNE.W  R7, R7, #1
  0x1000'21c4: 0xf366 0x27d5   BFI      R7, R6, #11, #11
  0x1000'21c8: 0xea4f 0x311e   LSR.W    R1, LR, #12
  0x1000'21cc: 0x08b8          LSRS     R0, R7, #2
  0x1000'21ce: 0xf514 0x6480   ADDS.W   R4, R4, #1024          ; 0x400
  0x1000'21d2: 0xdd12          BLE.N    @100021fa
  0x1000'21d4: 0x07bd          LSLS     R5, R7, #30
  0x1000'21d6: 0xf175 0x4200   SBCS.W   R2, R5, #-2147483648   ; 0x8000'0000
  0x1000'21da: 0xeb50 0x500e   ADCS.W   R0, R0, LR, LSL #20
  0x1000'21de: 0xeb51 0x5104   ADCS.W   R1, R1, R4, LSL #20
  0x1000'21e2: 0xf511 0x1f80   CMN.W    R1, #1048576           ; 0x10'0000
  0x1000'21e6: 0xbf5c          ITT      PL
  0x1000'21e8: 0xea41 0x010c   ORRPL.W  R1, R1, R12
  0x1000'21ec: 0xbdf0          POPPL    {R4-R7, PC}
  0x1000'21ee: 0xf04c 0x617f   ORR.W    R1, R12, #267386880    ; 0xff0'0000
  0x1000'21f2: 0xf041 0x41e0   ORR.W    R1, R1, #1879048192    ; 0x7000'0000
  0x1000'21f6: 0x2000          MOVS     R0, #0
  0x1000'21f8: 0xbdf0          POP      {R4-R7, PC}
                 @100021fa:
  0x1000'21fa: 0x07bd          LSLS     R5, R7, #30
  0x1000'21fc: 0x086d          LSRS     R5, R5, #1
  0x1000'21fe: 0xea40 0x500e   ORR.W    R0, R0, LR, LSL #20
  0x1000'2202: 0xf441 0x1180   ORR.W    R1, R1, #1048576       ; 0x10'0000
  0x1000'2206: 0xf1d4 0x0401   RSBS.W   R4, R4, #1
  0x1000'220a: 0xf1b4 0x0620   SUBS.W   R6, R4, #32            ; 0x20
  0x1000'220e: 0xda0a          BGE.N    @10002226
  0x1000'2210: 0xf1c4 0x0620   RSB.W    R6, R4, #32            ; 0x20
  0x1000'2214: 0x0002          MOVS     R2, R0
  0x1000'2216: 0x40e0          LSRS     R0, R0, R4
  0x1000'2218: 0xfa01 0xf306   LSL.W    R3, R1, R6
  0x1000'221c: 0x40e1          LSRS     R1, R1, R4
  0x1000'221e: 0x4318          ORRS     R0, R0, R3
  0x1000'2220: 0x40b2          LSLS     R2, R2, R6
  0x1000'2222: 0x4315          ORRS     R5, R5, R2
  0x1000'2224: 0xe00e          B.N      @10002244
                 @10002226:
  0x1000'2226: 0x2c34          CMP      R4, #52                ; 0x34
  0x1000'2228: 0xdc13          BGT.N    @10002252
  0x1000'222a: 0xf1c6 0x0420   RSB.W    R4, R6, #32            ; 0x20
  0x1000'222e: 0xea45 0x0540   ORR.W    R5, R5, R0, LSL #1
  0x1000'2232: 0x086d          LSRS     R5, R5, #1
  0x1000'2234: 0xfa20 0xf206   LSR.W    R2, R0, R6
  0x1000'2238: 0x4315          ORRS     R5, R5, R2
  0x1000'223a: 0xfa21 0xf006   LSR.W    R0, R1, R6
  0x1000'223e: 0x40a1          LSLS     R1, R1, R4
  0x1000'2240: 0x430d          ORRS     R5, R5, R1
  0x1000'2242: 0x2100          MOVS     R1, #0
                 @10002244:
  0x1000'2244: 0xf175 0x4200   SBCS.W   R2, R5, #-2147483648   ; 0x8000'0000
  0x1000'2248: 0xf150 0x0000   ADCS.W   R0, R0, #0
  0x1000'224c: 0xeb51 0x010c   ADCS.W   R1, R1, R12
  0x1000'2250: 0xbdf0          POP      {R4-R7, PC}
                 @10002252:
  0x1000'2252: 0x2000          MOVS     R0, #0
  0x1000'2254: 0xea5f 0x010c   MOVS.W   R1, R12
  0x1000'2258: 0xbdf0          POP      {R4-R7, PC}
                 @1000225a:
  0x1000'225a: 0xb9cf          CBNZ     R7, @10002290
  0x1000'225c: 0x1892          ADDS     R2, R2, R2
  0x1000'225e: 0x415b          ADCS     R3, R3, R3
  0x1000'2260: 0xfab3 0xf783   CLZ      R7, R3
  0x1000'2264: 0xbf04          ITT      EQ
  0x1000'2266: 0xfab2 0xf682   CLZEQ    R6, R2
  0x1000'226a: 0x19bf          ADDEQ    R7, R7, R6
  0x1000'226c: 0x3f0b          SUBS     R7, R7, #11            ; 0xb
  0x1000'226e: 0xf1b7 0x0620   SUBS.W   R6, R7, #32            ; 0x20
  0x1000'2272: 0xbf2f          ITEEE    CS
  0x1000'2274: 0xfa02 0xf306   LSLCS.W  R3, R2, R6
  0x1000'2278: 0x40bb          LSLCC    R3, R3, R7
  0x1000'227a: 0xf1c7 0x0620   RSBCC.W  R6, R7, #32            ; 0x20
  0x1000'227e: 0xfa22 0xf606   LSRCC.W  R6, R2, R6
  0x1000'2282: 0xbf38          IT       CC
  0x1000'2284: 0x4333          ORRCC    R3, R3, R6
  0x1000'2286: 0x40ba          LSLS     R2, R2, R7
  0x1000'2288: 0xb11c          CBZ      R4, @10002292
  0x1000'228a: 0x19e4          ADDS     R4, R4, R7
  0x1000'228c: 0x1e64          SUBS     R4, R4, #1
  0x1000'228e: 0xe733          B.N      @100020f8
                 @10002290:
  0x1000'2290: 0x427f          RSBS     R7, R7, #0
                 @10002292:
  0x1000'2292: 0xf031 0x4100   BICS.W   R1, R1, #-2147483648   ; 0x8000'0000
  0x1000'2296: 0xfab1 0xf481   CLZ      R4, R1
  0x1000'229a: 0xbf04          ITT      EQ
  0x1000'229c: 0xfab0 0xf680   CLZEQ    R6, R0
  0x1000'22a0: 0x19a4          ADDEQ    R4, R4, R6
  0x1000'22a2: 0x3c0b          SUBS     R4, R4, #11            ; 0xb
  0x1000'22a4: 0xf1b4 0x0620   SUBS.W   R6, R4, #32            ; 0x20
  0x1000'22a8: 0xbf2f          ITEEE    CS
  0x1000'22aa: 0xfa00 0xf106   LSLCS.W  R1, R0, R6
  0x1000'22ae: 0x40a1          LSLCC    R1, R1, R4
  0x1000'22b0: 0xf1c4 0x0620   RSBCC.W  R6, R4, #32            ; 0x20
  0x1000'22b4: 0xfa20 0xf606   LSRCC.W  R6, R0, R6
  0x1000'22b8: 0xbf38          IT       CC
  0x1000'22ba: 0x4331          ORRCC    R1, R1, R6
  0x1000'22bc: 0x40a0          LSLS     R0, R0, R4
  0x1000'22be: 0x1b3c          SUBS     R4, R7, R4
  0x1000'22c0: 0xe71a          B.N      @100020f8
                 @100022c2:
  0x1000'22c2: 0x42ac          CMP      R4, R5
  0x1000'22c4: 0xbf1a          ITTE     NE
  0x1000'22c6: 0xea05 0x5713   ANDNE.W  R7, R5, R3, LSR #20
  0x1000'22ca: 0x42af          CMPNE    R7, R5
  0x1000'22cc: 0xe012          BEQ.N    @100022f4
  0x1000'22ce: 0xea50 0x0641   ORRS.W   R6, R0, R1, LSL #1
  0x1000'22d2: 0xbf1c          ITT      NE
  0x1000'22d4: 0xea52 0x0643   ORRSNE.W R6, R2, R3, LSL #1
  0x1000'22d8: 0xe7bf          BNE.N    @1000225a
  0x1000'22da: 0xea50 0x0741   ORRS.W   R7, R0, R1, LSL #1
  0x1000'22de: 0x4630          MOV      R0, R6
  0x1000'22e0: 0x4661          MOV      R1, R12
  0x1000'22e2: 0xbf1c          ITT      NE
  0x1000'22e4: 0xea41 0x5105   ORRNE.W  R1, R1, R5, LSL #20
  0x1000'22e8: 0xbdf0          POPNE    {R4-R7, PC}
  0x1000'22ea: 0xea52 0x0c43   ORRS.W   R12, R2, R3, LSL #1
  0x1000'22ee: 0xbf08          IT       EQ
  0x1000'22f0: 0x43c1          MVNEQ    R1, R0
  0x1000'22f2: 0xbdf0          POP      {R4-R7, PC}
                 @100022f4:
  0x1000'22f4: 0x2000          MOVS     R0, #0
  0x1000'22f6: 0xf44f 0x1600   MOV.W    R6, #2097152           ; 0x20'0000
  0x1000'22fa: 0xeb16 0x0f41   CMN.W    R6, R1, LSL #1
  0x1000'22fe: 0xbf98          IT       LS
  0x1000'2300: 0xeb16 0x0f43   CMNLS.W  R6, R3, LSL #1
  0x1000'2304: 0xbf08          IT       EQ
  0x1000'2306: 0xeb16 0x0f41   CMNEQ.W  R6, R1, LSL #1
  0x1000'230a: 0xbf24          ITT      CS
  0x1000'230c: 0x43c1          MVNCS    R1, R0
  0x1000'230e: 0xe005          BCS.N    @1000231c
  0x1000'2310: 0xeb16 0x0f43   CMN.W    R6, R3, LSL #1
  0x1000'2314: 0xbf0c          ITE      EQ
  0x1000'2316: 0x4661          MOVEQ    R1, R12
  0x1000'2318: 0xea4c 0x5105   ORRNE.W  R1, R12, R5, LSL #20
                 @1000231c:
  0x1000'231c: 0xbdf0          POP      {R4-R7, PC}
  0x1000'231e: 0x0000          MOVS     R0, R0
                 `.text6`:
                 __aeabi_ldiv0:
  0x1000'2320: 0x4770          BX       LR
  0x1000'2322: 0x0000          MOVS     R0, R0
                 `.text_3`:
                 _tx_thread_system_ni_resume:
  // VOID  _tx_thread_system_ni_resume(TX_THREAD *thread_ptr)
  // {
  0x1000'2324: 0xe92d 0x4ffe   PUSH.W   {R1-R11, LR}
  0x1000'2328: 0x0004          MOVS     R4, R0
  //     if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
  0x1000'232a: 0x6e60          LDR      R0, [R4, #0x64]
  0x1000'232c: 0x2800          CMP      R0, #0
  0x1000'232e: 0xd003          BEQ.N    ??_tx_thread_system_ni_resume_0
                                                               ; 0x1000'2338
  //         _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
  0x1000'2330: 0xf114 0x004c   ADDS.W   R0, R4, #76            ; 0x4c
  0x1000'2334: 0xf000 0xf9b4   BL       _tx_timer_system_deactivate
                                                               ; 0x1000'26a0
                 ??_tx_thread_system_ni_resume_0:
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'2338: 0xf3ef 0x8710   MRS      R7, PRIMASK
  //     return(posture);
  0x1000'233c: 0xb672          CPSID    i
  //     return(int_posture);
  0x1000'233e: 0x2c00          CMP      R4, #0
  0x1000'2340: 0xd039          BEQ.N    ??_tx_thread_system_ni_resume_1
                                                               ; 0x1000'23b6
  0x1000'2342: 0x6821          LDR      R1, [R4]
  0x1000'2344: 0x48c9          LDR.N    R0, ??DataTable1_2     ; 0x5448'5244
  0x1000'2346: 0x4281          CMP      R1, R0
  0x1000'2348: 0xd135          BNE.N    ??_tx_thread_system_ni_resume_1
                                                               ; 0x1000'23b6
  //     TX_THREAD_STACK_CHECK(thread_ptr)
  0x1000'234a: 0x68a1          LDR      R1, [R4, #0x8]
  0x1000'234c: 0xf8d4 0x00cc   LDR.W    R0, [R4, #0xcc]
  0x1000'2350: 0x4281          CMP      R1, R0
  0x1000'2352: 0xd202          BCS.N    ??_tx_thread_system_ni_resume_2
                                                               ; 0x1000'235a
  //     TX_THREAD_STACK_CHECK(thread_ptr)
  0x1000'2354: 0x68a0          LDR      R0, [R4, #0x8]
  0x1000'2356: 0xf8c4 0x00cc   STR.W    R0, [R4, #0xcc]
                 ??_tx_thread_system_ni_resume_2:
  //     TX_THREAD_STACK_CHECK(thread_ptr)
  0x1000'235a: 0x68e0          LDR      R0, [R4, #0xc]
  0x1000'235c: 0x6801          LDR      R1, [R0]
  0x1000'235e: 0xf8d4 0x00d4   LDR.W    R0, [R4, #0xd4]
  0x1000'2362: 0x4281          CMP      R1, R0
  0x1000'2364: 0xd10b          BNE.N    ??_tx_thread_system_ni_resume_3
                                                               ; 0x1000'237e
  0x1000'2366: 0x6920          LDR      R0, [R4, #0x10]
  0x1000'2368: 0xf8d0 0x1001   LDR.W    R1, [R0, #0x1]
  0x1000'236c: 0xf8d4 0x00d4   LDR.W    R0, [R4, #0xd4]
  0x1000'2370: 0x4281          CMP      R1, R0
  0x1000'2372: 0xd104          BNE.N    ??_tx_thread_system_ni_resume_3
                                                               ; 0x1000'237e
  0x1000'2374: 0xf8d4 0x10cc   LDR.W    R1, [R4, #0xcc]
  0x1000'2378: 0x68e0          LDR      R0, [R4, #0xc]
  0x1000'237a: 0x4281          CMP      R1, R0
  0x1000'237c: 0xd209          BCS.N    ??_tx_thread_system_ni_resume_4
                                                               ; 0x1000'2392
                 ??_tx_thread_system_ni_resume_3:
  //     TX_THREAD_STACK_CHECK(thread_ptr)
  0x1000'237e: 0x46ba          MOV      R10, R7
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'2380: 0xf38a 0x8810   MSR      PRIMASK, R10
  // }
  0x1000'2384: 0x0020          MOVS     R0, R4
  0x1000'2386: 0xf000 0xf9a7   BL       _tx_thread_stack_error_handler
                                                               ; 0x1000'26d8
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'238a: 0xf3ef 0x8010   MRS      R0, PRIMASK
  //     return(posture);
  0x1000'238e: 0xb672          CPSID    i
  //     return(int_posture);
  0x1000'2390: 0x0007          MOVS     R7, R0
                 ??_tx_thread_system_ni_resume_4:
  //     TX_THREAD_STACK_CHECK(thread_ptr)
  0x1000'2392: 0xf8d4 0x00cc   LDR.W    R0, [R4, #0xcc]
  0x1000'2396: 0xf850 0x1c04   LDR.W    R1, [R0, #-0x4]
  0x1000'239a: 0xf8d4 0x00d4   LDR.W    R0, [R4, #0xd4]
  0x1000'239e: 0x4281          CMP      R1, R0
  0x1000'23a0: 0xd009          BEQ.N    ??_tx_thread_system_ni_resume_1
                                                               ; 0x1000'23b6
  //     TX_THREAD_STACK_CHECK(thread_ptr)
  0x1000'23a2: 0x46ba          MOV      R10, R7
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'23a4: 0xf38a 0x8810   MSR      PRIMASK, R10
  // }
  0x1000'23a8: 0x0020          MOVS     R0, R4
  0x1000'23aa: 0xf000 0xf9a7   BL       _tx_thread_stack_analyze
                                                               ; 0x1000'26fc
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'23ae: 0xf3ef 0x8010   MRS      R0, PRIMASK
  //     return(posture);
  0x1000'23b2: 0xb672          CPSID    i
  //     return(int_posture);
  0x1000'23b4: 0x0007          MOVS     R7, R0
                 ??_tx_thread_system_ni_resume_1:
  //     TX_THREAD_STACK_CHECK(thread_ptr)
  0x1000'23b6: 0x0039          MOVS     R1, R7
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'23b8: 0xf381 0x8810   MSR      PRIMASK, R1
  // }
  0x1000'23bc: 0x6b20          LDR      R0, [R4, #0x30]
  0x1000'23be: 0x2800          CMP      R0, #0
  0x1000'23c0: 0xf000 0x80d7   BEQ.W    ??_tx_thread_system_ni_resume_5
                                                               ; 0x1000'2572
  //         if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
  0x1000'23c4: 0x6b60          LDR      R0, [R4, #0x34]
  0x1000'23c6: 0x2800          CMP      R0, #0
  0x1000'23c8: 0xf040 0x80cf   BNE.W    ??_tx_thread_system_ni_resume_6
                                                               ; 0x1000'256a
  //             thread_ptr -> tx_thread_state =  TX_READY;
  0x1000'23cc: 0x2000          MOVS     R0, #0
  0x1000'23ce: 0x6320          STR      R0, [R4, #0x30]
  //             priority =  thread_ptr -> tx_thread_priority;
  0x1000'23d0: 0x6ae0          LDR      R0, [R4, #0x2c]
  0x1000'23d2: 0x4681          MOV      R9, R0
  //             _tx_thread_performance_resume_count++;
  0x1000'23d4: 0x49a4          LDR.N    R1, ??DataTable1_1     ; _tx_thread_performance_resume_count
  0x1000'23d6: 0x6808          LDR      R0, [R1]
  0x1000'23d8: 0x1c40          ADDS     R0, R0, #1
  0x1000'23da: 0x6008          STR      R0, [R1]
  //             thread_ptr -> tx_thread_performance_resume_count++;
  0x1000'23dc: 0xf8d4 0x00a4   LDR.W    R0, [R4, #0xa4]
  0x1000'23e0: 0x1c40          ADDS     R0, R0, #1
  0x1000'23e2: 0xf8c4 0x00a4   STR.W    R0, [R4, #0xa4]
  //             head_ptr =  _tx_thread_priority_list[priority];
  0x1000'23e6: 0x49a2          LDR.N    R1, ??DataTable1_3     ; _tx_thread_priority_list
  0x1000'23e8: 0xf851 0x0029   LDR.W    R0, [R1, R9, LSL #2]
  0x1000'23ec: 0x0005          MOVS     R5, R0
  //             if (head_ptr == TX_NULL)
  0x1000'23ee: 0x2d00          CMP      R5, #0
  0x1000'23f0: 0xf040 0x80b2   BNE.W    ??_tx_thread_system_ni_resume_7
                                                               ; 0x1000'2558
  //                 _tx_thread_priority_list[priority] =       thread_ptr;
  0x1000'23f4: 0xf841 0x4029   STR.W    R4, [R1, R9, LSL #2]
  //                 thread_ptr -> tx_thread_ready_next =       thread_ptr;
  0x1000'23f8: 0x6224          STR      R4, [R4, #0x20]
  //                 thread_ptr -> tx_thread_ready_previous =   thread_ptr;
  0x1000'23fa: 0x6264          STR      R4, [R4, #0x24]
  //                 TX_MOD32_BIT_SET(priority, priority_bit)
  0x1000'23fc: 0x2001          MOVS     R0, #1
  0x1000'23fe: 0xfa10 0xf009   LSLS.W   R0, R0, R9
  0x1000'2402: 0x9001          STR      R0, [SP, #0x4]
  //                 _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
  0x1000'2404: 0x4a9b          LDR.N    R2, ??DataTable1_4     ; _tx_thread_priority_maps
  0x1000'2406: 0x6811          LDR      R1, [R2]
  0x1000'2408: 0x9801          LDR      R0, [SP, #0x4]
  0x1000'240a: 0x4301          ORRS     R1, R1, R0
  0x1000'240c: 0x6011          STR      R1, [R2]
  //                 if (priority < _tx_thread_highest_priority)
  0x1000'240e: 0x499a          LDR.N    R1, ??DataTable1_5     ; _tx_thread_highest_priority
  0x1000'2410: 0x6808          LDR      R0, [R1]
  0x1000'2412: 0x4581          CMP      R9, R0
  0x1000'2414: 0xf080 0x80ad   BCS.W    ??_tx_thread_system_ni_resume_5
                                                               ; 0x1000'2572
  //                     _tx_thread_highest_priority =  priority;
  0x1000'2418: 0xf8c1 0x9000   STR.W    R9, [R1]
  //                     execute_ptr =  _tx_thread_execute_ptr;
  0x1000'241c: 0x4a97          LDR.N    R2, ??DataTable1_6     ; _tx_thread_execute_ptr
  0x1000'241e: 0x6810          LDR      R0, [R2]
  0x1000'2420: 0x0006          MOVS     R6, R0
  //                     if (execute_ptr == TX_NULL)
  0x1000'2422: 0x2e00          CMP      R6, #0
  0x1000'2424: 0xd101          BNE.N    ??_tx_thread_system_ni_resume_8
                                                               ; 0x1000'242a
  //                         _tx_thread_execute_ptr =  thread_ptr;
  0x1000'2426: 0x6014          STR      R4, [R2]
  0x1000'2428: 0xe0a3          B.N      ??_tx_thread_system_ni_resume_5
                                                               ; 0x1000'2572
                 ??_tx_thread_system_ni_resume_8:
  //                         if (priority < execute_ptr -> tx_thread_preempt_threshold)
  0x1000'242a: 0x6bf0          LDR      R0, [R6, #0x3c]
  0x1000'242c: 0x4581          CMP      R9, R0
  0x1000'242e: 0xf080 0x80a0   BCS.W    ??_tx_thread_system_ni_resume_5
                                                               ; 0x1000'2572
  //                             if (TX_THREAD_GET_SYSTEM_STATE() == ((ULONG) 0))
  0x1000'2432: 0x4b93          LDR.N    R3, ??DataTable1_7     ; _tx_thread_system_state
  0x1000'2434: 0x6818          LDR      R0, [R3]
  0x1000'2436: 0xf3ef 0x8105   MRS      R1, IPSR
  0x1000'243a: 0x4308          ORRS     R0, R0, R1
  0x1000'243c: 0x2800          CMP      R0, #0
  0x1000'243e: 0xd109          BNE.N    ??_tx_thread_system_ni_resume_9
                                                               ; 0x1000'2454
  //                                 _tx_thread_performance_solicited_preemption_count++;
  0x1000'2440: 0x4990          LDR.N    R1, ??DataTable1_8     ; _tx_thread_performance_solicited_preemption_count
  0x1000'2442: 0x6808          LDR      R0, [R1]
  0x1000'2444: 0x1c40          ADDS     R0, R0, #1
  0x1000'2446: 0x6008          STR      R0, [R1]
  //                                 execute_ptr -> tx_thread_performance_solicited_preemption_count++;
  0x1000'2448: 0xf8d6 0x00ac   LDR.W    R0, [R6, #0xac]
  0x1000'244c: 0x1c40          ADDS     R0, R0, #1
  0x1000'244e: 0xf8c6 0x00ac   STR.W    R0, [R6, #0xac]
  0x1000'2452: 0xe00f          B.N      ??_tx_thread_system_ni_resume_10
                                                               ; 0x1000'2474
                 ??_tx_thread_system_ni_resume_9:
  //                                 if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
  0x1000'2454: 0x6819          LDR      R1, [R3]
  0x1000'2456: 0xf3ef 0x8005   MRS      R0, IPSR
  0x1000'245a: 0x4301          ORRS     R1, R1, R0
  0x1000'245c: 0xf1b1 0x3ff0   CMP.W    R1, #-252645136        ; 0xf0f0'f0f0
  0x1000'2460: 0xd208          BCS.N    ??_tx_thread_system_ni_resume_10
                                                               ; 0x1000'2474
  //                                     _tx_thread_performance_interrupt_preemption_count++;
  0x1000'2462: 0x4989          LDR.N    R1, ??DataTable1_9     ; _tx_thread_performance_interrupt_preemption_count
  0x1000'2464: 0x6808          LDR      R0, [R1]
  0x1000'2466: 0x1c40          ADDS     R0, R0, #1
  0x1000'2468: 0x6008          STR      R0, [R1]
  //                                     execute_ptr -> tx_thread_performance_interrupt_preemption_count++;
  0x1000'246a: 0xf8d6 0x00b0   LDR.W    R0, [R6, #0xb0]
  0x1000'246e: 0x1c40          ADDS     R0, R0, #1
  0x1000'2470: 0xf8c6 0x00b0   STR.W    R0, [R6, #0xb0]
                 ??_tx_thread_system_ni_resume_10:
  //                             execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;
  0x1000'2474: 0xf8c6 0x40b8   STR.W    R4, [R6, #0xb8]
  //                             _tx_thread_execute_ptr =  thread_ptr;
  0x1000'2478: 0x6014          STR      R4, [R2]
  //                             if (_tx_thread_performance_execute_log[_tx_thread_performance__execute_log_index] != _tx_thread_execute_ptr)
  0x1000'247a: 0x4884          LDR.N    R0, ??DataTable1_10    ; _tx_thread_performance__execute_log_index
  0x1000'247c: 0x4984          LDR.N    R1, ??DataTable1_11    ; _tx_thread_performance_execute_log
  0x1000'247e: 0x6803          LDR      R3, [R0]
  0x1000'2480: 0xf851 0x7023   LDR.W    R7, [R1, R3, LSL #2]
  0x1000'2484: 0x6813          LDR      R3, [R2]
  0x1000'2486: 0x429f          CMP      R7, R3
  0x1000'2488: 0xd00b          BEQ.N    ??_tx_thread_system_ni_resume_11
                                                               ; 0x1000'24a2
  //                                 _tx_thread_performance__execute_log_index++;
  0x1000'248a: 0x6803          LDR      R3, [R0]
  0x1000'248c: 0x1c5b          ADDS     R3, R3, #1
  0x1000'248e: 0x6003          STR      R3, [R0]
  //                                 if (_tx_thread_performance__execute_log_index >= TX_THREAD_EXECUTE_LOG_SIZE)
  0x1000'2490: 0x6803          LDR      R3, [R0]
  0x1000'2492: 0x2b08          CMP      R3, #8
  0x1000'2494: 0xd301          BCC.N    ??_tx_thread_system_ni_resume_12
                                                               ; 0x1000'249a
  //                                     _tx_thread_performance__execute_log_index =  ((UINT) 0);
  0x1000'2496: 0x2300          MOVS     R3, #0
  0x1000'2498: 0x6003          STR      R3, [R0]
                 ??_tx_thread_system_ni_resume_12:
  //                                 _tx_thread_performance_execute_log[_tx_thread_performance__execute_log_index] =  _tx_thread_execute_ptr;
  0x1000'249a: 0x6813          LDR      R3, [R2]
  0x1000'249c: 0x6800          LDR      R0, [R0]
  0x1000'249e: 0xf841 0x3020   STR.W    R3, [R1, R0, LSL #2]
                 ??_tx_thread_system_ni_resume_11:
  //                             thread_ptr =  _tx_thread_execute_ptr;
  0x1000'24a2: 0x6817          LDR      R7, [R2]
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'24a4: 0xf3ef 0x8a10   MRS      R10, PRIMASK
  //     return(posture);
  0x1000'24a8: 0xb672          CPSID    i
  //     return(int_posture);
  0x1000'24aa: 0x2f00          CMP      R7, #0
  0x1000'24ac: 0xd039          BEQ.N    ??_tx_thread_system_ni_resume_13
                                                               ; 0x1000'2522
  0x1000'24ae: 0x6839          LDR      R1, [R7]
  0x1000'24b0: 0x486e          LDR.N    R0, ??DataTable1_2     ; 0x5448'5244
  0x1000'24b2: 0x4281          CMP      R1, R0
  0x1000'24b4: 0xd135          BNE.N    ??_tx_thread_system_ni_resume_13
                                                               ; 0x1000'2522
  //                             TX_THREAD_STACK_CHECK(thread_ptr)
  0x1000'24b6: 0x68b9          LDR      R1, [R7, #0x8]
  0x1000'24b8: 0xf8d7 0x00cc   LDR.W    R0, [R7, #0xcc]
  0x1000'24bc: 0x4281          CMP      R1, R0
  0x1000'24be: 0xd202          BCS.N    ??_tx_thread_system_ni_resume_14
                                                               ; 0x1000'24c6
  //                             TX_THREAD_STACK_CHECK(thread_ptr)
  0x1000'24c0: 0x68b8          LDR      R0, [R7, #0x8]
  0x1000'24c2: 0xf8c7 0x00cc   STR.W    R0, [R7, #0xcc]
                 ??_tx_thread_system_ni_resume_14:
  //                             TX_THREAD_STACK_CHECK(thread_ptr)
  0x1000'24c6: 0x68f8          LDR      R0, [R7, #0xc]
  0x1000'24c8: 0x6801          LDR      R1, [R0]
  0x1000'24ca: 0xf8d7 0x00d4   LDR.W    R0, [R7, #0xd4]
  0x1000'24ce: 0x4281          CMP      R1, R0
  0x1000'24d0: 0xd10b          BNE.N    ??_tx_thread_system_ni_resume_15
                                                               ; 0x1000'24ea
  0x1000'24d2: 0x6938          LDR      R0, [R7, #0x10]
  0x1000'24d4: 0xf8d0 0x1001   LDR.W    R1, [R0, #0x1]
  0x1000'24d8: 0xf8d7 0x00d4   LDR.W    R0, [R7, #0xd4]
  0x1000'24dc: 0x4281          CMP      R1, R0
  0x1000'24de: 0xd104          BNE.N    ??_tx_thread_system_ni_resume_15
                                                               ; 0x1000'24ea
  0x1000'24e0: 0xf8d7 0x10cc   LDR.W    R1, [R7, #0xcc]
  0x1000'24e4: 0x68f8          LDR      R0, [R7, #0xc]
  0x1000'24e6: 0x4281          CMP      R1, R0
  0x1000'24e8: 0xd209          BCS.N    ??_tx_thread_system_ni_resume_16
                                                               ; 0x1000'24fe
                 ??_tx_thread_system_ni_resume_15:
  //                             TX_THREAD_STACK_CHECK(thread_ptr)
  0x1000'24ea: 0x4654          MOV      R4, R10
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'24ec: 0xf384 0x8810   MSR      PRIMASK, R4
  // }
  0x1000'24f0: 0x0038          MOVS     R0, R7
  0x1000'24f2: 0xf000 0xf8f1   BL       _tx_thread_stack_error_handler
                                                               ; 0x1000'26d8
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'24f6: 0xf3ef 0x8010   MRS      R0, PRIMASK
  //     return(posture);
  0x1000'24fa: 0xb672          CPSID    i
  //     return(int_posture);
  0x1000'24fc: 0x4682          MOV      R10, R0
                 ??_tx_thread_system_ni_resume_16:
  //                             TX_THREAD_STACK_CHECK(thread_ptr)
  0x1000'24fe: 0xf8d7 0x00cc   LDR.W    R0, [R7, #0xcc]
  0x1000'2502: 0xf850 0x1c04   LDR.W    R1, [R0, #-0x4]
  0x1000'2506: 0xf8d7 0x00d4   LDR.W    R0, [R7, #0xd4]
  0x1000'250a: 0x4281          CMP      R1, R0
  0x1000'250c: 0xd009          BEQ.N    ??_tx_thread_system_ni_resume_13
                                                               ; 0x1000'2522
  //                             TX_THREAD_STACK_CHECK(thread_ptr)
  0x1000'250e: 0x4654          MOV      R4, R10
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'2510: 0xf384 0x8810   MSR      PRIMASK, R4
  // }
  0x1000'2514: 0x0038          MOVS     R0, R7
  0x1000'2516: 0xf000 0xf8f1   BL       _tx_thread_stack_analyze
                                                               ; 0x1000'26fc
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'251a: 0xf3ef 0x8010   MRS      R0, PRIMASK
  //     return(posture);
  0x1000'251e: 0xb672          CPSID    i
  //     return(int_posture);
  0x1000'2520: 0x4682          MOV      R10, R0
                 ??_tx_thread_system_ni_resume_13:
  //                             TX_THREAD_STACK_CHECK(thread_ptr)
  0x1000'2522: 0x4651          MOV      R1, R10
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'2524: 0xf381 0x8810   MSR      PRIMASK, R1
  // }
  0x1000'2528: 0x484e          LDR.N    R0, ??DataTable1       ; _tx_thread_preempt_disable
  0x1000'252a: 0x6800          LDR      R0, [R0]
  //                             if (combined_flags == ((ULONG) 0))
  0x1000'252c: 0x2800          CMP      R0, #0
  0x1000'252e: 0xd112          BNE.N    ??_tx_thread_system_ni_resume_18
                                                               ; 0x1000'2556
  //                                 _tx_thread_performance_non_idle_return_count++;
  0x1000'2530: 0x4a58          LDR.N    R2, ??DataTable1_12    ; _tx_thread_performance_non_idle_return_count
  0x1000'2532: 0x6811          LDR      R1, [R2]
  0x1000'2534: 0x1c49          ADDS     R1, R1, #1
  0x1000'2536: 0x6011          STR      R1, [R2]
  //     *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
  0x1000'2538: 0xf05f 0x5380   MOVS.W   R3, #268435456         ; 0x1000'0000
  0x1000'253c: 0x4956          LDR.N    R1, ??DataTable1_13    ; 0xe000'ed04
  0x1000'253e: 0x600b          STR      R3, [R1]
  //     if (_tx_ipsr_get() == 0)
  0x1000'2540: 0xf3ef 0x8105   MRS      R1, IPSR
  0x1000'2544: 0x2900          CMP      R1, #0
  0x1000'2546: 0xd106          BNE.N    ??_tx_thread_system_ni_resume_18
                                                               ; 0x1000'2556
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'2548: 0xf3ef 0x8110   MRS      R1, PRIMASK
  //     return(posture);
  0x1000'254c: 0x000a          MOVS     R2, R1
  //     __asm__ volatile ("CPSIE  i": : : "memory");
  0x1000'254e: 0xb662          CPSIE    i
  // }
  0x1000'2550: 0x0011          MOVS     R1, R2
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'2552: 0xf381 0x8810   MSR      PRIMASK, R1
                 ??_tx_thread_system_ni_resume_17:
                 ??_tx_thread_system_ni_resume_18:
  // }
  0x1000'2556: 0xe083          B.N      ??_tx_thread_system_ni_resume_27
                                                               ; 0x1000'2660
                 ??_tx_thread_system_ni_resume_7:
  //                 tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
  0x1000'2558: 0x6a68          LDR      R0, [R5, #0x24]
  0x1000'255a: 0x4680          MOV      R8, R0
  //                 tail_ptr -> tx_thread_ready_next =         thread_ptr;
  0x1000'255c: 0xf8c8 0x4020   STR.W    R4, [R8, #0x20]
  //                 head_ptr -> tx_thread_ready_previous =     thread_ptr;
  0x1000'2560: 0x626c          STR      R4, [R5, #0x24]
  //                 thread_ptr -> tx_thread_ready_previous =   tail_ptr;
  0x1000'2562: 0xf8c4 0x8024   STR.W    R8, [R4, #0x24]
  //                 thread_ptr -> tx_thread_ready_next =       head_ptr;
  0x1000'2566: 0x6225          STR      R5, [R4, #0x20]
  0x1000'2568: 0xe003          B.N      ??_tx_thread_system_ni_resume_5
                                                               ; 0x1000'2572
                 ??_tx_thread_system_ni_resume_6:
  //             thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
  0x1000'256a: 0x2000          MOVS     R0, #0
  0x1000'256c: 0x6360          STR      R0, [R4, #0x34]
  //             thread_ptr -> tx_thread_state =            TX_SUSPENDED;
  0x1000'256e: 0x2003          MOVS     R0, #3
  0x1000'2570: 0x6320          STR      R0, [R4, #0x30]
                 ??_tx_thread_system_ni_resume_5:
  //     if (_tx_thread_performance_execute_log[_tx_thread_performance__execute_log_index] != _tx_thread_execute_ptr)
  0x1000'2572: 0x4946          LDR.N    R1, ??DataTable1_10    ; _tx_thread_performance__execute_log_index
  0x1000'2574: 0x4a46          LDR.N    R2, ??DataTable1_11    ; _tx_thread_performance_execute_log
  0x1000'2576: 0x4841          LDR.N    R0, ??DataTable1_6     ; _tx_thread_execute_ptr
  0x1000'2578: 0x680b          LDR      R3, [R1]
  0x1000'257a: 0xf852 0x3023   LDR.W    R3, [R2, R3, LSL #2]
  0x1000'257e: 0x6807          LDR      R7, [R0]
  0x1000'2580: 0x42bb          CMP      R3, R7
  0x1000'2582: 0xd00b          BEQ.N    ??_tx_thread_system_ni_resume_20
                                                               ; 0x1000'259c
  //         _tx_thread_performance__execute_log_index++;
  0x1000'2584: 0x680b          LDR      R3, [R1]
  0x1000'2586: 0x1c5b          ADDS     R3, R3, #1
  0x1000'2588: 0x600b          STR      R3, [R1]
  //         if (_tx_thread_performance__execute_log_index >= TX_THREAD_EXECUTE_LOG_SIZE)
  0x1000'258a: 0x680b          LDR      R3, [R1]
  0x1000'258c: 0x2b08          CMP      R3, #8
  0x1000'258e: 0xd301          BCC.N    ??_tx_thread_system_ni_resume_21
                                                               ; 0x1000'2594
  //             _tx_thread_performance__execute_log_index =  ((UINT) 0);
  0x1000'2590: 0x2300          MOVS     R3, #0
  0x1000'2592: 0x600b          STR      R3, [R1]
                 ??_tx_thread_system_ni_resume_21:
  //         _tx_thread_performance_execute_log[_tx_thread_performance__execute_log_index] =  _tx_thread_execute_ptr;
  0x1000'2594: 0x6803          LDR      R3, [R0]
  0x1000'2596: 0x6809          LDR      R1, [R1]
  0x1000'2598: 0xf842 0x3021   STR.W    R3, [R2, R1, LSL #2]
                 ??_tx_thread_system_ni_resume_20:
  //     TX_THREAD_GET_CURRENT(current_thread)
  0x1000'259c: 0x493f          LDR.N    R1, ??DataTable1_14    ; _tx_thread_current_ptr
  0x1000'259e: 0x680f          LDR      R7, [R1]
  //     if (current_thread != _tx_thread_execute_ptr)
  0x1000'25a0: 0x6801          LDR      R1, [R0]
  0x1000'25a2: 0x428f          CMP      R7, R1
  0x1000'25a4: 0xd05c          BEQ.N    ??_tx_thread_system_ni_resume_27
                                                               ; 0x1000'2660
  //         thread_ptr =  _tx_thread_execute_ptr;
  0x1000'25a6: 0x6800          LDR      R0, [R0]
  0x1000'25a8: 0x0004          MOVS     R4, R0
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'25aa: 0xf3ef 0x8a10   MRS      R10, PRIMASK
  //     return(posture);
  0x1000'25ae: 0xb672          CPSID    i
  //     return(int_posture);
  0x1000'25b0: 0x2c00          CMP      R4, #0
  0x1000'25b2: 0xd039          BEQ.N    ??_tx_thread_system_ni_resume_23
                                                               ; 0x1000'2628
  0x1000'25b4: 0x6821          LDR      R1, [R4]
  0x1000'25b6: 0x482d          LDR.N    R0, ??DataTable1_2     ; 0x5448'5244
  0x1000'25b8: 0x4281          CMP      R1, R0
  0x1000'25ba: 0xd135          BNE.N    ??_tx_thread_system_ni_resume_23
                                                               ; 0x1000'2628
  //         TX_THREAD_STACK_CHECK(thread_ptr)
  0x1000'25bc: 0x68a1          LDR      R1, [R4, #0x8]
  0x1000'25be: 0xf8d4 0x00cc   LDR.W    R0, [R4, #0xcc]
  0x1000'25c2: 0x4281          CMP      R1, R0
  0x1000'25c4: 0xd202          BCS.N    ??_tx_thread_system_ni_resume_24
                                                               ; 0x1000'25cc
  //         TX_THREAD_STACK_CHECK(thread_ptr)
  0x1000'25c6: 0x68a0          LDR      R0, [R4, #0x8]
  0x1000'25c8: 0xf8c4 0x00cc   STR.W    R0, [R4, #0xcc]
                 ??_tx_thread_system_ni_resume_24:
  //         TX_THREAD_STACK_CHECK(thread_ptr)
  0x1000'25cc: 0x68e0          LDR      R0, [R4, #0xc]
  0x1000'25ce: 0x6801          LDR      R1, [R0]
  0x1000'25d0: 0xf8d4 0x00d4   LDR.W    R0, [R4, #0xd4]
  0x1000'25d4: 0x4281          CMP      R1, R0
  0x1000'25d6: 0xd10b          BNE.N    ??_tx_thread_system_ni_resume_25
                                                               ; 0x1000'25f0
  0x1000'25d8: 0x6920          LDR      R0, [R4, #0x10]
  0x1000'25da: 0xf8d0 0x1001   LDR.W    R1, [R0, #0x1]
  0x1000'25de: 0xf8d4 0x00d4   LDR.W    R0, [R4, #0xd4]
  0x1000'25e2: 0x4281          CMP      R1, R0
  0x1000'25e4: 0xd104          BNE.N    ??_tx_thread_system_ni_resume_25
                                                               ; 0x1000'25f0
  0x1000'25e6: 0xf8d4 0x10cc   LDR.W    R1, [R4, #0xcc]
  0x1000'25ea: 0x68e0          LDR      R0, [R4, #0xc]
  0x1000'25ec: 0x4281          CMP      R1, R0
  0x1000'25ee: 0xd209          BCS.N    ??_tx_thread_system_ni_resume_26
                                                               ; 0x1000'2604
                 ??_tx_thread_system_ni_resume_25:
  //         TX_THREAD_STACK_CHECK(thread_ptr)
  0x1000'25f0: 0x46d3          MOV      R11, R10
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'25f2: 0xf38b 0x8810   MSR      PRIMASK, R11
  // }
  0x1000'25f6: 0x0020          MOVS     R0, R4
  0x1000'25f8: 0xf000 0xf86e   BL       _tx_thread_stack_error_handler
                                                               ; 0x1000'26d8
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'25fc: 0xf3ef 0x8010   MRS      R0, PRIMASK
  //     return(posture);
  0x1000'2600: 0xb672          CPSID    i
  //     return(int_posture);
  0x1000'2602: 0x4682          MOV      R10, R0
                 ??_tx_thread_system_ni_resume_26:
  //         TX_THREAD_STACK_CHECK(thread_ptr)
  0x1000'2604: 0xf8d4 0x00cc   LDR.W    R0, [R4, #0xcc]
  0x1000'2608: 0xf850 0x1c04   LDR.W    R1, [R0, #-0x4]
  0x1000'260c: 0xf8d4 0x00d4   LDR.W    R0, [R4, #0xd4]
  0x1000'2610: 0x4281          CMP      R1, R0
  0x1000'2612: 0xd009          BEQ.N    ??_tx_thread_system_ni_resume_23
                                                               ; 0x1000'2628
  //         TX_THREAD_STACK_CHECK(thread_ptr)
  0x1000'2614: 0x46d3          MOV      R11, R10
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'2616: 0xf38b 0x8810   MSR      PRIMASK, R11
  // }
  0x1000'261a: 0x0020          MOVS     R0, R4
  0x1000'261c: 0xf000 0xf86e   BL       _tx_thread_stack_analyze
                                                               ; 0x1000'26fc
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'2620: 0xf3ef 0x8010   MRS      R0, PRIMASK
  //     return(posture);
  0x1000'2624: 0xb672          CPSID    i
  //     return(int_posture);
  0x1000'2626: 0x4682          MOV      R10, R0
                 ??_tx_thread_system_ni_resume_23:
  //         TX_THREAD_STACK_CHECK(thread_ptr)
  0x1000'2628: 0x4651          MOV      R1, R10
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'262a: 0xf381 0x8810   MSR      PRIMASK, R1
  // }
  0x1000'262e: 0x480d          LDR.N    R0, ??DataTable1       ; _tx_thread_preempt_disable
  0x1000'2630: 0x6800          LDR      R0, [R0]
  0x1000'2632: 0x9000          STR      R0, [SP]
  //         if (combined_flags == ((ULONG) 0))
  0x1000'2634: 0x9800          LDR      R0, [SP]
  0x1000'2636: 0x2800          CMP      R0, #0
  0x1000'2638: 0xd112          BNE.N    ??_tx_thread_system_ni_resume_27
                                                               ; 0x1000'2660
  //             _tx_thread_performance_non_idle_return_count++;
  0x1000'263a: 0x4916          LDR.N    R1, ??DataTable1_12    ; _tx_thread_performance_non_idle_return_count
  0x1000'263c: 0x6808          LDR      R0, [R1]
  0x1000'263e: 0x1c40          ADDS     R0, R0, #1
  0x1000'2640: 0x6008          STR      R0, [R1]
  //     *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
  0x1000'2642: 0xf05f 0x5080   MOVS.W   R0, #268435456         ; 0x1000'0000
  0x1000'2646: 0x4a14          LDR.N    R2, ??DataTable1_13    ; 0xe000'ed04
  0x1000'2648: 0x6010          STR      R0, [R2]
  //     if (_tx_ipsr_get() == 0)
  0x1000'264a: 0xf3ef 0x8005   MRS      R0, IPSR
  0x1000'264e: 0x2800          CMP      R0, #0
  0x1000'2650: 0xd106          BNE.N    ??_tx_thread_system_ni_resume_27
                                                               ; 0x1000'2660
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'2652: 0xf3ef 0x8010   MRS      R0, PRIMASK
  //     return(posture);
  0x1000'2656: 0x0001          MOVS     R1, R0
  //     __asm__ volatile ("CPSIE  i": : : "memory");
  0x1000'2658: 0xb662          CPSIE    i
  // }
  0x1000'265a: 0x0008          MOVS     R0, R1
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'265c: 0xf380 0x8810   MSR      PRIMASK, R0
                 ??_tx_thread_system_ni_resume_19:
                 ??_tx_thread_system_ni_resume_22:
                 ??_tx_thread_system_ni_resume_27:
  // }
  0x1000'2660: 0xe8bd 0x8ff7   POP.W    {R0-R2, R4-R11, PC}
                 `$d.32`:
                 ??DataTable1:
  0x1000'2664: 0x3800'23d8     DC32     _tx_thread_preempt_disable
                 ??DataTable1_1:
  0x1000'2668: 0x3800'23e8     DC32     _tx_thread_performance_resume_count
                 ??DataTable1_2:
  0x1000'266c: 0x5448'5244     DC32     0x5448'5244            ; 'DRHT'
                 ??DataTable1_3:
  0x1000'2670: 0x3800'224c     DC32     _tx_thread_priority_list
                 ??DataTable1_4:
  0x1000'2674: 0x3800'23d0     DC32     _tx_thread_priority_maps
                 ??DataTable1_5:
  0x1000'2678: 0x3800'23d4     DC32     _tx_thread_highest_priority
                 ??DataTable1_6:
  0x1000'267c: 0x3800'23c4     DC32     _tx_thread_execute_ptr
                 ??DataTable1_7:
  0x1000'2680: 0x3800'0004     DC32     _tx_thread_system_state
                 ??DataTable1_8:
  0x1000'2684: 0x3800'23f0     DC32     _tx_thread_performance_solicited_preemption_count
                 ??DataTable1_9:
  0x1000'2688: 0x3800'23f4     DC32     _tx_thread_performance_interrupt_preemption_count
                 ??DataTable1_10:
  0x1000'268c: 0x3800'2408     DC32     _tx_thread_performance__execute_log_index
                 ??DataTable1_11:
  0x1000'2690: 0x3800'2380     DC32     _tx_thread_performance_execute_log
                 ??DataTable1_12:
  0x1000'2694: 0x3800'2404     DC32     _tx_thread_performance_non_idle_return_count
                 ??DataTable1_13:
  0x1000'2698: 0xe000'ed04     DC32     0xe000'ed04            ; '....'
                 ??DataTable1_14:
  0x1000'269c: 0x3800'23c0     DC32     _tx_thread_current_ptr
                 $t:
                 `.text8`:
                 _tx_timer_system_deactivate:
  // VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
  // {
  0x1000'26a0: 0xb410          PUSH     {R4}
  //     list_head =  timer_ptr -> tx_timer_internal_list_head;
  0x1000'26a2: 0x6981          LDR      R1, [R0, #0x18]
  //     if (list_head != TX_NULL)
  0x1000'26a4: 0x2900          CMP      R1, #0
  0x1000'26a6: 0xd014          BEQ.N    ??_tx_timer_system_deactivate_0
                                                               ; 0x1000'26d2
  //         next_timer =  timer_ptr -> tx_timer_internal_active_next;
  0x1000'26a8: 0x6904          LDR      R4, [R0, #0x10]
  0x1000'26aa: 0x0022          MOVS     R2, R4
  //         if (timer_ptr == next_timer)
  0x1000'26ac: 0x4290          CMP      R0, R2
  0x1000'26ae: 0xd105          BNE.N    ??_tx_timer_system_deactivate_1
                                                               ; 0x1000'26bc
  //             if (*(list_head) == timer_ptr)
  0x1000'26b0: 0x680c          LDR      R4, [R1]
  0x1000'26b2: 0x4284          CMP      R4, R0
  0x1000'26b4: 0xd10b          BNE.N    ??_tx_timer_system_deactivate_2
                                                               ; 0x1000'26ce
  //                 *(list_head) =  TX_NULL;
  0x1000'26b6: 0x2400          MOVS     R4, #0
  0x1000'26b8: 0x600c          STR      R4, [R1]
  0x1000'26ba: 0xe008          B.N      ??_tx_timer_system_deactivate_2
                                                               ; 0x1000'26ce
                 ??_tx_timer_system_deactivate_1:
  //             previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
  0x1000'26bc: 0x6944          LDR      R4, [R0, #0x14]
  0x1000'26be: 0x0023          MOVS     R3, R4
  //             next_timer -> tx_timer_internal_active_previous =  previous_timer;
  0x1000'26c0: 0x6153          STR      R3, [R2, #0x14]
  //             previous_timer -> tx_timer_internal_active_next =  next_timer;
  0x1000'26c2: 0x611a          STR      R2, [R3, #0x10]
  //             if (*(list_head) == timer_ptr)
  0x1000'26c4: 0x680c          LDR      R4, [R1]
  0x1000'26c6: 0x4284          CMP      R4, R0
  0x1000'26c8: 0xd101          BNE.N    ??_tx_timer_system_deactivate_2
                                                               ; 0x1000'26ce
  //                 next_timer -> tx_timer_internal_list_head =  list_head;
  0x1000'26ca: 0x6191          STR      R1, [R2, #0x18]
  //                 *(list_head) =  next_timer;
  0x1000'26cc: 0x600a          STR      R2, [R1]
                 ??_tx_timer_system_deactivate_2:
  //         timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
  0x1000'26ce: 0x2400          MOVS     R4, #0
  0x1000'26d0: 0x6184          STR      R4, [R0, #0x18]
                 ??_tx_timer_system_deactivate_0:
  // }
  0x1000'26d2: 0xbc10          POP      {R4}
  0x1000'26d4: 0x4770          BX       LR
  0x1000'26d6: 0x0000          MOVS     R0, R0
                 `.text8`:
                 _tx_thread_stack_error_handler:
  // VOID  _tx_thread_stack_error_handler(TX_THREAD *thread_ptr)
  // {
  0x1000'26d8: 0xb538          PUSH     {R3-R5, LR}
  0x1000'26da: 0x0004          MOVS     R4, R0
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'26dc: 0xf3ef 0x8510   MRS      R5, PRIMASK
  //     return(posture);
  0x1000'26e0: 0xb672          CPSID    i
  //     return(int_posture);
  0x1000'26e2: 0x4905          LDR.N    R1, ??_tx_thread_stack_error_handler_0
                                                               ; _tx_thread_application_stack_error_handler
  0x1000'26e4: 0x6808          LDR      R0, [R1]
  0x1000'26e6: 0x2800          CMP      R0, #0
  0x1000'26e8: 0xd002          BEQ.N    ??_tx_thread_stack_error_handler_1
                                                               ; 0x1000'26f0
  //         (_tx_thread_application_stack_error_handler)(thread_ptr);
  0x1000'26ea: 0x0020          MOVS     R0, R4
  0x1000'26ec: 0x6809          LDR      R1, [R1]
  0x1000'26ee: 0x4788          BLX      R1
                 ??_tx_thread_stack_error_handler_1:
  //     TX_RESTORE
  0x1000'26f0: 0x0028          MOVS     R0, R5
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'26f2: 0xf380 0x8810   MSR      PRIMASK, R0
  // }
  0x1000'26f6: 0xbd31          POP      {R0, R4, R5, PC}
                 `$d.32`:
                 ??_tx_thread_stack_error_handler_0:
  0x1000'26f8: 0x3800'23e4     DC32     _tx_thread_application_stack_error_handler
                 $t:
                 `.text8`:
                 _tx_thread_stack_analyze:
  // VOID  _tx_thread_stack_analyze(TX_THREAD *thread_ptr)
  // {
  0x1000'26fc: 0xb4f0          PUSH     {R4-R7}
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'26fe: 0xf3ef 0x8510   MRS      R5, PRIMASK
  //     return(posture);
  0x1000'2702: 0xb672          CPSID    i
  //     return(int_posture);
  0x1000'2704: 0x2800          CMP      R0, #0
  0x1000'2706: 0xd03e          BEQ.N    ??_tx_thread_stack_analyze_1
                                                               ; 0x1000'2786
  //         if (thread_ptr -> tx_thread_id == TX_THREAD_ID)
  0x1000'2708: 0x4e21          LDR.N    R6, ??_tx_thread_stack_analyze_0
                                                               ; 0x5448'5244
  0x1000'270a: 0x6807          LDR      R7, [R0]
  0x1000'270c: 0x42b7          CMP      R7, R6
  0x1000'270e: 0xd13a          BNE.N    ??_tx_thread_stack_analyze_1
                                                               ; 0x1000'2786
  //             stack_lowest =   TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_stack_start);
  0x1000'2710: 0x68c7          LDR      R7, [R0, #0xc]
  0x1000'2712: 0x0039          MOVS     R1, R7
  //             if (stack_lowest != TX_NULL)
  0x1000'2714: 0x2900          CMP      R1, #0
  0x1000'2716: 0xd036          BEQ.N    ??_tx_thread_stack_analyze_1
                                                               ; 0x1000'2786
  //                 stack_highest =  TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_stack_highest_ptr);
  0x1000'2718: 0xf8d0 0x70cc   LDR.W    R7, [R0, #0xcc]
  0x1000'271c: 0x003a          MOVS     R2, R7
  //                 if (stack_highest != TX_NULL)
  0x1000'271e: 0x2a00          CMP      R2, #0
  0x1000'2720: 0xd031          BEQ.N    ??_tx_thread_stack_analyze_1
                                                               ; 0x1000'2786
  //                     TX_RESTORE
  0x1000'2722: 0x002f          MOVS     R7, R5
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'2724: 0xf387 0x8810   MSR      PRIMASK, R7
                 ??_tx_thread_stack_analyze_2:
  // }
  0x1000'2728: 0x1a57          SUBS     R7, R2, R1
  0x1000'272a: 0x10bf          ASRS     R7, R7, #2
  0x1000'272c: 0x087f          LSRS     R7, R7, #1
  0x1000'272e: 0x003c          MOVS     R4, R7
  //                         stack_ptr =  TX_ULONG_POINTER_ADD(stack_lowest, size);
  0x1000'2730: 0xeb01 0x0784   ADD.W    R7, R1, R4, LSL #2
  0x1000'2734: 0x003b          MOVS     R3, R7
  //                         if (*stack_ptr != TX_STACK_FILL)
  0x1000'2736: 0xf8d3 0xc000   LDR.W    R12, [R3]
  0x1000'273a: 0xf8d0 0x70d4   LDR.W    R7, [R0, #0xd4]
  0x1000'273e: 0x45bc          CMP      R12, R7
  0x1000'2740: 0xd001          BEQ.N    ??_tx_thread_stack_analyze_3
                                                               ; 0x1000'2746
  //                             stack_highest =  stack_ptr;
  0x1000'2742: 0x001a          MOVS     R2, R3
  0x1000'2744: 0xe000          B.N      ??_tx_thread_stack_analyze_4
                                                               ; 0x1000'2748
                 ??_tx_thread_stack_analyze_3:
  //                             stack_lowest =  stack_ptr;
  0x1000'2746: 0x0019          MOVS     R1, R3
                 ??_tx_thread_stack_analyze_4:
  //                     } while(size > ((ULONG) 1));
  0x1000'2748: 0x2c02          CMP      R4, #2
  0x1000'274a: 0xd2ed          BCS.N    ??_tx_thread_stack_analyze_2
                                                               ; 0x1000'2728
                 ??_tx_thread_stack_analyze_5:
  //                     while (*stack_ptr == TX_STACK_FILL)
  0x1000'274c: 0xf8d3 0xc000   LDR.W    R12, [R3]
  0x1000'2750: 0xf8d0 0x70d4   LDR.W    R7, [R0, #0xd4]
  0x1000'2754: 0x45bc          CMP      R12, R7
  0x1000'2756: 0xd101          BNE.N    ??_tx_thread_stack_analyze_6
                                                               ; 0x1000'275c
  //                         stack_ptr =  TX_ULONG_POINTER_ADD(stack_ptr, 1);
  0x1000'2758: 0x1d1b          ADDS     R3, R3, #4
  0x1000'275a: 0xe7f7          B.N      ??_tx_thread_stack_analyze_5
                                                               ; 0x1000'274c
                 ??_tx_thread_stack_analyze_6:
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'275c: 0xf3ef 0x8710   MRS      R7, PRIMASK
  //     return(posture);
  0x1000'2760: 0xb672          CPSID    i
  //     return(int_posture);
  0x1000'2762: 0x003d          MOVS     R5, R7
  //                     if (thread_ptr -> tx_thread_id == TX_THREAD_ID)
  0x1000'2764: 0x6807          LDR      R7, [R0]
  0x1000'2766: 0x42b7          CMP      R7, R6
  0x1000'2768: 0xd10d          BNE.N    ??_tx_thread_stack_analyze_1
                                                               ; 0x1000'2786
  //                         if (stack_ptr > (TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_stack_start)))
  0x1000'276a: 0x68c6          LDR      R6, [R0, #0xc]
  0x1000'276c: 0x429e          CMP      R6, R3
  0x1000'276e: 0xd20a          BCS.N    ??_tx_thread_stack_analyze_1
                                                               ; 0x1000'2786
  //                             if (stack_ptr < (TX_VOID_TO_ULONG_POINTER_CONVERT(thread_ptr -> tx_thread_stack_highest_ptr)))
  0x1000'2770: 0xf8d0 0x60cc   LDR.W    R6, [R0, #0xcc]
  0x1000'2774: 0x42b3          CMP      R3, R6
  0x1000'2776: 0xd206          BCS.N    ??_tx_thread_stack_analyze_1
                                                               ; 0x1000'2786
  //                                 if (*stack_ptr != TX_STACK_FILL)
  0x1000'2778: 0x681f          LDR      R7, [R3]
  0x1000'277a: 0xf8d0 0x60d4   LDR.W    R6, [R0, #0xd4]
  0x1000'277e: 0x42b7          CMP      R7, R6
  0x1000'2780: 0xd001          BEQ.N    ??_tx_thread_stack_analyze_1
                                                               ; 0x1000'2786
  //                                     thread_ptr -> tx_thread_stack_highest_ptr =  stack_ptr;
  0x1000'2782: 0xf8c0 0x30cc   STR.W    R3, [R0, #0xcc]
                 ??_tx_thread_stack_analyze_1:
  //     TX_RESTORE
  0x1000'2786: 0x002e          MOVS     R6, R5
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'2788: 0xf386 0x8810   MSR      PRIMASK, R6
  // }
  0x1000'278c: 0xbcf0          POP      {R4-R7}
  0x1000'278e: 0x4770          BX       LR
                 `$d.32`:
                 ??_tx_thread_stack_analyze_0:
  0x1000'2790: 0x5448'5244     DC32     0x5448'5244            ; 'DRHT'
                 $t:
                 `.text_3`:
                 _tx_thread_system_ni_suspend:
  // VOID  _tx_thread_system_ni_suspend(TX_THREAD *thread_ptr, ULONG wait_option)
  // {
  0x1000'2794: 0xe92d 0x4ff0   PUSH.W   {R4-R11, LR}
  0x1000'2798: 0xb085          SUB      SP, SP, #0x14
  0x1000'279a: 0x0004          MOVS     R4, R0
  0x1000'279c: 0x000d          MOVS     R5, R1
  //     TX_THREAD_GET_CURRENT(current_thread)
  0x1000'279e: 0x48b8          LDR.N    R0, ??DataTable1_1     ; _tx_thread_current_ptr
  0x1000'27a0: 0x6806          LDR      R6, [R0]
  //     if (thread_ptr == current_thread)
  0x1000'27a2: 0x42b4          CMP      R4, R6
  0x1000'27a4: 0xd10c          BNE.N    ??_tx_thread_system_ni_suspend_0
                                                               ; 0x1000'27c0
  //         if (wait_option != TX_NO_WAIT)
  0x1000'27a6: 0x2d00          CMP      R5, #0
  0x1000'27a8: 0xd007          BEQ.N    ??_tx_thread_system_ni_suspend_1
                                                               ; 0x1000'27ba
  //             if (wait_option != TX_WAIT_FOREVER)
  0x1000'27aa: 0xf115 0x0f01   CMN.W    R5, #1
  0x1000'27ae: 0xd004          BEQ.N    ??_tx_thread_system_ni_suspend_1
                                                               ; 0x1000'27ba
  //                 thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
  0x1000'27b0: 0x64e5          STR      R5, [R4, #0x4c]
  //                 _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
  0x1000'27b2: 0xf114 0x004c   ADDS.W   R0, R4, #76            ; 0x4c
  0x1000'27b6: 0xf000 0xf97d   BL       _tx_timer_system_activate
                                                               ; 0x1000'2ab4
                 ??_tx_thread_system_ni_suspend_1:
  //         _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
  0x1000'27ba: 0x69e1          LDR      R1, [R4, #0x1c]
  0x1000'27bc: 0x48b1          LDR.N    R0, ??DataTable1_2     ; _tx_timer_time_slice
  0x1000'27be: 0x6001          STR      R1, [R0]
                 ??_tx_thread_system_ni_suspend_0:
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'27c0: 0xf3ef 0x8910   MRS      R9, PRIMASK
  //     return(posture);
  0x1000'27c4: 0xb672          CPSID    i
  //     return(int_posture);
  0x1000'27c6: 0x2c00          CMP      R4, #0
  0x1000'27c8: 0xd039          BEQ.N    ??_tx_thread_system_ni_suspend_2
                                                               ; 0x1000'283e
  0x1000'27ca: 0x6821          LDR      R1, [R4]
  0x1000'27cc: 0x48ae          LDR.N    R0, ??DataTable1_3     ; 0x5448'5244
  0x1000'27ce: 0x4281          CMP      R1, R0
  0x1000'27d0: 0xd135          BNE.N    ??_tx_thread_system_ni_suspend_2
                                                               ; 0x1000'283e
  //     TX_THREAD_STACK_CHECK(thread_ptr)
  0x1000'27d2: 0x68a0          LDR      R0, [R4, #0x8]
  0x1000'27d4: 0xf8d4 0x10cc   LDR.W    R1, [R4, #0xcc]
  0x1000'27d8: 0x4288          CMP      R0, R1
  0x1000'27da: 0xd202          BCS.N    ??_tx_thread_system_ni_suspend_3
                                                               ; 0x1000'27e2
  //     TX_THREAD_STACK_CHECK(thread_ptr)
  0x1000'27dc: 0x68a0          LDR      R0, [R4, #0x8]
  0x1000'27de: 0xf8c4 0x00cc   STR.W    R0, [R4, #0xcc]
                 ??_tx_thread_system_ni_suspend_3:
  //     TX_THREAD_STACK_CHECK(thread_ptr)
  0x1000'27e2: 0x68e0          LDR      R0, [R4, #0xc]
  0x1000'27e4: 0x6800          LDR      R0, [R0]
  0x1000'27e6: 0xf8d4 0x10d4   LDR.W    R1, [R4, #0xd4]
  0x1000'27ea: 0x4288          CMP      R0, R1
  0x1000'27ec: 0xd10b          BNE.N    ??_tx_thread_system_ni_suspend_4
                                                               ; 0x1000'2806
  0x1000'27ee: 0x6920          LDR      R0, [R4, #0x10]
  0x1000'27f0: 0xf8d0 0x0001   LDR.W    R0, [R0, #0x1]
  0x1000'27f4: 0xf8d4 0x10d4   LDR.W    R1, [R4, #0xd4]
  0x1000'27f8: 0x4288          CMP      R0, R1
  0x1000'27fa: 0xd104          BNE.N    ??_tx_thread_system_ni_suspend_4
                                                               ; 0x1000'2806
  0x1000'27fc: 0xf8d4 0x00cc   LDR.W    R0, [R4, #0xcc]
  0x1000'2800: 0x68e1          LDR      R1, [R4, #0xc]
  0x1000'2802: 0x4288          CMP      R0, R1
  0x1000'2804: 0xd209          BCS.N    ??_tx_thread_system_ni_suspend_5
                                                               ; 0x1000'281a
                 ??_tx_thread_system_ni_suspend_4:
  //     TX_THREAD_STACK_CHECK(thread_ptr)
  0x1000'2806: 0x464f          MOV      R7, R9
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'2808: 0xf387 0x8810   MSR      PRIMASK, R7
  // }
  0x1000'280c: 0x0020          MOVS     R0, R4
  0x1000'280e: 0xf7ff 0xff63   BL       _tx_thread_stack_error_handler
                                                               ; 0x1000'26d8
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'2812: 0xf3ef 0x8010   MRS      R0, PRIMASK
  //     return(posture);
  0x1000'2816: 0xb672          CPSID    i
  //     return(int_posture);
  0x1000'2818: 0x4681          MOV      R9, R0
                 ??_tx_thread_system_ni_suspend_5:
  //     TX_THREAD_STACK_CHECK(thread_ptr)
  0x1000'281a: 0xf8d4 0x00cc   LDR.W    R0, [R4, #0xcc]
  0x1000'281e: 0xf850 0x0c04   LDR.W    R0, [R0, #-0x4]
  0x1000'2822: 0xf8d4 0x10d4   LDR.W    R1, [R4, #0xd4]
  0x1000'2826: 0x4288          CMP      R0, R1
  0x1000'2828: 0xd009          BEQ.N    ??_tx_thread_system_ni_suspend_2
                                                               ; 0x1000'283e
  //     TX_THREAD_STACK_CHECK(thread_ptr)
  0x1000'282a: 0x464f          MOV      R7, R9
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'282c: 0xf387 0x8810   MSR      PRIMASK, R7
  // }
  0x1000'2830: 0x0020          MOVS     R0, R4
  0x1000'2832: 0xf7ff 0xff63   BL       _tx_thread_stack_analyze
                                                               ; 0x1000'26fc
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'2836: 0xf3ef 0x8010   MRS      R0, PRIMASK
  //     return(posture);
  0x1000'283a: 0xb672          CPSID    i
  //     return(int_posture);
  0x1000'283c: 0x4681          MOV      R9, R0
                 ??_tx_thread_system_ni_suspend_2:
  //     TX_THREAD_STACK_CHECK(thread_ptr)
  0x1000'283e: 0x4648          MOV      R0, R9
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'2840: 0xf380 0x8810   MSR      PRIMASK, R0
  // }
  0x1000'2844: 0xf8d4 0x10a8   LDR.W    R1, [R4, #0xa8]
  0x1000'2848: 0x1c49          ADDS     R1, R1, #1
  0x1000'284a: 0xf8c4 0x10a8   STR.W    R1, [R4, #0xa8]
  //     _tx_thread_performance_suspend_count++;
  0x1000'284e: 0x4a8f          LDR.N    R2, ??DataTable1_4     ; _tx_thread_performance_suspend_count
  0x1000'2850: 0x6811          LDR      R1, [R2]
  0x1000'2852: 0x1c49          ADDS     R1, R1, #1
  0x1000'2854: 0x6011          STR      R1, [R2]
  //     priority =  thread_ptr -> tx_thread_priority;
  0x1000'2856: 0x6ae7          LDR      R7, [R4, #0x2c]
  //     ready_next =      thread_ptr -> tx_thread_ready_next;
  0x1000'2858: 0xf8d4 0x8020   LDR.W    R8, [R4, #0x20]
  //     if (ready_next != thread_ptr)
  0x1000'285c: 0x45a0          CMP      R8, R4
  0x1000'285e: 0xd00d          BEQ.N    ??_tx_thread_system_ni_suspend_6
                                                               ; 0x1000'287c
  //         ready_previous =  thread_ptr -> tx_thread_ready_previous;
  0x1000'2860: 0x6a60          LDR      R0, [R4, #0x24]
  0x1000'2862: 0x4683          MOV      R11, R0
  //         ready_next -> tx_thread_ready_previous =    ready_previous;
  0x1000'2864: 0xf8c8 0xb024   STR.W    R11, [R8, #0x24]
  //         ready_previous -> tx_thread_ready_next =    ready_next;
  0x1000'2868: 0xf8cb 0x8020   STR.W    R8, [R11, #0x20]
  //         if (_tx_thread_priority_list[priority] == thread_ptr)
  0x1000'286c: 0x4988          LDR.N    R1, ??DataTable1_5     ; _tx_thread_priority_list
  0x1000'286e: 0xf851 0x0027   LDR.W    R0, [R1, R7, LSL #2]
  0x1000'2872: 0x42a0          CMP      R0, R4
  0x1000'2874: 0xd13e          BNE.N    ??_tx_thread_system_ni_suspend_7
                                                               ; 0x1000'28f4
  //             _tx_thread_priority_list[priority] =  ready_next;
  0x1000'2876: 0xf841 0x8027   STR.W    R8, [R1, R7, LSL #2]
  0x1000'287a: 0xe03b          B.N      ??_tx_thread_system_ni_suspend_7
                                                               ; 0x1000'28f4
                 ??_tx_thread_system_ni_suspend_6:
  //         _tx_thread_priority_list[priority] =    TX_NULL;
  0x1000'287c: 0x2100          MOVS     R1, #0
  0x1000'287e: 0x4884          LDR.N    R0, ??DataTable1_5     ; _tx_thread_priority_list
  0x1000'2880: 0xf840 0x1027   STR.W    R1, [R0, R7, LSL #2]
  //         TX_MOD32_BIT_SET(priority, priority_bit)
  0x1000'2884: 0x2201          MOVS     R2, #1
  0x1000'2886: 0x40ba          LSLS     R2, R2, R7
  //         _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
  0x1000'2888: 0x4882          LDR.N    R0, ??DataTable1_6     ; _tx_thread_priority_maps
  0x1000'288a: 0x6801          LDR      R1, [R0]
  0x1000'288c: 0x4391          BICS     R1, R1, R2
  0x1000'288e: 0x6001          STR      R1, [R0]
  //         base_priority =   ((UINT) 0);
  0x1000'2890: 0x2100          MOVS     R1, #0
  0x1000'2892: 0x9103          STR      R1, [SP, #0xc]
  //         priority_map =    _tx_thread_priority_maps[MAP_INDEX];
  0x1000'2894: 0x6800          LDR      R0, [R0]
  0x1000'2896: 0x9000          STR      R0, [SP]
  //         if (priority_map == ((ULONG) 0))
  0x1000'2898: 0x9800          LDR      R0, [SP]
  0x1000'289a: 0x2800          CMP      R0, #0
  0x1000'289c: 0xd11f          BNE.N    ??_tx_thread_system_ni_suspend_8
                                                               ; 0x1000'28de
  //             _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
  0x1000'289e: 0x2020          MOVS     R0, #32                ; 0x20
  0x1000'28a0: 0x497d          LDR.N    R1, ??DataTable1_7     ; _tx_thread_highest_priority
  0x1000'28a2: 0x6008          STR      R0, [R1]
  //             _tx_thread_execute_ptr =       TX_NULL;
  0x1000'28a4: 0x2100          MOVS     R1, #0
  0x1000'28a6: 0x487d          LDR.N    R0, ??DataTable1_8     ; _tx_thread_execute_ptr
  0x1000'28a8: 0x6001          STR      R1, [R0]
  //             TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
  0x1000'28aa: 0x4874          LDR.N    R0, ??DataTable1       ; _tx_thread_preempt_disable
  0x1000'28ac: 0x6800          LDR      R0, [R0]
  //             if (combined_flags == ((ULONG) 0))
  0x1000'28ae: 0x2800          CMP      R0, #0
  0x1000'28b0: 0xd114          BNE.N    ??_tx_thread_system_ni_suspend_9
                                                               ; 0x1000'28dc
  //                 _tx_thread_performance_idle_return_count++;
  0x1000'28b2: 0x497b          LDR.N    R1, ??DataTable1_9     ; _tx_thread_performance_idle_return_count
  0x1000'28b4: 0x680b          LDR      R3, [R1]
  0x1000'28b6: 0x1c5b          ADDS     R3, R3, #1
  0x1000'28b8: 0x600b          STR      R3, [R1]
  //     *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
  0x1000'28ba: 0xf05f 0x5180   MOVS.W   R1, #268435456         ; 0x1000'0000
  0x1000'28be: 0xf8df 0xc1e4   LDR.W    R12, ??DataTable1_10   ; 0xe000'ed04
  0x1000'28c2: 0xf8cc 0x1000   STR.W    R1, [R12]
  //     if (_tx_ipsr_get() == 0)
  0x1000'28c6: 0xf3ef 0x8105   MRS      R1, IPSR
  0x1000'28ca: 0x2900          CMP      R1, #0
  0x1000'28cc: 0xd106          BNE.N    ??_tx_thread_system_ni_suspend_9
                                                               ; 0x1000'28dc
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'28ce: 0xf3ef 0x8110   MRS      R1, PRIMASK
  //     return(posture);
  0x1000'28d2: 0x000b          MOVS     R3, R1
  //     __asm__ volatile ("CPSIE  i": : : "memory");
  0x1000'28d4: 0xb662          CPSIE    i
  // }
  0x1000'28d6: 0x0019          MOVS     R1, R3
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'28d8: 0xf381 0x8810   MSR      PRIMASK, R1
                 ??_tx_thread_system_ni_suspend_10:
                 ??_tx_thread_system_ni_suspend_9:
  // }
  0x1000'28dc: 0xe0ca          B.N      ??_tx_thread_system_ni_suspend_26
                                                               ; 0x1000'2a74
                 ??_tx_thread_system_ni_suspend_8:
  //             TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
  0x1000'28de: 0x9800          LDR      R0, [SP]
  0x1000'28e0: 0xfa90 0xf0a0   RBIT.W   R0, R0
  0x1000'28e4: 0xfab0 0xf080   CLZ      R0, R0
  0x1000'28e8: 0x9002          STR      R0, [SP, #0x8]
  //             _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
  0x1000'28ea: 0x9903          LDR      R1, [SP, #0xc]
  0x1000'28ec: 0x9802          LDR      R0, [SP, #0x8]
  0x1000'28ee: 0x1841          ADDS     R1, R0, R1
  0x1000'28f0: 0x4869          LDR.N    R0, ??DataTable1_7     ; _tx_thread_highest_priority
  0x1000'28f2: 0x6001          STR      R1, [R0]
                 ??_tx_thread_system_ni_suspend_7:
  //     if (thread_ptr == _tx_thread_execute_ptr)
  0x1000'28f4: 0xf8df 0x91a4   LDR.W    R9, ??DataTable1_8     ; _tx_thread_execute_ptr
  0x1000'28f8: 0xf8d9 0x0000   LDR.W    R0, [R9]
  0x1000'28fc: 0x4284          CMP      R4, R0
  0x1000'28fe: 0xd134          BNE.N    ??_tx_thread_system_ni_suspend_12
                                                               ; 0x1000'296a
  //         _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
  0x1000'2900: 0x4863          LDR.N    R0, ??DataTable1_5     ; _tx_thread_priority_list
  0x1000'2902: 0x4965          LDR.N    R1, ??DataTable1_7     ; _tx_thread_highest_priority
  0x1000'2904: 0x6809          LDR      R1, [R1]
  0x1000'2906: 0xf850 0x0021   LDR.W    R0, [R0, R1, LSL #2]
  0x1000'290a: 0xf8c9 0x0000   STR.W    R0, [R9]
  //         if (_tx_thread_performance_execute_log[_tx_thread_performance__execute_log_index] != _tx_thread_execute_ptr)
  0x1000'290e: 0x4866          LDR.N    R0, ??DataTable1_11    ; _tx_thread_performance__execute_log_index
  0x1000'2910: 0x4966          LDR.N    R1, ??DataTable1_12    ; _tx_thread_performance_execute_log
  0x1000'2912: 0x6802          LDR      R2, [R0]
  0x1000'2914: 0xf851 0x3022   LDR.W    R3, [R1, R2, LSL #2]
  0x1000'2918: 0xf8d9 0x2000   LDR.W    R2, [R9]
  0x1000'291c: 0x4293          CMP      R3, R2
  0x1000'291e: 0xd00c          BEQ.N    ??_tx_thread_system_ni_suspend_13
                                                               ; 0x1000'293a
  //             _tx_thread_performance__execute_log_index++;
  0x1000'2920: 0x6802          LDR      R2, [R0]
  0x1000'2922: 0x1c52          ADDS     R2, R2, #1
  0x1000'2924: 0x6002          STR      R2, [R0]
  //             if (_tx_thread_performance__execute_log_index >= TX_THREAD_EXECUTE_LOG_SIZE)
  0x1000'2926: 0x6802          LDR      R2, [R0]
  0x1000'2928: 0x2a08          CMP      R2, #8
  0x1000'292a: 0xd301          BCC.N    ??_tx_thread_system_ni_suspend_14
                                                               ; 0x1000'2930
  //                 _tx_thread_performance__execute_log_index =  ((UINT) 0);
  0x1000'292c: 0x2200          MOVS     R2, #0
  0x1000'292e: 0x6002          STR      R2, [R0]
                 ??_tx_thread_system_ni_suspend_14:
  //             _tx_thread_performance_execute_log[_tx_thread_performance__execute_log_index] =  _tx_thread_execute_ptr;
  0x1000'2930: 0xf8d9 0x2000   LDR.W    R2, [R9]
  0x1000'2934: 0x6800          LDR      R0, [R0]
  0x1000'2936: 0xf841 0x2020   STR.W    R2, [R1, R0, LSL #2]
                 ??_tx_thread_system_ni_suspend_13:
  //         TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
  0x1000'293a: 0x4850          LDR.N    R0, ??DataTable1       ; _tx_thread_preempt_disable
  0x1000'293c: 0x6800          LDR      R0, [R0]
  //         if (combined_flags == ((ULONG) 0))
  0x1000'293e: 0x2800          CMP      R0, #0
  0x1000'2940: 0xd112          BNE.N    ??_tx_thread_system_ni_suspend_16
                                                               ; 0x1000'2968
  //             _tx_thread_performance_non_idle_return_count++;
  0x1000'2942: 0x495b          LDR.N    R1, ??DataTable1_13    ; _tx_thread_performance_non_idle_return_count
  0x1000'2944: 0x680a          LDR      R2, [R1]
  0x1000'2946: 0x1c52          ADDS     R2, R2, #1
  0x1000'2948: 0x600a          STR      R2, [R1]
  //     *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
  0x1000'294a: 0xf05f 0x5380   MOVS.W   R3, #268435456         ; 0x1000'0000
  0x1000'294e: 0x4955          LDR.N    R1, ??DataTable1_10    ; 0xe000'ed04
  0x1000'2950: 0x600b          STR      R3, [R1]
  //     if (_tx_ipsr_get() == 0)
  0x1000'2952: 0xf3ef 0x8105   MRS      R1, IPSR
  0x1000'2956: 0x2900          CMP      R1, #0
  0x1000'2958: 0xd106          BNE.N    ??_tx_thread_system_ni_suspend_16
                                                               ; 0x1000'2968
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'295a: 0xf3ef 0x8110   MRS      R1, PRIMASK
  //     return(posture);
  0x1000'295e: 0x000a          MOVS     R2, R1
  //     __asm__ volatile ("CPSIE  i": : : "memory");
  0x1000'2960: 0xb662          CPSIE    i
  // }
  0x1000'2962: 0x0011          MOVS     R1, R2
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'2964: 0xf381 0x8810   MSR      PRIMASK, R1
                 ??_tx_thread_system_ni_suspend_15:
                 ??_tx_thread_system_ni_suspend_16:
  // }
  0x1000'2968: 0xe084          B.N      ??_tx_thread_system_ni_suspend_26
                                                               ; 0x1000'2a74
                 ??_tx_thread_system_ni_suspend_12:
  //     if (_tx_thread_performance_execute_log[_tx_thread_performance__execute_log_index] != _tx_thread_execute_ptr)
  0x1000'296a: 0x484f          LDR.N    R0, ??DataTable1_11    ; _tx_thread_performance__execute_log_index
  0x1000'296c: 0x494f          LDR.N    R1, ??DataTable1_12    ; _tx_thread_performance_execute_log
  0x1000'296e: 0x6802          LDR      R2, [R0]
  0x1000'2970: 0xf851 0x3022   LDR.W    R3, [R1, R2, LSL #2]
  0x1000'2974: 0xf8d9 0x2000   LDR.W    R2, [R9]
  0x1000'2978: 0x4293          CMP      R3, R2
  0x1000'297a: 0xd00c          BEQ.N    ??_tx_thread_system_ni_suspend_17
                                                               ; 0x1000'2996
  //         _tx_thread_performance__execute_log_index++;
  0x1000'297c: 0x6802          LDR      R2, [R0]
  0x1000'297e: 0x1c52          ADDS     R2, R2, #1
  0x1000'2980: 0x6002          STR      R2, [R0]
  //         if (_tx_thread_performance__execute_log_index >= TX_THREAD_EXECUTE_LOG_SIZE)
  0x1000'2982: 0x6802          LDR      R2, [R0]
  0x1000'2984: 0x2a08          CMP      R2, #8
  0x1000'2986: 0xd301          BCC.N    ??_tx_thread_system_ni_suspend_18
                                                               ; 0x1000'298c
  //             _tx_thread_performance__execute_log_index =  ((UINT) 0);
  0x1000'2988: 0x2200          MOVS     R2, #0
  0x1000'298a: 0x6002          STR      R2, [R0]
                 ??_tx_thread_system_ni_suspend_18:
  //         _tx_thread_performance_execute_log[_tx_thread_performance__execute_log_index] =  _tx_thread_execute_ptr;
  0x1000'298c: 0xf8d9 0x2000   LDR.W    R2, [R9]
  0x1000'2990: 0x6800          LDR      R0, [R0]
  0x1000'2992: 0xf841 0x2020   STR.W    R2, [R1, R0, LSL #2]
                 ??_tx_thread_system_ni_suspend_17:
  //     if (current_thread != _tx_thread_execute_ptr)
  0x1000'2996: 0xf8d9 0x0000   LDR.W    R0, [R9]
  0x1000'299a: 0x4286          CMP      R6, R0
  0x1000'299c: 0xd06a          BEQ.N    ??_tx_thread_system_ni_suspend_26
                                                               ; 0x1000'2a74
  //         thread_ptr =  _tx_thread_execute_ptr;
  0x1000'299e: 0xf8d9 0x0000   LDR.W    R0, [R9]
  0x1000'29a2: 0x0004          MOVS     R4, R0
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'29a4: 0xf3ef 0x8a10   MRS      R10, PRIMASK
  //     return(posture);
  0x1000'29a8: 0xb672          CPSID    i
  //     return(int_posture);
  0x1000'29aa: 0x2c00          CMP      R4, #0
  0x1000'29ac: 0xd03d          BEQ.N    ??_tx_thread_system_ni_suspend_20
                                                               ; 0x1000'2a2a
  0x1000'29ae: 0x6821          LDR      R1, [R4]
  0x1000'29b0: 0x4835          LDR.N    R0, ??DataTable1_3     ; 0x5448'5244
  0x1000'29b2: 0x4281          CMP      R1, R0
  0x1000'29b4: 0xd139          BNE.N    ??_tx_thread_system_ni_suspend_20
                                                               ; 0x1000'2a2a
  //         TX_THREAD_STACK_CHECK(thread_ptr)
  0x1000'29b6: 0x68a1          LDR      R1, [R4, #0x8]
  0x1000'29b8: 0xf8d4 0x00cc   LDR.W    R0, [R4, #0xcc]
  0x1000'29bc: 0x4281          CMP      R1, R0
  0x1000'29be: 0xd202          BCS.N    ??_tx_thread_system_ni_suspend_21
                                                               ; 0x1000'29c6
  //         TX_THREAD_STACK_CHECK(thread_ptr)
  0x1000'29c0: 0x68a0          LDR      R0, [R4, #0x8]
  0x1000'29c2: 0xf8c4 0x00cc   STR.W    R0, [R4, #0xcc]
                 ??_tx_thread_system_ni_suspend_21:
  //         TX_THREAD_STACK_CHECK(thread_ptr)
  0x1000'29c6: 0x68e0          LDR      R0, [R4, #0xc]
  0x1000'29c8: 0x6801          LDR      R1, [R0]
  0x1000'29ca: 0xf8d4 0x00d4   LDR.W    R0, [R4, #0xd4]
  0x1000'29ce: 0x4281          CMP      R1, R0
  0x1000'29d0: 0xd10b          BNE.N    ??_tx_thread_system_ni_suspend_22
                                                               ; 0x1000'29ea
  0x1000'29d2: 0x6920          LDR      R0, [R4, #0x10]
  0x1000'29d4: 0xf8d0 0x1001   LDR.W    R1, [R0, #0x1]
  0x1000'29d8: 0xf8d4 0x00d4   LDR.W    R0, [R4, #0xd4]
  0x1000'29dc: 0x4281          CMP      R1, R0
  0x1000'29de: 0xd104          BNE.N    ??_tx_thread_system_ni_suspend_22
                                                               ; 0x1000'29ea
  0x1000'29e0: 0xf8d4 0x10cc   LDR.W    R1, [R4, #0xcc]
  0x1000'29e4: 0x68e0          LDR      R0, [R4, #0xc]
  0x1000'29e6: 0x4281          CMP      R1, R0
  0x1000'29e8: 0xd20b          BCS.N    ??_tx_thread_system_ni_suspend_23
                                                               ; 0x1000'2a02
                 ??_tx_thread_system_ni_suspend_22:
  //         TX_THREAD_STACK_CHECK(thread_ptr)
  0x1000'29ea: 0xf8cd 0xa010   STR.W    R10, [SP, #0x10]
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'29ee: 0x9804          LDR      R0, [SP, #0x10]
  0x1000'29f0: 0xf380 0x8810   MSR      PRIMASK, R0
  // }
  0x1000'29f4: 0x0020          MOVS     R0, R4
  0x1000'29f6: 0xf7ff 0xfe6f   BL       _tx_thread_stack_error_handler
                                                               ; 0x1000'26d8
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'29fa: 0xf3ef 0x8010   MRS      R0, PRIMASK
  //     return(posture);
  0x1000'29fe: 0xb672          CPSID    i
  //     return(int_posture);
  0x1000'2a00: 0x4682          MOV      R10, R0
                 ??_tx_thread_system_ni_suspend_23:
  //         TX_THREAD_STACK_CHECK(thread_ptr)
  0x1000'2a02: 0xf8d4 0x00cc   LDR.W    R0, [R4, #0xcc]
  0x1000'2a06: 0xf850 0x1c04   LDR.W    R1, [R0, #-0x4]
  0x1000'2a0a: 0xf8d4 0x00d4   LDR.W    R0, [R4, #0xd4]
  0x1000'2a0e: 0x4281          CMP      R1, R0
  0x1000'2a10: 0xd00b          BEQ.N    ??_tx_thread_system_ni_suspend_20
                                                               ; 0x1000'2a2a
  //         TX_THREAD_STACK_CHECK(thread_ptr)
  0x1000'2a12: 0xf8cd 0xa010   STR.W    R10, [SP, #0x10]
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'2a16: 0x9804          LDR      R0, [SP, #0x10]
  0x1000'2a18: 0xf380 0x8810   MSR      PRIMASK, R0
  // }
  0x1000'2a1c: 0x0020          MOVS     R0, R4
  0x1000'2a1e: 0xf7ff 0xfe6d   BL       _tx_thread_stack_analyze
                                                               ; 0x1000'26fc
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'2a22: 0xf3ef 0x8010   MRS      R0, PRIMASK
  //     return(posture);
  0x1000'2a26: 0xb672          CPSID    i
  //     return(int_posture);
  0x1000'2a28: 0x4682          MOV      R10, R0
                 ??_tx_thread_system_ni_suspend_20:
  //         TX_THREAD_STACK_CHECK(thread_ptr)
  0x1000'2a2a: 0x4651          MOV      R1, R10
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'2a2c: 0xf381 0x8810   MSR      PRIMASK, R1
  // }
  0x1000'2a30: 0x4812          LDR.N    R0, ??DataTable1       ; _tx_thread_preempt_disable
  0x1000'2a32: 0x6800          LDR      R0, [R0]
  0x1000'2a34: 0x9001          STR      R0, [SP, #0x4]
  //         if (combined_flags == ((ULONG) 0))
  0x1000'2a36: 0x9801          LDR      R0, [SP, #0x4]
  0x1000'2a38: 0x2800          CMP      R0, #0
  0x1000'2a3a: 0xd11b          BNE.N    ??_tx_thread_system_ni_suspend_26
                                                               ; 0x1000'2a74
  //             if (_tx_thread_execute_ptr == TX_NULL)
  0x1000'2a3c: 0xf8d9 0x0000   LDR.W    R0, [R9]
  0x1000'2a40: 0x2800          CMP      R0, #0
  0x1000'2a42: 0xd104          BNE.N    ??_tx_thread_system_ni_suspend_24
                                                               ; 0x1000'2a4e
  //                 _tx_thread_performance_idle_return_count++;
  0x1000'2a44: 0x4916          LDR.N    R1, ??DataTable1_9     ; _tx_thread_performance_idle_return_count
  0x1000'2a46: 0x6808          LDR      R0, [R1]
  0x1000'2a48: 0x1c40          ADDS     R0, R0, #1
  0x1000'2a4a: 0x6008          STR      R0, [R1]
  0x1000'2a4c: 0xe003          B.N      ??_tx_thread_system_ni_suspend_25
                                                               ; 0x1000'2a56
                 ??_tx_thread_system_ni_suspend_24:
  //                 _tx_thread_performance_non_idle_return_count++;
  0x1000'2a4e: 0x4918          LDR.N    R1, ??DataTable1_13    ; _tx_thread_performance_non_idle_return_count
  0x1000'2a50: 0x6808          LDR      R0, [R1]
  0x1000'2a52: 0x1c40          ADDS     R0, R0, #1
  0x1000'2a54: 0x6008          STR      R0, [R1]
                 ??_tx_thread_system_ni_suspend_25:
  //     *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
  0x1000'2a56: 0xf05f 0x5280   MOVS.W   R2, #268435456         ; 0x1000'0000
  0x1000'2a5a: 0x4812          LDR.N    R0, ??DataTable1_10    ; 0xe000'ed04
  0x1000'2a5c: 0x6002          STR      R2, [R0]
  //     if (_tx_ipsr_get() == 0)
  0x1000'2a5e: 0xf3ef 0x8005   MRS      R0, IPSR
  0x1000'2a62: 0x2800          CMP      R0, #0
  0x1000'2a64: 0xd106          BNE.N    ??_tx_thread_system_ni_suspend_26
                                                               ; 0x1000'2a74
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'2a66: 0xf3ef 0x8010   MRS      R0, PRIMASK
  //     return(posture);
  0x1000'2a6a: 0x0001          MOVS     R1, R0
  //     __asm__ volatile ("CPSIE  i": : : "memory");
  0x1000'2a6c: 0xb662          CPSIE    i
  // }
  0x1000'2a6e: 0x0008          MOVS     R0, R1
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'2a70: 0xf380 0x8810   MSR      PRIMASK, R0
                 ??_tx_thread_system_ni_suspend_11:
                 ??_tx_thread_system_ni_suspend_19:
                 ??_tx_thread_system_ni_suspend_26:
  // }
  0x1000'2a74: 0xb005          ADD      SP, SP, #0x14
  0x1000'2a76: 0xe8bd 0x8ff0   POP.W    {R4-R11, PC}
  0x1000'2a7a: 0x0000          MOVS     R0, R0
                 `$d.32`:
                 ??DataTable1:
  0x1000'2a7c: 0x3800'23d8     DC32     _tx_thread_preempt_disable
                 ??DataTable1_1:
  0x1000'2a80: 0x3800'23c0     DC32     _tx_thread_current_ptr
                 ??DataTable1_2:
  0x1000'2a84: 0x3800'2440     DC32     _tx_timer_time_slice
                 ??DataTable1_3:
  0x1000'2a88: 0x5448'5244     DC32     0x5448'5244            ; 'DRHT'
                 ??DataTable1_4:
  0x1000'2a8c: 0x3800'23ec     DC32     _tx_thread_performance_suspend_count
                 ??DataTable1_5:
  0x1000'2a90: 0x3800'224c     DC32     _tx_thread_priority_list
                 ??DataTable1_6:
  0x1000'2a94: 0x3800'23d0     DC32     _tx_thread_priority_maps
                 ??DataTable1_7:
  0x1000'2a98: 0x3800'23d4     DC32     _tx_thread_highest_priority
                 ??DataTable1_8:
  0x1000'2a9c: 0x3800'23c4     DC32     _tx_thread_execute_ptr
                 ??DataTable1_9:
  0x1000'2aa0: 0x3800'2400     DC32     _tx_thread_performance_idle_return_count
                 ??DataTable1_10:
  0x1000'2aa4: 0xe000'ed04     DC32     0xe000'ed04            ; '....'
                 ??DataTable1_11:
  0x1000'2aa8: 0x3800'2408     DC32     _tx_thread_performance__execute_log_index
                 ??DataTable1_12:
  0x1000'2aac: 0x3800'2380     DC32     _tx_thread_performance_execute_log
                 ??DataTable1_13:
  0x1000'2ab0: 0x3800'2404     DC32     _tx_thread_performance_non_idle_return_count
                 $t:
                 `.text8`:
                 _tx_timer_system_activate:
  // VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
  // {
  0x1000'2ab4: 0xb4f0          PUSH     {R4-R7}
  //     remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
  0x1000'2ab6: 0x6801          LDR      R1, [R0]
  //     if (remaining_ticks != ((ULONG) 0))
  0x1000'2ab8: 0x2900          CMP      R1, #0
  0x1000'2aba: 0xd031          BEQ.N    ??_tx_timer_system_activate_1
                                                               ; 0x1000'2b20
  //         if (remaining_ticks != TX_WAIT_FOREVER)
  0x1000'2abc: 0xf111 0x0f01   CMN.W    R1, #1
  0x1000'2ac0: 0xd02e          BEQ.N    ??_tx_timer_system_activate_1
                                                               ; 0x1000'2b20
  //             if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
  0x1000'2ac2: 0x6982          LDR      R2, [R0, #0x18]
  0x1000'2ac4: 0x2a00          CMP      R2, #0
  0x1000'2ac6: 0xd12b          BNE.N    ??_tx_timer_system_activate_1
                                                               ; 0x1000'2b20
  //                 if (remaining_ticks > TX_TIMER_ENTRIES)
  0x1000'2ac8: 0x2921          CMP      R1, #33                ; 0x21
  0x1000'2aca: 0xd302          BCC.N    ??_tx_timer_system_activate_2
                                                               ; 0x1000'2ad2
  //                     expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
  0x1000'2acc: 0x221f          MOVS     R2, #31                ; 0x1f
  0x1000'2ace: 0x0017          MOVS     R7, R2
  0x1000'2ad0: 0xe001          B.N      ??_tx_timer_system_activate_3
                                                               ; 0x1000'2ad6
                 ??_tx_timer_system_activate_2:
  //                     expiration_time =  (remaining_ticks - ((ULONG) 1));
  0x1000'2ad2: 0x1e4a          SUBS     R2, R1, #1
  0x1000'2ad4: 0x0017          MOVS     R7, R2
                 ??_tx_timer_system_activate_3:
  //                 timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
  0x1000'2ad6: 0x4a13          LDR.N    R2, ??_tx_timer_system_activate_0
                                                               ; _tx_timer_current_ptr
  0x1000'2ad8: 0x6812          LDR      R2, [R2]
  0x1000'2ada: 0xeb02 0x0287   ADD.W    R2, R2, R7, LSL #2
  0x1000'2ade: 0x0013          MOVS     R3, R2
  //                 if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
  0x1000'2ae0: 0xf8df 0xc044   LDR.W    R12, [PC, #0x44]       ; _tx_timer_list_end
  0x1000'2ae4: 0xf8dc 0x2000   LDR.W    R2, [R12]
  0x1000'2ae8: 0x4293          CMP      R3, R2
  0x1000'2aea: 0xd309          BCC.N    ??_tx_timer_system_activate_4
                                                               ; 0x1000'2b00
  //                     delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
  0x1000'2aec: 0xf8dc 0x2000   LDR.W    R2, [R12]
  0x1000'2af0: 0x1a9a          SUBS     R2, R3, R2
  0x1000'2af2: 0x1092          ASRS     R2, R2, #2
  0x1000'2af4: 0x0016          MOVS     R6, R2
  //                     timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
  0x1000'2af6: 0x4a0d          LDR.N    R2, [PC, #0x34]        ; _tx_timer_list_start
  0x1000'2af8: 0x6812          LDR      R2, [R2]
  0x1000'2afa: 0xeb02 0x0286   ADD.W    R2, R2, R6, LSL #2
  0x1000'2afe: 0x0013          MOVS     R3, R2
                 ??_tx_timer_system_activate_4:
  //                 if ((*timer_list) == TX_NULL)
  0x1000'2b00: 0x681a          LDR      R2, [R3]
  0x1000'2b02: 0x2a00          CMP      R2, #0
  0x1000'2b04: 0xd103          BNE.N    ??_tx_timer_system_activate_5
                                                               ; 0x1000'2b0e
  //                     timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
  0x1000'2b06: 0x6100          STR      R0, [R0, #0x10]
  //                     timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
  0x1000'2b08: 0x6140          STR      R0, [R0, #0x14]
  //                     *timer_list =  timer_ptr;
  0x1000'2b0a: 0x6018          STR      R0, [R3]
  0x1000'2b0c: 0xe007          B.N      ??_tx_timer_system_activate_6
                                                               ; 0x1000'2b1e
                 ??_tx_timer_system_activate_5:
  //                     next_timer =                                        *timer_list;
  0x1000'2b0e: 0x681a          LDR      R2, [R3]
  0x1000'2b10: 0x0014          MOVS     R4, R2
  //                     previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
  0x1000'2b12: 0x6962          LDR      R2, [R4, #0x14]
  0x1000'2b14: 0x0015          MOVS     R5, R2
  //                     previous_timer -> tx_timer_internal_active_next =   timer_ptr;
  0x1000'2b16: 0x6128          STR      R0, [R5, #0x10]
  //                     next_timer -> tx_timer_internal_active_previous =   timer_ptr;
  0x1000'2b18: 0x6160          STR      R0, [R4, #0x14]
  //                     timer_ptr -> tx_timer_internal_active_next =        next_timer;
  0x1000'2b1a: 0x6104          STR      R4, [R0, #0x10]
  //                     timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
  0x1000'2b1c: 0x6145          STR      R5, [R0, #0x14]
                 ??_tx_timer_system_activate_6:
  //                 timer_ptr -> tx_timer_internal_list_head =  timer_list;
  0x1000'2b1e: 0x6183          STR      R3, [R0, #0x18]
                 ??_tx_timer_system_activate_1:
  // }
  0x1000'2b20: 0xbcf0          POP      {R4-R7}
  0x1000'2b22: 0x4770          BX       LR
                 `$d.32`:
                 ??_tx_timer_system_activate_0:
  0x1000'2b24: 0x3800'241c     DC32     _tx_timer_current_ptr
  0x1000'2b28: 0x3800'2418     DC32     _tx_timer_list_end
  0x1000'2b2c: 0x3800'2414     DC32     _tx_timer_list_start
                 $t:
                 `.text8`:
                 _tx_timer_thread_entry:
  // VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
  // {
  0x1000'2b30: 0xe92d 0x4ff1   PUSH.W   {R0, R4-R11, LR}
  0x1000'2b34: 0xb088          SUB      SP, SP, #0x20
  // ULONG                       timeout_param =  ((ULONG) 0);
  0x1000'2b36: 0x2000          MOVS     R0, #0
  0x1000'2b38: 0x9006          STR      R0, [SP, #0x18]
  //     if (timer_thread_input == TX_TIMER_ID)
  0x1000'2b3a: 0x9908          LDR      R1, [SP, #0x20]
  0x1000'2b3c: 0x488a          LDR.N    R0, ??_tx_timer_thread_entry_0
                                                               ; 0x4154'494d
  0x1000'2b3e: 0x4281          CMP      R1, R0
  0x1000'2b40: 0xf040 0x810e   BNE.W    ??_tx_timer_thread_entry_1
                                                               ; 0x1000'2d60
                 ??_tx_timer_thread_entry_2:
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'2b44: 0xf3ef 0x8110   MRS      R1, PRIMASK
  //     return(posture);
  0x1000'2b48: 0xb672          CPSID    i
  //     return(int_posture);
  0x1000'2b4a: 0xf8df 0x9220   LDR.W    R9, [PC, #0x220]       ; _tx_timer_current_ptr
  0x1000'2b4e: 0xf8d9 0x0000   LDR.W    R0, [R9]
  0x1000'2b52: 0x6800          LDR      R0, [R0]
  0x1000'2b54: 0x9000          STR      R0, [SP]
  //             if (expired_timers != TX_NULL)
  0x1000'2b56: 0x9800          LDR      R0, [SP]
  0x1000'2b58: 0x2800          CMP      R0, #0
  0x1000'2b5a: 0xd002          BEQ.N    ??_tx_timer_thread_entry_3
                                                               ; 0x1000'2b62
  //                 expired_timers -> tx_timer_internal_list_head =  &expired_timers;
  0x1000'2b5c: 0x466a          MOV      R2, SP
  0x1000'2b5e: 0x9800          LDR      R0, [SP]
  0x1000'2b60: 0x6182          STR      R2, [R0, #0x18]
                 ??_tx_timer_thread_entry_3:
  //             *_tx_timer_current_ptr =  TX_NULL;
  0x1000'2b62: 0x2200          MOVS     R2, #0
  0x1000'2b64: 0xf8d9 0x0000   LDR.W    R0, [R9]
  0x1000'2b68: 0x6002          STR      R2, [R0]
  //             _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
  0x1000'2b6a: 0xf8d9 0x0000   LDR.W    R0, [R9]
  0x1000'2b6e: 0x1d00          ADDS     R0, R0, #4
  0x1000'2b70: 0xf8c9 0x0000   STR.W    R0, [R9]
  //             if (_tx_timer_current_ptr == _tx_timer_list_end)
  0x1000'2b74: 0xf8d9 0x0000   LDR.W    R0, [R9]
  0x1000'2b78: 0x4a7d          LDR.N    R2, [PC, #0x1f4]       ; _tx_timer_list_end
  0x1000'2b7a: 0x6812          LDR      R2, [R2]
  0x1000'2b7c: 0x4290          CMP      R0, R2
  0x1000'2b7e: 0xd103          BNE.N    ??_tx_timer_thread_entry_4
                                                               ; 0x1000'2b88
  //                 _tx_timer_current_ptr =  _tx_timer_list_start;
  0x1000'2b80: 0x487c          LDR.N    R0, [PC, #0x1f0]       ; _tx_timer_list_start
  0x1000'2b82: 0x6800          LDR      R0, [R0]
  0x1000'2b84: 0xf8c9 0x0000   STR.W    R0, [R9]
                 ??_tx_timer_thread_entry_4:
  //             _tx_timer_expired =  TX_FALSE;
  0x1000'2b88: 0x2200          MOVS     R2, #0
  0x1000'2b8a: 0x487b          LDR.N    R0, [PC, #0x1ec]       ; _tx_timer_expired
  0x1000'2b8c: 0x6002          STR      R2, [R0]
  //             TX_RESTORE
  0x1000'2b8e: 0x0008          MOVS     R0, R1
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'2b90: 0xf380 0x8810   MSR      PRIMASK, R0
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'2b94: 0xf3ef 0x8510   MRS      R5, PRIMASK
  //     return(posture);
  0x1000'2b98: 0xb672          CPSID    i
                 ??_tx_timer_thread_entry_5:
  //     return(int_posture);
  0x1000'2b9a: 0x9800          LDR      R0, [SP]
  0x1000'2b9c: 0x2800          CMP      R0, #0
  0x1000'2b9e: 0xf000 0x80ca   BEQ.W    ??_tx_timer_thread_entry_6
                                                               ; 0x1000'2d36
  //                 current_timer =  expired_timers;
  0x1000'2ba2: 0x9800          LDR      R0, [SP]
  0x1000'2ba4: 0x0007          MOVS     R7, R0
  //                 next_timer =  expired_timers -> tx_timer_internal_active_next;
  0x1000'2ba6: 0x9800          LDR      R0, [SP]
  0x1000'2ba8: 0x6900          LDR      R0, [R0, #0x10]
  0x1000'2baa: 0x0006          MOVS     R6, R0
  //                 reactivate_timer =  TX_NULL;
  0x1000'2bac: 0x2000          MOVS     R0, #0
  0x1000'2bae: 0x9002          STR      R0, [SP, #0x8]
  //                 if (current_timer == next_timer)
  0x1000'2bb0: 0x42b7          CMP      R7, R6
  0x1000'2bb2: 0xd102          BNE.N    ??_tx_timer_thread_entry_7
                                                               ; 0x1000'2bba
  //                     expired_timers =  TX_NULL;
  0x1000'2bb4: 0x2000          MOVS     R0, #0
  0x1000'2bb6: 0x9000          STR      R0, [SP]
  0x1000'2bb8: 0xe008          B.N      ??_tx_timer_thread_entry_8
                                                               ; 0x1000'2bcc
                 ??_tx_timer_thread_entry_7:
  //                     previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
  0x1000'2bba: 0x6978          LDR      R0, [R7, #0x14]
  0x1000'2bbc: 0x9001          STR      R0, [SP, #0x4]
  //                     next_timer -> tx_timer_internal_active_previous =  previous_timer;
  0x1000'2bbe: 0x9801          LDR      R0, [SP, #0x4]
  0x1000'2bc0: 0x6170          STR      R0, [R6, #0x14]
  //                     previous_timer -> tx_timer_internal_active_next =  next_timer;
  0x1000'2bc2: 0x9801          LDR      R0, [SP, #0x4]
  0x1000'2bc4: 0x6106          STR      R6, [R0, #0x10]
  //                     next_timer -> tx_timer_internal_list_head =  &expired_timers;
  0x1000'2bc6: 0x4668          MOV      R0, SP
  0x1000'2bc8: 0x61b0          STR      R0, [R6, #0x18]
  //                     expired_timers =  next_timer;
  0x1000'2bca: 0x9600          STR      R6, [SP]
                 ??_tx_timer_thread_entry_8:
  //                 if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
  0x1000'2bcc: 0x6838          LDR      R0, [R7]
  0x1000'2bce: 0x2821          CMP      R0, #33                ; 0x21
  0x1000'2bd0: 0xd320          BCC.N    ??_tx_timer_thread_entry_9
                                                               ; 0x1000'2c14
  //                     _tx_timer_performance__expiration_adjust_count++;
  0x1000'2bd2: 0x496a          LDR.N    R1, [PC, #0x1a8]       ; _tx_timer_performance__expiration_adjust_count
  0x1000'2bd4: 0x6808          LDR      R0, [R1]
  0x1000'2bd6: 0x1c40          ADDS     R0, R0, #1
  0x1000'2bd8: 0x6008          STR      R0, [R1]
  //                     if (current_timer -> tx_timer_internal_timeout_function != &_tx_thread_timeout)
  0x1000'2bda: 0x68b9          LDR      R1, [R7, #0x8]
  0x1000'2bdc: 0x4868          LDR.N    R0, [PC, #0x1a0]       ; _tx_thread_timeout
  0x1000'2bde: 0x4281          CMP      R1, R0
  0x1000'2be0: 0xd00e          BEQ.N    ??_tx_timer_thread_entry_10
                                                               ; 0x1000'2c00
  //                         TX_USER_TIMER_POINTER_GET(current_timer, timer_ptr)
  0x1000'2be2: 0x003a          MOVS     R2, R7
  //                         TX_USER_TIMER_POINTER_GET(current_timer, timer_ptr)
  0x1000'2be4: 0x0010          MOVS     R0, R2
  //                         TX_USER_TIMER_POINTER_GET(current_timer, timer_ptr)
  0x1000'2be6: 0xf110 0x0108   ADDS.W   R1, R0, #8
  0x1000'2bea: 0x1a09          SUBS     R1, R1, R0
  0x1000'2bec: 0x4249          RSBS     R1, R1, #0
  0x1000'2bee: 0x4411          ADD      R1, R1, R2
  //                         TX_USER_TIMER_POINTER_GET(current_timer, timer_ptr)
  0x1000'2bf0: 0x000c          MOVS     R4, R1
  //                         if (timer_ptr -> tx_timer_id == TX_TIMER_ID)
  0x1000'2bf2: 0x6822          LDR      R2, [R4]
  0x1000'2bf4: 0x495c          LDR.N    R1, ??_tx_timer_thread_entry_0
                                                               ; 0x4154'494d
  0x1000'2bf6: 0x428a          CMP      R2, R1
  0x1000'2bf8: 0xd102          BNE.N    ??_tx_timer_thread_entry_10
                                                               ; 0x1000'2c00
  //                             timer_ptr -> tx_timer_performance__expiration_adjust_count++;
  0x1000'2bfa: 0x6be0          LDR      R0, [R4, #0x3c]
  0x1000'2bfc: 0x1c40          ADDS     R0, R0, #1
  0x1000'2bfe: 0x63e0          STR      R0, [R4, #0x3c]
                 ??_tx_timer_thread_entry_10:
  //                     current_timer -> tx_timer_internal_remaining_ticks =
  //                             current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
  0x1000'2c00: 0x6838          LDR      R0, [R7]
  0x1000'2c02: 0x3820          SUBS     R0, R0, #32            ; 0x20
  0x1000'2c04: 0x6038          STR      R0, [R7]
  //                     timeout_function =  TX_NULL;
  0x1000'2c06: 0x2000          MOVS     R0, #0
  0x1000'2c08: 0x4680          MOV      R8, R0
  //                     current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
  0x1000'2c0a: 0xa802          ADD      R0, SP, #0x8
  0x1000'2c0c: 0x61b8          STR      R0, [R7, #0x18]
  //                     current_timer -> tx_timer_internal_active_next =  current_timer;
  0x1000'2c0e: 0x613f          STR      R7, [R7, #0x10]
  //                     reactivate_timer =  current_timer;
  0x1000'2c10: 0x9702          STR      R7, [SP, #0x8]
  0x1000'2c12: 0xe026          B.N      ??_tx_timer_thread_entry_11
                                                               ; 0x1000'2c62
                 ??_tx_timer_thread_entry_9:
  //                     _tx_timer_performance_expiration_count++;
  0x1000'2c14: 0x495b          LDR.N    R1, [PC, #0x16c]       ; _tx_timer_performance_expiration_count
  0x1000'2c16: 0x6808          LDR      R0, [R1]
  0x1000'2c18: 0x1c40          ADDS     R0, R0, #1
  0x1000'2c1a: 0x6008          STR      R0, [R1]
  //                     if (current_timer -> tx_timer_internal_timeout_function != &_tx_thread_timeout)
  0x1000'2c1c: 0x68b9          LDR      R1, [R7, #0x8]
  0x1000'2c1e: 0x4858          LDR.N    R0, [PC, #0x160]       ; _tx_thread_timeout
  0x1000'2c20: 0x4281          CMP      R1, R0
  0x1000'2c22: 0xd00e          BEQ.N    ??_tx_timer_thread_entry_12
                                                               ; 0x1000'2c42
  //                         TX_USER_TIMER_POINTER_GET(current_timer, timer_ptr)
  0x1000'2c24: 0x003a          MOVS     R2, R7
  //                         TX_USER_TIMER_POINTER_GET(current_timer, timer_ptr)
  0x1000'2c26: 0x0010          MOVS     R0, R2
  //                         TX_USER_TIMER_POINTER_GET(current_timer, timer_ptr)
  0x1000'2c28: 0xf110 0x0108   ADDS.W   R1, R0, #8
  0x1000'2c2c: 0x1a09          SUBS     R1, R1, R0
  0x1000'2c2e: 0x4249          RSBS     R1, R1, #0
  0x1000'2c30: 0x4411          ADD      R1, R1, R2
  //                         TX_USER_TIMER_POINTER_GET(current_timer, timer_ptr)
  0x1000'2c32: 0x000c          MOVS     R4, R1
  //                         if (timer_ptr -> tx_timer_id == TX_TIMER_ID)
  0x1000'2c34: 0x6822          LDR      R2, [R4]
  0x1000'2c36: 0x494c          LDR.N    R1, ??_tx_timer_thread_entry_0
                                                               ; 0x4154'494d
  0x1000'2c38: 0x428a          CMP      R2, R1
  0x1000'2c3a: 0xd102          BNE.N    ??_tx_timer_thread_entry_12
                                                               ; 0x1000'2c42
  //                             timer_ptr -> tx_timer_performance_expiration_count++;
  0x1000'2c3c: 0x6ba0          LDR      R0, [R4, #0x38]
  0x1000'2c3e: 0x1c40          ADDS     R0, R0, #1
  0x1000'2c40: 0x63a0          STR      R0, [R4, #0x38]
                 ??_tx_timer_thread_entry_12:
  //                     timeout_function =  current_timer -> tx_timer_internal_timeout_function;
  0x1000'2c42: 0x68b8          LDR      R0, [R7, #0x8]
  0x1000'2c44: 0x4680          MOV      R8, R0
  //                     timeout_param =     current_timer -> tx_timer_internal_timeout_param;
  0x1000'2c46: 0x68f8          LDR      R0, [R7, #0xc]
  0x1000'2c48: 0x9006          STR      R0, [SP, #0x18]
  //                     current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
  0x1000'2c4a: 0x6878          LDR      R0, [R7, #0x4]
  0x1000'2c4c: 0x6038          STR      R0, [R7]
  //                     if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
  0x1000'2c4e: 0x6838          LDR      R0, [R7]
  0x1000'2c50: 0x2800          CMP      R0, #0
  0x1000'2c52: 0xd004          BEQ.N    ??_tx_timer_thread_entry_13
                                                               ; 0x1000'2c5e
  //                         current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
  0x1000'2c54: 0xa802          ADD      R0, SP, #0x8
  0x1000'2c56: 0x61b8          STR      R0, [R7, #0x18]
  //                         current_timer -> tx_timer_internal_active_next =  current_timer;
  0x1000'2c58: 0x613f          STR      R7, [R7, #0x10]
  //                         reactivate_timer =  current_timer;
  0x1000'2c5a: 0x9702          STR      R7, [SP, #0x8]
  0x1000'2c5c: 0xe001          B.N      ??_tx_timer_thread_entry_11
                                                               ; 0x1000'2c62
                 ??_tx_timer_thread_entry_13:
  //                         current_timer -> tx_timer_internal_list_head =  TX_NULL;
  0x1000'2c5e: 0x2000          MOVS     R0, #0
  0x1000'2c60: 0x61b8          STR      R0, [R7, #0x18]
                 ??_tx_timer_thread_entry_11:
  //                 _tx_timer_expired_timer_ptr =  current_timer;
  0x1000'2c62: 0xf8df 0xb124   LDR.W    R11, [PC, #0x124]      ; _tx_timer_expired_timer_ptr
  0x1000'2c66: 0xf8cb 0x7000   STR.W    R7, [R11]
  //                 TX_RESTORE
  0x1000'2c6a: 0x0029          MOVS     R1, R5
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'2c6c: 0xf381 0x8810   MSR      PRIMASK, R1
  // }
  0x1000'2c70: 0x4640          MOV      R0, R8
  0x1000'2c72: 0x2800          CMP      R0, #0
  0x1000'2c74: 0xd001          BEQ.N    ??_tx_timer_thread_entry_14
                                                               ; 0x1000'2c7a
  //                     (timeout_function) (timeout_param);
  0x1000'2c76: 0x9806          LDR      R0, [SP, #0x18]
  0x1000'2c78: 0x47c0          BLX      R8
                 ??_tx_timer_thread_entry_14:
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'2c7a: 0xf3ef 0x8110   MRS      R1, PRIMASK
  //     return(posture);
  0x1000'2c7e: 0xb672          CPSID    i
  //     return(int_posture);
  0x1000'2c80: 0x2000          MOVS     R0, #0
  0x1000'2c82: 0xf8cb 0x0000   STR.W    R0, [R11]
  //                 if (reactivate_timer == current_timer)
  0x1000'2c86: 0x9802          LDR      R0, [SP, #0x8]
  0x1000'2c88: 0x42b8          CMP      R0, R7
  0x1000'2c8a: 0xd14d          BNE.N    ??_tx_timer_thread_entry_15
                                                               ; 0x1000'2d28
  //                     if (timeout_function != TX_NULL)
  0x1000'2c8c: 0x4640          MOV      R0, R8
  0x1000'2c8e: 0x2800          CMP      R0, #0
  0x1000'2c90: 0xd016          BEQ.N    ??_tx_timer_thread_entry_16
                                                               ; 0x1000'2cc0
  //                         _tx_timer_performance_reactivate_count++;
  0x1000'2c92: 0x483e          LDR.N    R0, [PC, #0xf8]        ; _tx_timer_performance_reactivate_count
  0x1000'2c94: 0x6802          LDR      R2, [R0]
  0x1000'2c96: 0x1c52          ADDS     R2, R2, #1
  0x1000'2c98: 0x6002          STR      R2, [R0]
  //                         if (current_timer -> tx_timer_internal_timeout_function != &_tx_thread_timeout)
  0x1000'2c9a: 0x68ba          LDR      R2, [R7, #0x8]
  0x1000'2c9c: 0x4838          LDR.N    R0, [PC, #0xe0]        ; _tx_thread_timeout
  0x1000'2c9e: 0x4282          CMP      R2, R0
  0x1000'2ca0: 0xd00e          BEQ.N    ??_tx_timer_thread_entry_16
                                                               ; 0x1000'2cc0
  //                             TX_USER_TIMER_POINTER_GET(current_timer, timer_ptr)
  0x1000'2ca2: 0x003b          MOVS     R3, R7
  //                             TX_USER_TIMER_POINTER_GET(current_timer, timer_ptr)
  0x1000'2ca4: 0x0018          MOVS     R0, R3
  //                             TX_USER_TIMER_POINTER_GET(current_timer, timer_ptr)
  0x1000'2ca6: 0xf110 0x0208   ADDS.W   R2, R0, #8
  0x1000'2caa: 0x1a12          SUBS     R2, R2, R0
  0x1000'2cac: 0x4252          RSBS     R2, R2, #0
  0x1000'2cae: 0x441a          ADD      R2, R2, R3
  //                             TX_USER_TIMER_POINTER_GET(current_timer, timer_ptr)
  0x1000'2cb0: 0x0014          MOVS     R4, R2
  //                             if (timer_ptr -> tx_timer_id == TX_TIMER_ID)
  0x1000'2cb2: 0x6823          LDR      R3, [R4]
  0x1000'2cb4: 0x4a2c          LDR.N    R2, ??_tx_timer_thread_entry_0
                                                               ; 0x4154'494d
  0x1000'2cb6: 0x4293          CMP      R3, R2
  0x1000'2cb8: 0xd102          BNE.N    ??_tx_timer_thread_entry_16
                                                               ; 0x1000'2cc0
  //                                 timer_ptr -> tx_timer_performance_reactivate_count++;
  0x1000'2cba: 0x6b20          LDR      R0, [R4, #0x30]
  0x1000'2cbc: 0x1c40          ADDS     R0, R0, #1
  0x1000'2cbe: 0x6320          STR      R0, [R4, #0x30]
                 ??_tx_timer_thread_entry_16:
  //                     if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
  0x1000'2cc0: 0x6838          LDR      R0, [R7]
  0x1000'2cc2: 0x2821          CMP      R0, #33                ; 0x21
  0x1000'2cc4: 0xd302          BCC.N    ??_tx_timer_thread_entry_17
                                                               ; 0x1000'2ccc
  //                         expiration_time =  TX_TIMER_ENTRIES - ((UINT) 1);
  0x1000'2cc6: 0x201f          MOVS     R0, #31                ; 0x1f
  0x1000'2cc8: 0x9003          STR      R0, [SP, #0xc]
  0x1000'2cca: 0xe002          B.N      ??_tx_timer_thread_entry_18
                                                               ; 0x1000'2cd2
                 ??_tx_timer_thread_entry_17:
  //                         expiration_time =  ((UINT) current_timer -> tx_timer_internal_remaining_ticks) - ((UINT) 1);
  0x1000'2ccc: 0x6838          LDR      R0, [R7]
  0x1000'2cce: 0x1e40          SUBS     R0, R0, #1
  0x1000'2cd0: 0x9003          STR      R0, [SP, #0xc]
                 ??_tx_timer_thread_entry_18:
  //                     timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
  0x1000'2cd2: 0xf8d9 0x2000   LDR.W    R2, [R9]
  0x1000'2cd6: 0x9803          LDR      R0, [SP, #0xc]
  0x1000'2cd8: 0xeb02 0x0080   ADD.W    R0, R2, R0, LSL #2
  0x1000'2cdc: 0x4682          MOV      R10, R0
  //                     if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
  0x1000'2cde: 0x4a24          LDR.N    R2, [PC, #0x90]        ; _tx_timer_list_end
  0x1000'2ce0: 0x6810          LDR      R0, [R2]
  0x1000'2ce2: 0x4582          CMP      R10, R0
  0x1000'2ce4: 0xd30a          BCC.N    ??_tx_timer_thread_entry_19
                                                               ; 0x1000'2cfc
  //                         delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
  0x1000'2ce6: 0x6810          LDR      R0, [R2]
  0x1000'2ce8: 0xebba 0x0000   SUBS.W   R0, R10, R0
  0x1000'2cec: 0x1080          ASRS     R0, R0, #2
  0x1000'2cee: 0x9005          STR      R0, [SP, #0x14]
  //                         timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
  0x1000'2cf0: 0x4820          LDR.N    R0, [PC, #0x80]        ; _tx_timer_list_start
  0x1000'2cf2: 0x6802          LDR      R2, [R0]
  0x1000'2cf4: 0x9805          LDR      R0, [SP, #0x14]
  0x1000'2cf6: 0xeb02 0x0080   ADD.W    R0, R2, R0, LSL #2
  0x1000'2cfa: 0x4682          MOV      R10, R0
                 ??_tx_timer_thread_entry_19:
  //                     if ((*timer_list) == TX_NULL)
  0x1000'2cfc: 0xf8da 0x0000   LDR.W    R0, [R10]
  0x1000'2d00: 0x2800          CMP      R0, #0
  0x1000'2d02: 0xd104          BNE.N    ??_tx_timer_thread_entry_20
                                                               ; 0x1000'2d0e
  //                         current_timer -> tx_timer_internal_active_next =      current_timer;
  0x1000'2d04: 0x613f          STR      R7, [R7, #0x10]
  //                         current_timer -> tx_timer_internal_active_previous =  current_timer;
  0x1000'2d06: 0x617f          STR      R7, [R7, #0x14]
  //                         *timer_list =  current_timer;
  0x1000'2d08: 0xf8ca 0x7000   STR.W    R7, [R10]
  0x1000'2d0c: 0xe00a          B.N      ??_tx_timer_thread_entry_21
                                                               ; 0x1000'2d24
                 ??_tx_timer_thread_entry_20:
  //                         next_timer =                                          *timer_list;
  0x1000'2d0e: 0xf8da 0x0000   LDR.W    R0, [R10]
  0x1000'2d12: 0x0006          MOVS     R6, R0
  //                         previous_timer =                                      next_timer -> tx_timer_internal_active_previous;
  0x1000'2d14: 0x6970          LDR      R0, [R6, #0x14]
  0x1000'2d16: 0x9001          STR      R0, [SP, #0x4]
  //                         previous_timer -> tx_timer_internal_active_next =     current_timer;
  0x1000'2d18: 0x9801          LDR      R0, [SP, #0x4]
  0x1000'2d1a: 0x6107          STR      R7, [R0, #0x10]
  //                         next_timer -> tx_timer_internal_active_previous =     current_timer;
  0x1000'2d1c: 0x6177          STR      R7, [R6, #0x14]
  //                         current_timer -> tx_timer_internal_active_next =      next_timer;
  0x1000'2d1e: 0x613e          STR      R6, [R7, #0x10]
  //                         current_timer -> tx_timer_internal_active_previous =  previous_timer;
  0x1000'2d20: 0x9801          LDR      R0, [SP, #0x4]
  0x1000'2d22: 0x6178          STR      R0, [R7, #0x14]
                 ??_tx_timer_thread_entry_21:
  //                     current_timer -> tx_timer_internal_list_head =  timer_list;
  0x1000'2d24: 0xf8c7 0xa018   STR.W    R10, [R7, #0x18]
                 ??_tx_timer_thread_entry_15:
  //                 TX_RESTORE
  0x1000'2d28: 0x0008          MOVS     R0, R1
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'2d2a: 0xf380 0x8810   MSR      PRIMASK, R0
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'2d2e: 0xf3ef 0x8510   MRS      R5, PRIMASK
  //     return(posture);
  0x1000'2d32: 0xb672          CPSID    i
  //     return(int_posture);
  0x1000'2d34: 0xe731          B.N      ??_tx_timer_thread_entry_5
                                                               ; 0x1000'2b9a
                 ??_tx_timer_thread_entry_6:
  //             if (_tx_timer_expired == TX_FALSE)
  0x1000'2d36: 0x4810          LDR.N    R0, [PC, #0x40]        ; _tx_timer_expired
  0x1000'2d38: 0x6800          LDR      R0, [R0]
  0x1000'2d3a: 0x2800          CMP      R0, #0
  0x1000'2d3c: 0xd10c          BNE.N    ??_tx_timer_thread_entry_22
                                                               ; 0x1000'2d58
  //                 thread_ptr =  &_tx_timer_thread;
  0x1000'2d3e: 0x4814          LDR.N    R0, [PC, #0x50]        ; _tx_timer_thread
  0x1000'2d40: 0x9004          STR      R0, [SP, #0x10]
  //                 thread_ptr -> tx_thread_state =  TX_SUSPENDED;
  0x1000'2d42: 0x2103          MOVS     R1, #3
  0x1000'2d44: 0x9804          LDR      R0, [SP, #0x10]
  0x1000'2d46: 0x6301          STR      R1, [R0, #0x30]
  //                 _tx_thread_system_ni_suspend(thread_ptr, ((ULONG) 0));
  0x1000'2d48: 0x2100          MOVS     R1, #0
  0x1000'2d4a: 0x9804          LDR      R0, [SP, #0x10]
  0x1000'2d4c: 0xf7ff 0xfd22   BL       _tx_thread_system_ni_suspend
                                                               ; 0x1000'2794
  //                 TX_RESTORE
  0x1000'2d50: 0x0028          MOVS     R0, R5
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'2d52: 0xf380 0x8810   MSR      PRIMASK, R0
  // }
  0x1000'2d56: 0xe6f5          B.N      ??_tx_timer_thread_entry_2
                                                               ; 0x1000'2b44
                 ??_tx_timer_thread_entry_22:
  //                 TX_RESTORE
  0x1000'2d58: 0x0028          MOVS     R0, R5
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'2d5a: 0xf380 0x8810   MSR      PRIMASK, R0
  // }
  0x1000'2d5e: 0xe6f1          B.N      ??_tx_timer_thread_entry_2
                                                               ; 0x1000'2b44
                 ??_tx_timer_thread_entry_1:
  // }
  0x1000'2d60: 0xb009          ADD      SP, SP, #0x24
  0x1000'2d62: 0xe8bd 0x8ff0   POP.W    {R4-R11, PC}
  0x1000'2d66: 0xbf00          NOP
                 `$d.32`:
                 ??_tx_timer_thread_entry_0:
  0x1000'2d68: 0x4154'494d     DC32     0x4154'494d            ; 'MITA'
  0x1000'2d6c: 0x3800'241c     DC32     _tx_timer_current_ptr
  0x1000'2d70: 0x3800'2418     DC32     _tx_timer_list_end
  0x1000'2d74: 0x3800'2414     DC32     _tx_timer_list_start
  0x1000'2d78: 0x3800'2420     DC32     _tx_timer_expired
  0x1000'2d7c: 0x3800'243c     DC32     _tx_timer_performance__expiration_adjust_count
  0x1000'2d80: 0x1000'3ff1     DC32     _tx_thread_timeout
  0x1000'2d84: 0x3800'2438     DC32     _tx_timer_performance_expiration_count
  0x1000'2d88: 0x3800'2424     DC32     _tx_timer_expired_timer_ptr
  0x1000'2d8c: 0x3800'2434     DC32     _tx_timer_performance_reactivate_count
  0x1000'2d90: 0x3800'20f0     DC32     _tx_timer_thread
                 $t:
                 `.text8`:
                 _tx_thread_create:
  // UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
  //                             VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
  //                             ULONG time_slice, UINT auto_start)
  // {
  0x1000'2d94: 0xe92d 0x4ffe   PUSH.W   {R1-R11, LR}
  0x1000'2d98: 0xb086          SUB      SP, SP, #0x18
  0x1000'2d9a: 0x4683          MOV      R11, R0
  0x1000'2d9c: 0xf8dd 0xa048   LDR.W    R10, [SP, #0x48]
  0x1000'2da0: 0x9f13          LDR      R7, [SP, #0x4c]
  0x1000'2da2: 0x9c14          LDR      R4, [SP, #0x50]
  0x1000'2da4: 0x9d16          LDR      R5, [SP, #0x58]
  // UINT                    saved_threshold =  ((UINT) 0);
  0x1000'2da6: 0x2600          MOVS     R6, #0
  //     thread_ptr -> tx_thread_stack_fill_value = ((ULONG) TX_RAND()) & 0xFFUL;
  0x1000'2da8: 0xf000 0xf8da   BL       rand                   ; 0x1000'2f60
  0x1000'2dac: 0xf000 0x00ff   AND.W    R0, R0, #255           ; 0xff
  0x1000'2db0: 0xf8cb 0x00d4   STR.W    R0, [R11, #0xd4]
  //     thread_ptr -> tx_thread_stack_fill_value = thread_ptr -> tx_thread_stack_fill_value |
  //                     (thread_ptr -> tx_thread_stack_fill_value << 8) |
  //                     (thread_ptr -> tx_thread_stack_fill_value << 16) |
  //                     (thread_ptr -> tx_thread_stack_fill_value << 24);
  0x1000'2db4: 0xf8db 0x00d4   LDR.W    R0, [R11, #0xd4]
  0x1000'2db8: 0xf8db 0x10d4   LDR.W    R1, [R11, #0xd4]
  0x1000'2dbc: 0xea50 0x2001   ORRS.W   R0, R0, R1, LSL #8
  0x1000'2dc0: 0xf8db 0x10d4   LDR.W    R1, [R11, #0xd4]
  0x1000'2dc4: 0xea50 0x4001   ORRS.W   R0, R0, R1, LSL #16
  0x1000'2dc8: 0xf8db 0x10d4   LDR.W    R1, [R11, #0xd4]
  0x1000'2dcc: 0xea50 0x6001   ORRS.W   R0, R0, R1, LSL #24
  0x1000'2dd0: 0xf8cb 0x00d4   STR.W    R0, [R11, #0xd4]
  //     TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
  0x1000'2dd4: 0x9704          STR      R7, [SP, #0x10]
  0x1000'2dd6: 0xf89b 0x90d4   LDRB.W   R9, [R11, #0xd4]
  0x1000'2dda: 0x46d0          MOV      R8, R10
  //     __aeabi_memset(_D, _N, _C);
  0x1000'2ddc: 0x464a          MOV      R2, R9
  0x1000'2dde: 0x9904          LDR      R1, [SP, #0x10]
  0x1000'2de0: 0x4640          MOV      R0, R8
  0x1000'2de2: 0xf000 0xf909   BL       __aeabi_memset         ; 0x1000'2ff8
  //     return _D;
  0x1000'2de6: 0x08bf          LSRS     R7, R7, #2
  0x1000'2de8: 0xea5f 0x0887   LSLS.W   R8, R7, #2
  0x1000'2dec: 0xf1b8 0x0804   SUBS.W   R8, R8, #4
  //     new_stack_start =  TX_POINTER_TO_ALIGN_TYPE_CONVERT(stack_start);
  0x1000'2df0: 0xf8cd 0xa00c   STR.W    R10, [SP, #0xc]
  //     updated_stack_start =  (((new_stack_start) + ((sizeof(ULONG)) - ((ULONG) 1)) ) & (~((sizeof(ULONG)) - ((ULONG) 1))));
  0x1000'2df4: 0x9f03          LDR      R7, [SP, #0xc]
  0x1000'2df6: 0x1cff          ADDS     R7, R7, #3
  0x1000'2df8: 0x08bf          LSRS     R7, R7, #2
  0x1000'2dfa: 0x00bf          LSLS     R7, R7, #2
  //     if (new_stack_start != updated_stack_start)
  0x1000'2dfc: 0x9803          LDR      R0, [SP, #0xc]
  0x1000'2dfe: 0x42b8          CMP      R0, R7
  0x1000'2e00: 0xd001          BEQ.N    ??_tx_thread_create_1  ; 0x1000'2e06
  //         stack_size =  stack_size - (sizeof(ULONG));
  0x1000'2e02: 0xf1b8 0x0804   SUBS.W   R8, R8, #4
                 ??_tx_thread_create_1:
  //     stack_start =  TX_ALIGN_TYPE_TO_POINTER_CONVERT(updated_stack_start);
  0x1000'2e06: 0x9712          STR      R7, [SP, #0x48]
  //     TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
  0x1000'2e08: 0x20d8          MOVS     R0, #216               ; 0xd8
  0x1000'2e0a: 0x9005          STR      R0, [SP, #0x14]
  0x1000'2e0c: 0x2000          MOVS     R0, #0
  0x1000'2e0e: 0x9004          STR      R0, [SP, #0x10]
  0x1000'2e10: 0x46d9          MOV      R9, R11
  //     __aeabi_memset(_D, _N, _C);
  0x1000'2e12: 0x9a04          LDR      R2, [SP, #0x10]
  0x1000'2e14: 0x9905          LDR      R1, [SP, #0x14]
  0x1000'2e16: 0x4648          MOV      R0, R9
  0x1000'2e18: 0xf000 0xf8ee   BL       __aeabi_memset         ; 0x1000'2ff8
  //     return _D;
  0x1000'2e1c: 0x9806          LDR      R0, [SP, #0x18]
  0x1000'2e1e: 0xf8cb 0x0028   STR.W    R0, [R11, #0x28]
  //     thread_ptr -> tx_thread_entry =             entry_function;
  0x1000'2e22: 0x9807          LDR      R0, [SP, #0x1c]
  0x1000'2e24: 0xf8cb 0x0044   STR.W    R0, [R11, #0x44]
  //     thread_ptr -> tx_thread_entry_parameter =   entry_input;
  0x1000'2e28: 0x9808          LDR      R0, [SP, #0x20]
  0x1000'2e2a: 0xf8cb 0x0048   STR.W    R0, [R11, #0x48]
  //     thread_ptr -> tx_thread_stack_start =       stack_start;
  0x1000'2e2e: 0x9812          LDR      R0, [SP, #0x48]
  0x1000'2e30: 0xf8cb 0x000c   STR.W    R0, [R11, #0xc]
  //     thread_ptr -> tx_thread_stack_size =        stack_size;
  0x1000'2e34: 0xf8cb 0x8014   STR.W    R8, [R11, #0x14]
  //     thread_ptr -> tx_thread_priority =          priority;
  0x1000'2e38: 0xf8cb 0x402c   STR.W    R4, [R11, #0x2c]
  //     thread_ptr -> tx_thread_user_priority =     priority;
  0x1000'2e3c: 0xf8cb 0x4090   STR.W    R4, [R11, #0x90]
  //     thread_ptr -> tx_thread_time_slice =        time_slice;
  0x1000'2e40: 0xf8cb 0x5018   STR.W    R5, [R11, #0x18]
  //     thread_ptr -> tx_thread_new_time_slice =    time_slice;
  0x1000'2e44: 0xf8cb 0x501c   STR.W    R5, [R11, #0x1c]
  //     thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
  0x1000'2e48: 0x2020          MOVS     R0, #32                ; 0x20
  0x1000'2e4a: 0xf8cb 0x0098   STR.W    R0, [R11, #0x98]
  //     temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
  0x1000'2e4e: 0x9812          LDR      R0, [SP, #0x48]
  //     temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
  0x1000'2e50: 0x4440          ADD      R0, R0, R8
  0x1000'2e52: 0xf1b0 0x0901   SUBS.W   R9, R0, #1
  //     thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
  0x1000'2e56: 0xf8cb 0x9010   STR.W    R9, [R11, #0x10]
  //     if (priority != preempt_threshold)
  0x1000'2e5a: 0x9815          LDR      R0, [SP, #0x54]
  0x1000'2e5c: 0x4284          CMP      R4, R0
  0x1000'2e5e: 0xd006          BEQ.N    ??_tx_thread_create_2  ; 0x1000'2e6e
  //         thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
  0x1000'2e60: 0x2000          MOVS     R0, #0
  0x1000'2e62: 0xf8cb 0x003c   STR.W    R0, [R11, #0x3c]
  //         thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
  0x1000'2e66: 0x2000          MOVS     R0, #0
  0x1000'2e68: 0xf8cb 0x0094   STR.W    R0, [R11, #0x94]
  0x1000'2e6c: 0xe003          B.N      ??_tx_thread_create_3  ; 0x1000'2e76
                 ??_tx_thread_create_2:
  //         thread_ptr -> tx_thread_preempt_threshold =       priority;
  0x1000'2e6e: 0xf8cb 0x403c   STR.W    R4, [R11, #0x3c]
  //         thread_ptr -> tx_thread_user_preempt_threshold =  priority;
  0x1000'2e72: 0xf8cb 0x4094   STR.W    R4, [R11, #0x94]
                 ??_tx_thread_create_3:
  //     thread_ptr -> tx_thread_state =  TX_SUSPENDED;
  0x1000'2e76: 0x2003          MOVS     R0, #3
  0x1000'2e78: 0xf8cb 0x0030   STR.W    R0, [R11, #0x30]
  //     TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
  0x1000'2e7c: 0x4831          LDR.N    R0, ??_tx_thread_create_0
                                                               ; _tx_thread_timeout
  0x1000'2e7e: 0xf8cb 0x0054   STR.W    R0, [R11, #0x54]
  //     TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
  0x1000'2e82: 0xf8cb 0xb058   STR.W    R11, [R11, #0x58]
  //     _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
  0x1000'2e86: 0x4930          LDR.N    R1, [PC, #0xc0]        ; _tx_thread_shell_entry
  0x1000'2e88: 0x4658          MOV      R0, R11
  0x1000'2e8a: 0xf000 0xf8e9   BL       _tx_thread_stack_build ; 0x1000'3060
  //     thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
  0x1000'2e8e: 0xf8db 0x0008   LDR.W    R0, [R11, #0x8]
  0x1000'2e92: 0xf8cb 0x00cc   STR.W    R0, [R11, #0xcc]
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'2e96: 0xf3ef 0x8a10   MRS      R10, PRIMASK
  //     return(posture);
  0x1000'2e9a: 0xb672          CPSID    i
  //     return(int_posture);
  0x1000'2e9c: 0x482b          LDR.N    R0, [PC, #0xac]        ; 0x5448'5244
  0x1000'2e9e: 0xf8cb 0x0000   STR.W    R0, [R11]
  //     if (_tx_thread_created_count == TX_EMPTY)
  0x1000'2ea2: 0x492b          LDR.N    R1, [PC, #0xac]        ; _tx_thread_created_count
  0x1000'2ea4: 0x6808          LDR      R0, [R1]
  0x1000'2ea6: 0x2800          CMP      R0, #0
  0x1000'2ea8: 0xd107          BNE.N    ??_tx_thread_create_4  ; 0x1000'2eba
  //         _tx_thread_created_ptr =                    thread_ptr;
  0x1000'2eaa: 0x482a          LDR.N    R0, [PC, #0xa8]        ; _tx_thread_created_ptr
  0x1000'2eac: 0xf8c0 0xb000   STR.W    R11, [R0]
  //         thread_ptr -> tx_thread_created_next =      thread_ptr;
  0x1000'2eb0: 0xf8cb 0xb088   STR.W    R11, [R11, #0x88]
  //         thread_ptr -> tx_thread_created_previous =  thread_ptr;
  0x1000'2eb4: 0xf8cb 0xb08c   STR.W    R11, [R11, #0x8c]
  0x1000'2eb8: 0xe012          B.N      ??_tx_thread_create_5  ; 0x1000'2ee0
                 ??_tx_thread_create_4:
  //         next_thread =  _tx_thread_created_ptr;
  0x1000'2eba: 0x4826          LDR.N    R0, [PC, #0x98]        ; _tx_thread_created_ptr
  0x1000'2ebc: 0x6800          LDR      R0, [R0]
  0x1000'2ebe: 0x9001          STR      R0, [SP, #0x4]
  //         previous_thread =  next_thread -> tx_thread_created_previous;
  0x1000'2ec0: 0x9801          LDR      R0, [SP, #0x4]
  0x1000'2ec2: 0xf8d0 0x008c   LDR.W    R0, [R0, #0x8c]
  0x1000'2ec6: 0x9002          STR      R0, [SP, #0x8]
  //         next_thread -> tx_thread_created_previous =  thread_ptr;
  0x1000'2ec8: 0x9801          LDR      R0, [SP, #0x4]
  0x1000'2eca: 0xf8c0 0xb08c   STR.W    R11, [R0, #0x8c]
  //         previous_thread -> tx_thread_created_next =  thread_ptr;
  0x1000'2ece: 0x9802          LDR      R0, [SP, #0x8]
  0x1000'2ed0: 0xf8c0 0xb088   STR.W    R11, [R0, #0x88]
  //         thread_ptr -> tx_thread_created_previous =  previous_thread;
  0x1000'2ed4: 0x9802          LDR      R0, [SP, #0x8]
  0x1000'2ed6: 0xf8cb 0x008c   STR.W    R0, [R11, #0x8c]
  //         thread_ptr -> tx_thread_created_next =      next_thread;
  0x1000'2eda: 0x9801          LDR      R0, [SP, #0x4]
  0x1000'2edc: 0xf8cb 0x0088   STR.W    R0, [R11, #0x88]
                 ??_tx_thread_create_5:
  //     _tx_thread_created_count++;
  0x1000'2ee0: 0x6808          LDR      R0, [R1]
  0x1000'2ee2: 0x1c40          ADDS     R0, R0, #1
  0x1000'2ee4: 0x6008          STR      R0, [R1]
  //     if (auto_start == TX_AUTO_START)
  0x1000'2ee6: 0x9817          LDR      R0, [SP, #0x5c]
  0x1000'2ee8: 0x2801          CMP      R0, #1
  0x1000'2eea: 0xd123          BNE.N    ??_tx_thread_create_6  ; 0x1000'2f34
  //         if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
  0x1000'2eec: 0x481a          LDR.N    R0, [PC, #0x68]        ; _tx_thread_system_state
  0x1000'2eee: 0x6801          LDR      R1, [R0]
  0x1000'2ef0: 0xf3ef 0x8005   MRS      R0, IPSR
  0x1000'2ef4: 0x4301          ORRS     R1, R1, R0
  0x1000'2ef6: 0xf1b1 0x3ff0   CMP.W    R1, #-252645136        ; 0xf0f0'f0f0
  0x1000'2efa: 0xd30d          BCC.N    ??_tx_thread_create_7  ; 0x1000'2f18
  //             saved_thread_ptr =  _tx_thread_execute_ptr;
  0x1000'2efc: 0x4817          LDR.N    R0, [PC, #0x5c]        ; _tx_thread_execute_ptr
  0x1000'2efe: 0x6800          LDR      R0, [R0]
  0x1000'2f00: 0x9000          STR      R0, [SP]
  //             if (saved_thread_ptr != TX_NULL)
  0x1000'2f02: 0x9800          LDR      R0, [SP]
  0x1000'2f04: 0x2800          CMP      R0, #0
  0x1000'2f06: 0xd009          BEQ.N    ??_tx_thread_create_8  ; 0x1000'2f1c
  //                 saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
  0x1000'2f08: 0x9800          LDR      R0, [SP]
  0x1000'2f0a: 0x6bc0          LDR      R0, [R0, #0x3c]
  0x1000'2f0c: 0x0006          MOVS     R6, R0
  //                 saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
  0x1000'2f0e: 0x9800          LDR      R0, [SP]
  0x1000'2f10: 0x6ac0          LDR      R0, [R0, #0x2c]
  0x1000'2f12: 0x9900          LDR      R1, [SP]
  0x1000'2f14: 0x63c8          STR      R0, [R1, #0x3c]
  0x1000'2f16: 0xe001          B.N      ??_tx_thread_create_8  ; 0x1000'2f1c
                 ??_tx_thread_create_7:
  //             saved_thread_ptr =  TX_NULL;
  0x1000'2f18: 0x2000          MOVS     R0, #0
  0x1000'2f1a: 0x9000          STR      R0, [SP]
                 ??_tx_thread_create_8:
  //         _tx_thread_system_ni_resume(thread_ptr);
  0x1000'2f1c: 0x4658          MOV      R0, R11
  0x1000'2f1e: 0xf7ff 0xfa01   BL       _tx_thread_system_ni_resume
                                                               ; 0x1000'2324
  //         TX_RESTORE
  0x1000'2f22: 0x4651          MOV      R1, R10
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'2f24: 0xf381 0x8810   MSR      PRIMASK, R1
  // }
  0x1000'2f28: 0x9800          LDR      R0, [SP]
  0x1000'2f2a: 0x2800          CMP      R0, #0
  0x1000'2f2c: 0xd005          BEQ.N    ??_tx_thread_create_9  ; 0x1000'2f3a
  //             saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
  0x1000'2f2e: 0x9800          LDR      R0, [SP]
  0x1000'2f30: 0x63c6          STR      R6, [R0, #0x3c]
  0x1000'2f32: 0xe002          B.N      ??_tx_thread_create_9  ; 0x1000'2f3a
                 ??_tx_thread_create_6:
  //         TX_RESTORE
  0x1000'2f34: 0x4650          MOV      R0, R10
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'2f36: 0xf380 0x8810   MSR      PRIMASK, R0
                 ??_tx_thread_create_9:
  // }
  0x1000'2f3a: 0x2000          MOVS     R0, #0
  0x1000'2f3c: 0xb009          ADD      SP, SP, #0x24
  0x1000'2f3e: 0xe8bd 0x8ff0   POP.W    {R4-R11, PC}
  0x1000'2f42: 0xbf00          NOP
                 `$d.32`:
                 ??_tx_thread_create_0:
  0x1000'2f44: 0x1000'3ff1     DC32     _tx_thread_timeout
  0x1000'2f48: 0x1000'4099     DC32     _tx_thread_shell_entry
  0x1000'2f4c: 0x5448'5244     DC32     0x5448'5244            ; 'DRHT'
  0x1000'2f50: 0x3800'23cc     DC32     _tx_thread_created_count
  0x1000'2f54: 0x3800'23c8     DC32     _tx_thread_created_ptr
  0x1000'2f58: 0x3800'0004     DC32     _tx_thread_system_state
  0x1000'2f5c: 0x3800'23c4     DC32     _tx_thread_execute_ptr
                 $t:
                 `.text8`:
                 rand:
  0x1000'2f60: 0xb5f0          PUSH     {R4-R7, LR}
  0x1000'2f62: 0x4921          LDR.N    R1, ??DataTable1       ; _Rand_rv
  0x1000'2f64: 0x4a21          LDR.N    R2, ??DataTable1_1     ; _Randinit
  0x1000'2f66: 0xf8d1 0x7080   LDR.W    R7, [R1, #0x80]
  0x1000'2f6a: 0x6853          LDR      R3, [R2, #0x4]
  0x1000'2f6c: 0x7810          LDRB     R0, [R2]
  0x1000'2f6e: 0x4d20          LDR.N    R5, ??DataTable1_2     ; 0x3c6e'f35f
  0x1000'2f70: 0x4e20          LDR.N    R6, ??DataTable1_3     ; 0x19'660d
  0x1000'2f72: 0xf06f 0x4400   MVN.W    R4, #-2147483648       ; 0x8000'0000
  0x1000'2f76: 0xbb18          CBNZ     R0, ??rand_0           ; 0x1000'2fc0
  0x1000'2f78: 0x2008          MOVS     R0, #8
                 ??rand_1:
  0x1000'2f7a: 0xfb06 0x5303   MLA      R3, R6, R3, R5
  0x1000'2f7e: 0x4627          MOV      R7, R4
  0x1000'2f80: 0xfbb3 0xf7f7   UDIV     R7, R3, R7
  0x1000'2f84: 0x1e40          SUBS     R0, R0, #1
  0x1000'2f86: 0xfb04 0x3317   MLS      R3, R4, R7, R3
  0x1000'2f8a: 0xd1f6          BNE.N    ??rand_1               ; 0x1000'2f7a
  0x1000'2f8c: 0x460f          MOV      R7, R1
  0x1000'2f8e: 0x2010          MOVS     R0, #16                ; 0x10
                 ??rand_2:
  0x1000'2f90: 0xfb06 0x5303   MLA      R3, R6, R3, R5
  0x1000'2f94: 0x46a6          MOV      LR, R4
  0x1000'2f96: 0xfbb3 0xfefe   UDIV     LR, R3, LR
  0x1000'2f9a: 0xfb04 0x331e   MLS      R3, R4, LR, R3
  0x1000'2f9e: 0x603b          STR      R3, [R7]
  0x1000'2fa0: 0x46a4          MOV      R12, R4
  0x1000'2fa2: 0xf857 0x3b04   LDR.W    R3, [R7], #0x4
  0x1000'2fa6: 0xfb06 0x5303   MLA      R3, R6, R3, R5
  0x1000'2faa: 0xfbb3 0xfcfc   UDIV     R12, R3, R12
  0x1000'2fae: 0xfb04 0x331c   MLS      R3, R4, R12, R3
  0x1000'2fb2: 0x1e40          SUBS     R0, R0, #1
  0x1000'2fb4: 0xf847 0x3b04   STR.W    R3, [R7], #0x4
  0x1000'2fb8: 0xd1ea          BNE.N    ??rand_2               ; 0x1000'2f90
  0x1000'2fba: 0x6fcf          LDR      R7, [R1, #0x7c]
  0x1000'2fbc: 0x2001          MOVS     R0, #1
  0x1000'2fbe: 0x7010          STRB     R0, [R2]
                 ??rand_0:
  0x1000'2fc0: 0xfb06 0x5303   MLA      R3, R6, R3, R5
  0x1000'2fc4: 0x4625          MOV      R5, R4
  0x1000'2fc6: 0xf007 0x071f   AND.W    R7, R7, #31            ; 0x1f
  0x1000'2fca: 0xfbb3 0xf5f5   UDIV     R5, R3, R5
  0x1000'2fce: 0xf851 0x0027   LDR.W    R0, [R1, R7, LSL #2]
  0x1000'2fd2: 0xfb04 0x3315   MLS      R3, R4, R5, R3
  0x1000'2fd6: 0xf841 0x3027   STR.W    R3, [R1, R7, LSL #2]
  0x1000'2fda: 0xf8c1 0x0080   STR.W    R0, [R1, #0x80]
  0x1000'2fde: 0x6053          STR      R3, [R2, #0x4]
  0x1000'2fe0: 0xf020 0x4040   BIC.W    R0, R0, #-1073741824   ; 0xc000'0000
  0x1000'2fe4: 0xbdf0          POP      {R4-R7, PC}
  0x1000'2fe6: 0x0000          MOVS     R0, R0
                 `$d.32`:
                 ??DataTable1:
  0x1000'2fe8: 0x3800'21c8     DC32     _Rand_rv
                 ??DataTable1_1:
  0x1000'2fec: 0x3800'0008     DC32     _Randinit
                 ??DataTable1_2:
  0x1000'2ff0: 0x3c6e'f35f     DC32     0x3c6e'f35f            ; '_.n<'
                 ??DataTable1_3:
  0x1000'2ff4: 0x0019'660d     DC32     0x19'660d              ; '.f..'
                 $t:
                 `.text6`:
                 __iar_Memset:
                 __aeabi_memset:
  0x1000'2ff8: 0xf362 0x220f   BFI      R2, R2, #8, #8
  0x1000'2ffc: 0xf362 0x421f   BFI      R2, R2, #16, #16
                 `.text_1`:
                 __iar_Memset_word:
  0x1000'3000: 0x1840          ADDS     R0, R0, R1
  0x1000'3002: 0xf010 0x0303   ANDS.W   R3, R0, #3
  0x1000'3006: 0xd008          BEQ.N    @1000301a
  0x1000'3008: 0x1ac9          SUBS     R1, R1, R3
  0x1000'300a: 0xd31f          BCC.N    @1000304c
  0x1000'300c: 0x07db          LSLS     R3, R3, #31
  0x1000'300e: 0xbf48          IT       MI
  0x1000'3010: 0xf800 0x2d01   STRBMI.W R2, [R0, #-0x1]!
  0x1000'3014: 0xbf28          IT       CS
  0x1000'3016: 0xf820 0x2d02   STRHCS.W R2, [R0, #-0x2]!
                 @1000301a:
  0x1000'301a: 0x0013          MOVS     R3, R2
  0x1000'301c: 0xb430          PUSH     {R4, R5}
  0x1000'301e: 0x4614          MOV      R4, R2
  0x1000'3020: 0x4615          MOV      R5, R2
                 @10003022:
  0x1000'3022: 0x3910          SUBS     R1, R1, #16            ; 0x10
  0x1000'3024: 0xbf28          IT       CS
  0x1000'3026: 0xe920 0x003c   STMDBCS  R0!, {R2-R5}
  0x1000'302a: 0xd8fa          BHI.N    @10003022
  0x1000'302c: 0x0749          LSLS     R1, R1, #29
  0x1000'302e: 0xbf28          IT       CS
  0x1000'3030: 0xe920 0x000c   STMDBCS  R0!, {R2, R3}
  0x1000'3034: 0xbf48          IT       MI
  0x1000'3036: 0xf840 0x2d04   STRMI.W  R2, [R0, #-0x4]!
  0x1000'303a: 0x0089          LSLS     R1, R1, #2
  0x1000'303c: 0xbf28          IT       CS
  0x1000'303e: 0xf820 0x2d02   STRHCS.W R2, [R0, #-0x2]!
  0x1000'3042: 0xbf48          IT       MI
  0x1000'3044: 0xf800 0x2d01   STRBMI.W R2, [R0, #-0x1]!
  0x1000'3048: 0xbc30          POP      {R4, R5}
  0x1000'304a: 0x4770          BX       LR
                 @1000304c:
  0x1000'304c: 0x18c9          ADDS     R1, R1, R3
  0x1000'304e: 0xbf18          IT       NE
  0x1000'3050: 0xf800 0x2d01   STRBNE.W R2, [R0, #-0x1]!
  0x1000'3054: 0x07cb          LSLS     R3, R1, #31
  0x1000'3056: 0xbf28          IT       CS
  0x1000'3058: 0xf800 0x2d01   STRBCS.W R2, [R0, #-0x1]!
  0x1000'305c: 0x4770          BX       LR
  0x1000'305e: 0x0000          MOVS     R0, R0
                 `.text6`:
                 _tx_thread_stack_build:
  //     LDR     r2, [r0, #16]                           // Pickup end of stack area
  0x1000'3060: 0x6902          LDR      R2, [R0, #0x10]
  //     BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
  0x1000'3062: 0xf022 0x0207   BIC.W    R2, R2, #7
  //     SUB     r2, r2, #68                             // Subtract frame size
  0x1000'3066: 0xf1a2 0x0244   SUB.W    R2, R2, #68            ; 0x44
  //     LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
  0x1000'306a: 0x4b0d          LDR.N    R3, [PC, #0x34]        ; 0xffff'fffd
  //     STR     r3, [r2, #0]                            // Save on the stack
  0x1000'306c: 0x6013          STR      R3, [R2]
  //     MOV     r3, #0                                  // Build initial register value
  0x1000'306e: 0xf04f 0x0300   MOV.W    R3, #0
  //     STR     r3, [r2, #4]                            // Store initial r4
  0x1000'3072: 0x6053          STR      R3, [R2, #0x4]
  //     STR     r3, [r2, #8]                            // Store initial r5
  0x1000'3074: 0x6093          STR      R3, [R2, #0x8]
  //     STR     r3, [r2, #12]                           // Store initial r6
  0x1000'3076: 0x60d3          STR      R3, [R2, #0xc]
  //     STR     r3, [r2, #16]                           // Store initial r7
  0x1000'3078: 0x6113          STR      R3, [R2, #0x10]
  //     STR     r3, [r2, #20]                           // Store initial r8
  0x1000'307a: 0x6153          STR      R3, [R2, #0x14]
  //     STR     r3, [r2, #24]                           // Store initial r9
  0x1000'307c: 0x6193          STR      R3, [R2, #0x18]
  //     STR     r3, [r2, #28]                           // Store initial r10
  0x1000'307e: 0x61d3          STR      R3, [R2, #0x1c]
  //     STR     r3, [r2, #32]                           // Store initial r11
  0x1000'3080: 0x6213          STR      R3, [R2, #0x20]
  //     STR     r3, [r2, #36]                           // Store initial r0
  0x1000'3082: 0x6253          STR      R3, [R2, #0x24]
  //     STR     r3, [r2, #40]                           // Store initial r1
  0x1000'3084: 0x6293          STR      R3, [R2, #0x28]
  //     STR     r3, [r2, #44]                           // Store initial r2
  0x1000'3086: 0x62d3          STR      R3, [R2, #0x2c]
  //     STR     r3, [r2, #48]                           // Store initial r3
  0x1000'3088: 0x6313          STR      R3, [R2, #0x30]
  //     STR     r3, [r2, #52]                           // Store initial r12
  0x1000'308a: 0x6353          STR      R3, [R2, #0x34]
  //     MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
  0x1000'308c: 0xf04f 0x33ff   MOV.W    R3, #-1                ; 0xffff'ffff
  //     STR     r3, [r2, #56]                           // Store initial lr
  0x1000'3090: 0x6393          STR      R3, [R2, #0x38]
  //     STR     r1, [r2, #60]                           // Store initial pc
  0x1000'3092: 0x63d1          STR      R1, [R2, #0x3c]
  //     MOV     r3, #0x01000000                         // Only T-bit need be set
  0x1000'3094: 0xf04f 0x7380   MOV.W    R3, #16777216          ; 0x100'0000
  //     STR     r3, [r2, #64]                           // Store initial xPSR
  0x1000'3098: 0x6413          STR      R3, [R2, #0x40]
  //     STR     r2, [r0, #8]                            // Save stack pointer in thread's
  0x1000'309a: 0x6082          STR      R2, [R0, #0x8]
  //     BX      lr                                      // Return to caller
  0x1000'309c: 0x4770          BX       LR
  0x1000'309e: 0x0000          MOVS     R0, R0
                 `$d.32`:
  //     END
  0x1000'30a0: 0xffff'fffd     DC32     -3                     ; '....'
                 $t:
                 `.text8`:
                 _tx_byte_pool_search:
  // UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
  // {
  0x1000'30a4: 0xe92d 0x4fff   PUSH.W   {R0-R11, LR}
  0x1000'30a8: 0x0006          MOVS     R6, R0
  0x1000'30aa: 0x000c          MOVS     R4, R1
  // UINT            first_free_block_found =  TX_FALSE;
  0x1000'30ac: 0x2200          MOVS     R2, #0
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'30ae: 0xf3ef 0x8810   MRS      R8, PRIMASK
  //     return(posture);
  0x1000'30b2: 0xb672          CPSID    i
  //     return(int_posture);
  0x1000'30b4: 0x68b0          LDR      R0, [R6, #0x8]
  0x1000'30b6: 0xf8d6 0xc00c   LDR.W    R12, [R6, #0xc]
  0x1000'30ba: 0xf1bc 0x0c02   SUBS.W   R12, R12, #2
  0x1000'30be: 0xeb10 0x00cc   ADDS.W   R0, R0, R12, LSL #3
  0x1000'30c2: 0x9003          STR      R0, [SP, #0xc]
  //     if (memory_size >= total_theoretical_available)
  0x1000'30c4: 0x9803          LDR      R0, [SP, #0xc]
  0x1000'30c6: 0x4284          CMP      R4, R0
  0x1000'30c8: 0xd304          BCC.N    ??_tx_byte_pool_search_1
                                                               ; 0x1000'30d4
  //         TX_RESTORE
  0x1000'30ca: 0x46c4          MOV      R12, R8
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'30cc: 0xf38c 0x8810   MSR      PRIMASK, R12
  // }
  0x1000'30d0: 0x2000          MOVS     R0, #0
  0x1000'30d2: 0xe0ad          B.N      ??_tx_byte_pool_search_2
                                                               ; 0x1000'3230
                 ??_tx_byte_pool_search_1:
  //         TX_THREAD_GET_CURRENT(thread_ptr)
  0x1000'30d4: 0x4858          LDR.N    R0, ??_tx_byte_pool_search_0
                                                               ; _tx_thread_current_ptr
  0x1000'30d6: 0x6800          LDR      R0, [R0]
  0x1000'30d8: 0x9001          STR      R0, [SP, #0x4]
  //         pool_ptr -> tx_byte_pool_owner =  thread_ptr;
  0x1000'30da: 0x9801          LDR      R0, [SP, #0x4]
  0x1000'30dc: 0x6230          STR      R0, [R6, #0x20]
  //         current_ptr =      pool_ptr -> tx_byte_pool_search;
  0x1000'30de: 0xf8d6 0xa014   LDR.W    R10, [R6, #0x14]
  //         examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
  0x1000'30e2: 0x68f0          LDR      R0, [R6, #0xc]
  0x1000'30e4: 0x1c40          ADDS     R0, R0, #1
  0x1000'30e6: 0x0001          MOVS     R1, R0
  //         available_bytes =  ((ULONG) 0);
  0x1000'30e8: 0x2000          MOVS     R0, #0
  0x1000'30ea: 0x0003          MOVS     R3, R0
                 ??_tx_byte_pool_search_3:
  //             work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
  0x1000'30ec: 0xf11a 0x0004   ADDS.W   R0, R10, #4
  0x1000'30f0: 0x0005          MOVS     R5, R0
  //             free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
  0x1000'30f2: 0x9500          STR      R5, [SP]
  //             if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
  0x1000'30f4: 0x4851          LDR.N    R0, [PC, #0x144]       ; 0xffff'eeee
  0x1000'30f6: 0xf8dd 0xc000   LDR.W    R12, [SP]
  0x1000'30fa: 0xf8dc 0xc000   LDR.W    R12, [R12]
  0x1000'30fe: 0x4584          CMP      R12, R0
  0x1000'3100: 0xd138          BNE.N    ??_tx_byte_pool_search_4
                                                               ; 0x1000'3174
  //                 if (first_free_block_found == TX_FALSE)
  0x1000'3102: 0x2a00          CMP      R2, #0
  0x1000'3104: 0xd104          BNE.N    ??_tx_byte_pool_search_5
                                                               ; 0x1000'3110
  //                     pool_ptr->tx_byte_pool_search =  current_ptr;
  0x1000'3106: 0xf8c6 0xa014   STR.W    R10, [R6, #0x14]
  //                     first_free_block_found =  TX_TRUE;
  0x1000'310a: 0xf05f 0x0c01   MOVS.W   R12, #1
  0x1000'310e: 0x4662          MOV      R2, R12
                 ??_tx_byte_pool_search_5:
  //                 this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
  0x1000'3110: 0x4657          MOV      R7, R10
  //                 next_ptr =             *this_block_link_ptr;
  0x1000'3112: 0xf8d7 0xc000   LDR.W    R12, [R7]
  0x1000'3116: 0x46e1          MOV      R9, R12
  //                 available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
  0x1000'3118: 0xebb9 0x0c0a   SUBS.W   R12, R9, R10
  //                 available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
  0x1000'311c: 0xf1bc 0x0c08   SUBS.W   R12, R12, #8
  0x1000'3120: 0x4663          MOV      R3, R12
  //                 if (available_bytes >= memory_size)
  0x1000'3122: 0x42a3          CMP      R3, R4
  0x1000'3124: 0xd24b          BCS.N    ??_tx_byte_pool_search_6
                                                               ; 0x1000'31be
                 ??_tx_byte_pool_search_7:
  //                     available_bytes =  ((ULONG) 0);
  0x1000'3126: 0xf05f 0x0c00   MOVS.W   R12, #0
  0x1000'312a: 0x4663          MOV      R3, R12
  //                     work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
  0x1000'312c: 0xf119 0x0c04   ADDS.W   R12, R9, #4
  0x1000'3130: 0x4665          MOV      R5, R12
  //                     free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
  0x1000'3132: 0x9500          STR      R5, [SP]
  //                     if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
  0x1000'3134: 0xf8dd 0xc000   LDR.W    R12, [SP]
  0x1000'3138: 0xf8dc 0xc000   LDR.W    R12, [R12]
  0x1000'313c: 0x4584          CMP      R12, R0
  0x1000'313e: 0xd111          BNE.N    ??_tx_byte_pool_search_8
                                                               ; 0x1000'3164
  //                         next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
  0x1000'3140: 0x46ce          MOV      LR, R9
  //                         *this_block_link_ptr =  *next_block_link_ptr;
  0x1000'3142: 0xf8de 0xc000   LDR.W    R12, [LR]
  0x1000'3146: 0xf8c7 0xc000   STR.W    R12, [R7]
  //                         pool_ptr -> tx_byte_pool_fragments--;
  0x1000'314a: 0xf8d6 0xc00c   LDR.W    R12, [R6, #0xc]
  0x1000'314e: 0xf1bc 0x0c01   SUBS.W   R12, R12, #1
  0x1000'3152: 0xf8c6 0xc00c   STR.W    R12, [R6, #0xc]
  //                         if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
  0x1000'3156: 0xf8d6 0xc014   LDR.W    R12, [R6, #0x14]
  0x1000'315a: 0x45cc          CMP      R12, R9
  0x1000'315c: 0xd10e          BNE.N    ??_tx_byte_pool_search_9
                                                               ; 0x1000'317c
  //                             pool_ptr -> tx_byte_pool_search =  current_ptr;
  0x1000'315e: 0xf8c6 0xa014   STR.W    R10, [R6, #0x14]
  0x1000'3162: 0xe00b          B.N      ??_tx_byte_pool_search_9
                                                               ; 0x1000'317c
                 ??_tx_byte_pool_search_8:
  //                         next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
  0x1000'3164: 0x46ce          MOV      LR, R9
  //                         current_ptr =  *next_block_link_ptr;
  0x1000'3166: 0xf8de 0xc000   LDR.W    R12, [LR]
  0x1000'316a: 0x46e2          MOV      R10, R12
  //                         if (examine_blocks != ((UINT) 0))
  0x1000'316c: 0x2900          CMP      R1, #0
  0x1000'316e: 0xd005          BEQ.N    ??_tx_byte_pool_search_9
                                                               ; 0x1000'317c
  //                             examine_blocks--;
  0x1000'3170: 0x1e49          SUBS     R1, R1, #1
  0x1000'3172: 0xe003          B.N      ??_tx_byte_pool_search_9
                                                               ; 0x1000'317c
                 ??_tx_byte_pool_search_4:
  //                 this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
  0x1000'3174: 0x4657          MOV      R7, R10
  //                 current_ptr =  *this_block_link_ptr;
  0x1000'3176: 0xf8d7 0xc000   LDR.W    R12, [R7]
  0x1000'317a: 0x46e2          MOV      R10, R12
                 ??_tx_byte_pool_search_9:
  //             if (examine_blocks != ((UINT) 0))
  0x1000'317c: 0x2900          CMP      R1, #0
  0x1000'317e: 0xd000          BEQ.N    ??_tx_byte_pool_search_10
                                                               ; 0x1000'3182
  //                 examine_blocks--;
  0x1000'3180: 0x1e49          SUBS     R1, R1, #1
                 ??_tx_byte_pool_search_10:
  //             TX_RESTORE
  0x1000'3182: 0xf8cd 0x8008   STR.W    R8, [SP, #0x8]
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'3186: 0xf8dd 0xc008   LDR.W    R12, [SP, #0x8]
  0x1000'318a: 0xf38c 0x8810   MSR      PRIMASK, R12
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'318e: 0xf3ef 0x8c10   MRS      R12, PRIMASK
  //     return(posture);
  0x1000'3192: 0xb672          CPSID    i
  //     return(int_posture);
  0x1000'3194: 0x46e0          MOV      R8, R12
  //             if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
  0x1000'3196: 0xf8d6 0xc020   LDR.W    R12, [R6, #0x20]
  0x1000'319a: 0xf8dd 0xb004   LDR.W    R11, [SP, #0x4]
  0x1000'319e: 0x45dc          CMP      R12, R11
  0x1000'31a0: 0xd00b          BEQ.N    ??_tx_byte_pool_search_11
                                                               ; 0x1000'31ba
  //                 current_ptr =      pool_ptr -> tx_byte_pool_search;
  0x1000'31a2: 0xf8d6 0xc014   LDR.W    R12, [R6, #0x14]
  0x1000'31a6: 0x46e2          MOV      R10, R12
  //                 examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
  0x1000'31a8: 0xf8d6 0xc00c   LDR.W    R12, [R6, #0xc]
  0x1000'31ac: 0xf11c 0x0c01   ADDS.W   R12, R12, #1
  0x1000'31b0: 0x4661          MOV      R1, R12
  //                 pool_ptr -> tx_byte_pool_owner =  thread_ptr;
  0x1000'31b2: 0xf8dd 0xc004   LDR.W    R12, [SP, #0x4]
  0x1000'31b6: 0xf8c6 0xc020   STR.W    R12, [R6, #0x20]
                 ??_tx_byte_pool_search_11:
  //         } while(examine_blocks != ((UINT) 0));
  0x1000'31ba: 0x2900          CMP      R1, #0
  0x1000'31bc: 0xd196          BNE.N    ??_tx_byte_pool_search_3
                                                               ; 0x1000'30ec
                 ??_tx_byte_pool_search_6:
  //         if (available_bytes != ((ULONG) 0))
  0x1000'31be: 0x2b00          CMP      R3, #0
  0x1000'31c0: 0xd032          BEQ.N    ??_tx_byte_pool_search_12
                                                               ; 0x1000'3228
  //             if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
  0x1000'31c2: 0xebb3 0x0c04   SUBS.W   R12, R3, R4
  0x1000'31c6: 0xf1bc 0x0f14   CMP.W    R12, #20               ; 0x14
  0x1000'31ca: 0xd318          BCC.N    ??_tx_byte_pool_search_13
                                                               ; 0x1000'31fe
  //                 next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
  0x1000'31cc: 0xeb0a 0x0c04   ADD.W    R12, R10, R4
  0x1000'31d0: 0xf11c 0x0c08   ADDS.W   R12, R12, #8
  0x1000'31d4: 0x46e1          MOV      R9, R12
  //                 next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
  0x1000'31d6: 0x46ce          MOV      LR, R9
  //                 this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
  0x1000'31d8: 0x4657          MOV      R7, R10
  //                 *next_block_link_ptr =  *this_block_link_ptr;
  0x1000'31da: 0xf8d7 0xc000   LDR.W    R12, [R7]
  0x1000'31de: 0xf8ce 0xc000   STR.W    R12, [LR]
  //                 work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
  0x1000'31e2: 0xf119 0x0c04   ADDS.W   R12, R9, #4
  0x1000'31e6: 0x4665          MOV      R5, R12
  //                 free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
  0x1000'31e8: 0x9500          STR      R5, [SP]
  //                 *free_ptr =             TX_BYTE_BLOCK_FREE;
  0x1000'31ea: 0xf8dd 0xc000   LDR.W    R12, [SP]
  0x1000'31ee: 0xf8cc 0x0000   STR.W    R0, [R12]
  //                 pool_ptr -> tx_byte_pool_fragments++;
  0x1000'31f2: 0x68f0          LDR      R0, [R6, #0xc]
  0x1000'31f4: 0x1c40          ADDS     R0, R0, #1
  0x1000'31f6: 0x60f0          STR      R0, [R6, #0xc]
  //                 *this_block_link_ptr =  next_ptr;
  0x1000'31f8: 0xf8c7 0x9000   STR.W    R9, [R7]
  //                 available_bytes =  memory_size;
  0x1000'31fc: 0x0023          MOVS     R3, R4
                 ??_tx_byte_pool_search_13:
  //             work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
  0x1000'31fe: 0xf11a 0x0004   ADDS.W   R0, R10, #4
  0x1000'3202: 0x0005          MOVS     R5, R0
  //             this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
  0x1000'3204: 0x002f          MOVS     R7, R5
  //             *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
  0x1000'3206: 0x603e          STR      R6, [R7]
  //             pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
  0x1000'3208: 0x68b0          LDR      R0, [R6, #0x8]
  0x1000'320a: 0x1ac0          SUBS     R0, R0, R3
  0x1000'320c: 0x3808          SUBS     R0, R0, #8
  0x1000'320e: 0x60b0          STR      R0, [R6, #0x8]
  //             if (current_ptr == pool_ptr -> tx_byte_pool_search)
  0x1000'3210: 0x6970          LDR      R0, [R6, #0x14]
  0x1000'3212: 0x4582          CMP      R10, R0
  0x1000'3214: 0xd102          BNE.N    ??_tx_byte_pool_search_14
                                                               ; 0x1000'321c
  //                 this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
  0x1000'3216: 0x4657          MOV      R7, R10
  //                 pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
  0x1000'3218: 0x6838          LDR      R0, [R7]
  0x1000'321a: 0x6170          STR      R0, [R6, #0x14]
                 ??_tx_byte_pool_search_14:
  //             TX_RESTORE
  0x1000'321c: 0x46c4          MOV      R12, R8
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'321e: 0xf38c 0x8810   MSR      PRIMASK, R12
  // }
  0x1000'3222: 0xf11a 0x0008   ADDS.W   R0, R10, #8
  0x1000'3226: 0xe003          B.N      ??_tx_byte_pool_search_2
                                                               ; 0x1000'3230
                 ??_tx_byte_pool_search_12:
  //             TX_RESTORE
  0x1000'3228: 0x46c4          MOV      R12, R8
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'322a: 0xf38c 0x8810   MSR      PRIMASK, R12
  // }
  0x1000'322e: 0x2000          MOVS     R0, #0
                 ??_tx_byte_pool_search_2:
  //     return(current_ptr);
  0x1000'3230: 0xb004          ADD      SP, SP, #0x10
  0x1000'3232: 0xe8bd 0x8ff0   POP.W    {R4-R11, PC}
  0x1000'3236: 0xbf00          NOP
                 `$d.32`:
                 ??_tx_byte_pool_search_0:
  0x1000'3238: 0x3800'23c0     DC32     _tx_thread_current_ptr
  0x1000'323c: 0xffff'eeee     DC32     -4370                  ; '....'
                 $t:
                 `.text8`:
                 _tx_thread_time_slice:
  // VOID  _tx_thread_time_slice(VOID)
  // {
  0x1000'3240: 0xe92d 0x41f0   PUSH.W   {R4-R8, LR}
  //     TX_THREAD_GET_CURRENT(thread_ptr)
  0x1000'3244: 0x485d          LDR.N    R0, ??_tx_thread_time_slice_0
                                                               ; _tx_thread_current_ptr
  0x1000'3246: 0x6804          LDR      R4, [R0]
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'3248: 0xf3ef 0x8710   MRS      R7, PRIMASK
  //     return(posture);
  0x1000'324c: 0xb672          CPSID    i
  //     return(int_posture);
  0x1000'324e: 0x2c00          CMP      R4, #0
  0x1000'3250: 0xd039          BEQ.N    ??_tx_thread_time_slice_1
                                                               ; 0x1000'32c6
  0x1000'3252: 0x6820          LDR      R0, [R4]
  0x1000'3254: 0x495a          LDR.N    R1, [PC, #0x168]       ; 0x5448'5244
  0x1000'3256: 0x4288          CMP      R0, R1
  0x1000'3258: 0xd135          BNE.N    ??_tx_thread_time_slice_1
                                                               ; 0x1000'32c6
  //     TX_THREAD_STACK_CHECK(thread_ptr)
  0x1000'325a: 0x68a1          LDR      R1, [R4, #0x8]
  0x1000'325c: 0xf8d4 0x00cc   LDR.W    R0, [R4, #0xcc]
  0x1000'3260: 0x4281          CMP      R1, R0
  0x1000'3262: 0xd202          BCS.N    ??_tx_thread_time_slice_2
                                                               ; 0x1000'326a
  //     TX_THREAD_STACK_CHECK(thread_ptr)
  0x1000'3264: 0x68a0          LDR      R0, [R4, #0x8]
  0x1000'3266: 0xf8c4 0x00cc   STR.W    R0, [R4, #0xcc]
                 ??_tx_thread_time_slice_2:
  //     TX_THREAD_STACK_CHECK(thread_ptr)
  0x1000'326a: 0x68e0          LDR      R0, [R4, #0xc]
  0x1000'326c: 0x6801          LDR      R1, [R0]
  0x1000'326e: 0xf8d4 0x00d4   LDR.W    R0, [R4, #0xd4]
  0x1000'3272: 0x4281          CMP      R1, R0
  0x1000'3274: 0xd10b          BNE.N    ??_tx_thread_time_slice_3
                                                               ; 0x1000'328e
  0x1000'3276: 0x6920          LDR      R0, [R4, #0x10]
  0x1000'3278: 0xf8d0 0x1001   LDR.W    R1, [R0, #0x1]
  0x1000'327c: 0xf8d4 0x00d4   LDR.W    R0, [R4, #0xd4]
  0x1000'3280: 0x4281          CMP      R1, R0
  0x1000'3282: 0xd104          BNE.N    ??_tx_thread_time_slice_3
                                                               ; 0x1000'328e
  0x1000'3284: 0xf8d4 0x10cc   LDR.W    R1, [R4, #0xcc]
  0x1000'3288: 0x68e0          LDR      R0, [R4, #0xc]
  0x1000'328a: 0x4281          CMP      R1, R0
  0x1000'328c: 0xd209          BCS.N    ??_tx_thread_time_slice_4
                                                               ; 0x1000'32a2
                 ??_tx_thread_time_slice_3:
  //     TX_THREAD_STACK_CHECK(thread_ptr)
  0x1000'328e: 0x003d          MOVS     R5, R7
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'3290: 0xf385 0x8810   MSR      PRIMASK, R5
  // }
  0x1000'3294: 0x0020          MOVS     R0, R4
  0x1000'3296: 0xf7ff 0xfa1f   BL       _tx_thread_stack_error_handler
                                                               ; 0x1000'26d8
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'329a: 0xf3ef 0x8010   MRS      R0, PRIMASK
  //     return(posture);
  0x1000'329e: 0xb672          CPSID    i
  //     return(int_posture);
  0x1000'32a0: 0x0007          MOVS     R7, R0
                 ??_tx_thread_time_slice_4:
  //     TX_THREAD_STACK_CHECK(thread_ptr)
  0x1000'32a2: 0xf8d4 0x00cc   LDR.W    R0, [R4, #0xcc]
  0x1000'32a6: 0xf850 0x1c04   LDR.W    R1, [R0, #-0x4]
  0x1000'32aa: 0xf8d4 0x00d4   LDR.W    R0, [R4, #0xd4]
  0x1000'32ae: 0x4281          CMP      R1, R0
  0x1000'32b0: 0xd009          BEQ.N    ??_tx_thread_time_slice_1
                                                               ; 0x1000'32c6
  //     TX_THREAD_STACK_CHECK(thread_ptr)
  0x1000'32b2: 0x003d          MOVS     R5, R7
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'32b4: 0xf385 0x8810   MSR      PRIMASK, R5
  // }
  0x1000'32b8: 0x0020          MOVS     R0, R4
  0x1000'32ba: 0xf7ff 0xfa1f   BL       _tx_thread_stack_analyze
                                                               ; 0x1000'26fc
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'32be: 0xf3ef 0x8010   MRS      R0, PRIMASK
  //     return(posture);
  0x1000'32c2: 0xb672          CPSID    i
  //     return(int_posture);
  0x1000'32c4: 0x0007          MOVS     R7, R0
                 ??_tx_thread_time_slice_1:
  //     TX_THREAD_STACK_CHECK(thread_ptr)
  0x1000'32c6: 0x003a          MOVS     R2, R7
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'32c8: 0xf382 0x8810   MSR      PRIMASK, R2
  // }
  0x1000'32cc: 0x2500          MOVS     R5, #0
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'32ce: 0xf3ef 0x8610   MRS      R6, PRIMASK
  //     return(posture);
  0x1000'32d2: 0xb672          CPSID    i
  //     return(int_posture);
  0x1000'32d4: 0x2000          MOVS     R0, #0
  0x1000'32d6: 0x493b          LDR.N    R1, [PC, #0xec]        ; _tx_timer_expired_time_slice
  0x1000'32d8: 0x6008          STR      R0, [R1]
  //     if (thread_ptr != TX_NULL)
  0x1000'32da: 0x2c00          CMP      R4, #0
  0x1000'32dc: 0xd024          BEQ.N    ??_tx_thread_time_slice_5
                                                               ; 0x1000'3328
  //         if (thread_ptr -> tx_thread_state == TX_READY)
  0x1000'32de: 0x6b20          LDR      R0, [R4, #0x30]
  0x1000'32e0: 0x2800          CMP      R0, #0
  0x1000'32e2: 0xd121          BNE.N    ??_tx_thread_time_slice_5
                                                               ; 0x1000'3328
  //             thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
  0x1000'32e4: 0x69e0          LDR      R0, [R4, #0x1c]
  0x1000'32e6: 0x61a0          STR      R0, [R4, #0x18]
  //             _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
  0x1000'32e8: 0x69a1          LDR      R1, [R4, #0x18]
  0x1000'32ea: 0x4837          LDR.N    R0, [PC, #0xdc]        ; _tx_timer_time_slice
  0x1000'32ec: 0x6001          STR      R1, [R0]
  //             if (thread_ptr -> tx_thread_ready_next != thread_ptr)
  0x1000'32ee: 0x6a20          LDR      R0, [R4, #0x20]
  0x1000'32f0: 0x42a0          CMP      R0, R4
  0x1000'32f2: 0xd019          BEQ.N    ??_tx_thread_time_slice_5
                                                               ; 0x1000'3328
  //                 if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
  0x1000'32f4: 0x6ae0          LDR      R0, [R4, #0x2c]
  0x1000'32f6: 0x6be1          LDR      R1, [R4, #0x3c]
  0x1000'32f8: 0x4288          CMP      R0, R1
  0x1000'32fa: 0xd115          BNE.N    ??_tx_thread_time_slice_5
                                                               ; 0x1000'3328
  //                     _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
  0x1000'32fc: 0x4933          LDR.N    R1, [PC, #0xcc]        ; _tx_thread_priority_list
  0x1000'32fe: 0x6a20          LDR      R0, [R4, #0x20]
  0x1000'3300: 0x6ae2          LDR      R2, [R4, #0x2c]
  0x1000'3302: 0xf841 0x0022   STR.W    R0, [R1, R2, LSL #2]
  //                     _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
  0x1000'3306: 0x4832          LDR.N    R0, [PC, #0xc8]        ; _tx_thread_execute_ptr
  0x1000'3308: 0x4a32          LDR.N    R2, [PC, #0xc8]        ; _tx_thread_highest_priority
  0x1000'330a: 0x6812          LDR      R2, [R2]
  0x1000'330c: 0xf851 0x1022   LDR.W    R1, [R1, R2, LSL #2]
  0x1000'3310: 0x6001          STR      R1, [R0]
  //                     thread_ptr -> tx_thread_performance_time_slice_count++;
  0x1000'3312: 0xf8d4 0x10bc   LDR.W    R1, [R4, #0xbc]
  0x1000'3316: 0x1c49          ADDS     R1, R1, #1
  0x1000'3318: 0xf8c4 0x10bc   STR.W    R1, [R4, #0xbc]
  //                     _tx_thread_performance_time_slice_count++;
  0x1000'331c: 0x4a2e          LDR.N    R2, [PC, #0xb8]        ; _tx_thread_performance_time_slice_count
  0x1000'331e: 0x6811          LDR      R1, [R2]
  0x1000'3320: 0x1c49          ADDS     R1, R1, #1
  0x1000'3322: 0x6011          STR      R1, [R2]
  //                     next_thread_ptr =  _tx_thread_execute_ptr;
  0x1000'3324: 0x6800          LDR      R0, [R0]
  0x1000'3326: 0x0005          MOVS     R5, R0
                 ??_tx_thread_time_slice_5:
  //     TX_RESTORE
  0x1000'3328: 0x0030          MOVS     R0, R6
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'332a: 0xf380 0x8810   MSR      PRIMASK, R0
  // }
  0x1000'332e: 0x2d00          CMP      R5, #0
  0x1000'3330: 0xd041          BEQ.N    ??_tx_thread_time_slice_6
                                                               ; 0x1000'33b6
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'3332: 0xf3ef 0x8710   MRS      R7, PRIMASK
  //     return(posture);
  0x1000'3336: 0xb672          CPSID    i
  //     return(int_posture);
  0x1000'3338: 0x2d00          CMP      R5, #0
  0x1000'333a: 0xd039          BEQ.N    ??_tx_thread_time_slice_7
                                                               ; 0x1000'33b0
  0x1000'333c: 0x6829          LDR      R1, [R5]
  0x1000'333e: 0x4820          LDR.N    R0, [PC, #0x80]        ; 0x5448'5244
  0x1000'3340: 0x4281          CMP      R1, R0
  0x1000'3342: 0xd135          BNE.N    ??_tx_thread_time_slice_7
                                                               ; 0x1000'33b0
  //         TX_THREAD_STACK_CHECK(next_thread_ptr)
  0x1000'3344: 0x68a9          LDR      R1, [R5, #0x8]
  0x1000'3346: 0xf8d5 0x00cc   LDR.W    R0, [R5, #0xcc]
  0x1000'334a: 0x4281          CMP      R1, R0
  0x1000'334c: 0xd202          BCS.N    ??_tx_thread_time_slice_8
                                                               ; 0x1000'3354
  //         TX_THREAD_STACK_CHECK(next_thread_ptr)
  0x1000'334e: 0x68a8          LDR      R0, [R5, #0x8]
  0x1000'3350: 0xf8c5 0x00cc   STR.W    R0, [R5, #0xcc]
                 ??_tx_thread_time_slice_8:
  //         TX_THREAD_STACK_CHECK(next_thread_ptr)
  0x1000'3354: 0x68e8          LDR      R0, [R5, #0xc]
  0x1000'3356: 0x6801          LDR      R1, [R0]
  0x1000'3358: 0xf8d4 0x00d4   LDR.W    R0, [R4, #0xd4]
  0x1000'335c: 0x4281          CMP      R1, R0
  0x1000'335e: 0xd10b          BNE.N    ??_tx_thread_time_slice_9
                                                               ; 0x1000'3378
  0x1000'3360: 0x6928          LDR      R0, [R5, #0x10]
  0x1000'3362: 0xf8d0 0x1001   LDR.W    R1, [R0, #0x1]
  0x1000'3366: 0xf8d4 0x00d4   LDR.W    R0, [R4, #0xd4]
  0x1000'336a: 0x4281          CMP      R1, R0
  0x1000'336c: 0xd104          BNE.N    ??_tx_thread_time_slice_9
                                                               ; 0x1000'3378
  0x1000'336e: 0xf8d5 0x10cc   LDR.W    R1, [R5, #0xcc]
  0x1000'3372: 0x68e8          LDR      R0, [R5, #0xc]
  0x1000'3374: 0x4281          CMP      R1, R0
  0x1000'3376: 0xd209          BCS.N    ??_tx_thread_time_slice_10
                                                               ; 0x1000'338c
                 ??_tx_thread_time_slice_9:
  //         TX_THREAD_STACK_CHECK(next_thread_ptr)
  0x1000'3378: 0x46b8          MOV      R8, R7
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'337a: 0xf388 0x8810   MSR      PRIMASK, R8
  // }
  0x1000'337e: 0x0028          MOVS     R0, R5
  0x1000'3380: 0xf7ff 0xf9aa   BL       _tx_thread_stack_error_handler
                                                               ; 0x1000'26d8
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'3384: 0xf3ef 0x8010   MRS      R0, PRIMASK
  //     return(posture);
  0x1000'3388: 0xb672          CPSID    i
  //     return(int_posture);
  0x1000'338a: 0x0007          MOVS     R7, R0
                 ??_tx_thread_time_slice_10:
  //         TX_THREAD_STACK_CHECK(next_thread_ptr)
  0x1000'338c: 0xf8d5 0x00cc   LDR.W    R0, [R5, #0xcc]
  0x1000'3390: 0xf850 0x1c04   LDR.W    R1, [R0, #-0x4]
  0x1000'3394: 0xf8d4 0x00d4   LDR.W    R0, [R4, #0xd4]
  0x1000'3398: 0x4281          CMP      R1, R0
  0x1000'339a: 0xd009          BEQ.N    ??_tx_thread_time_slice_7
                                                               ; 0x1000'33b0
  //         TX_THREAD_STACK_CHECK(next_thread_ptr)
  0x1000'339c: 0x46b8          MOV      R8, R7
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'339e: 0xf388 0x8810   MSR      PRIMASK, R8
  // }
  0x1000'33a2: 0x0028          MOVS     R0, R5
  0x1000'33a4: 0xf7ff 0xf9aa   BL       _tx_thread_stack_analyze
                                                               ; 0x1000'26fc
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'33a8: 0xf3ef 0x8010   MRS      R0, PRIMASK
  //     return(posture);
  0x1000'33ac: 0xb672          CPSID    i
  //     return(int_posture);
  0x1000'33ae: 0x0007          MOVS     R7, R0
                 ??_tx_thread_time_slice_7:
  //         TX_THREAD_STACK_CHECK(next_thread_ptr)
  0x1000'33b0: 0x0038          MOVS     R0, R7
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'33b2: 0xf380 0x8810   MSR      PRIMASK, R0
                 ??_tx_thread_time_slice_6:
  // }
  0x1000'33b6: 0xe8bd 0x81f0   POP.W    {R4-R8, PC}
  0x1000'33ba: 0xbf00          NOP
                 `$d.32`:
                 ??_tx_thread_time_slice_0:
  0x1000'33bc: 0x3800'23c0     DC32     _tx_thread_current_ptr
  0x1000'33c0: 0x5448'5244     DC32     0x5448'5244            ; 'DRHT'
  0x1000'33c4: 0x3800'2410     DC32     _tx_timer_expired_time_slice
  0x1000'33c8: 0x3800'2440     DC32     _tx_timer_time_slice
  0x1000'33cc: 0x3800'224c     DC32     _tx_thread_priority_list
  0x1000'33d0: 0x3800'23c4     DC32     _tx_thread_execute_ptr
  0x1000'33d4: 0x3800'23d4     DC32     _tx_thread_highest_priority
  0x1000'33d8: 0x3800'23f8     DC32     _tx_thread_performance_time_slice_count
                 $t:
                 `.text8`:
                 _txe_thread_create:
  // UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
  //                 VOID (*entry_function)(ULONG id), ULONG entry_input,
  //                 VOID *stack_start, ULONG stack_size,
  //                 UINT priority, UINT preempt_threshold,
  //                 ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
  // {
  0x1000'33dc: 0xe92d 0x4ffe   PUSH.W   {R1-R11, LR}
  0x1000'33e0: 0xb08a          SUB      SP, SP, #0x28
  0x1000'33e2: 0x0004          MOVS     R4, R0
  0x1000'33e4: 0x9d16          LDR      R5, [SP, #0x58]
  0x1000'33e6: 0xf8dd 0xb05c   LDR.W    R11, [SP, #0x5c]
  0x1000'33ea: 0x9f18          LDR      R7, [SP, #0x60]
  //     status =  TX_SUCCESS;
  0x1000'33ec: 0x2600          MOVS     R6, #0
  //     if (thread_ptr == TX_NULL)
  0x1000'33ee: 0x2c00          CMP      R4, #0
  0x1000'33f0: 0xd102          BNE.N    ??_txe_thread_create_1 ; 0x1000'33f8
  //         status =  TX_THREAD_ERROR;
  0x1000'33f2: 0x200e          MOVS     R0, #14                ; 0xe
  0x1000'33f4: 0x0006          MOVS     R6, R0
  0x1000'33f6: 0xe095          B.N      ??_txe_thread_create_2 ; 0x1000'3524
                 ??_txe_thread_create_1:
  //     else if (thread_control_block_size != (sizeof(TX_THREAD)))
  0x1000'33f8: 0x981c          LDR      R0, [SP, #0x70]
  0x1000'33fa: 0x28d8          CMP      R0, #216               ; 0xd8
  0x1000'33fc: 0xd002          BEQ.N    ??_txe_thread_create_3 ; 0x1000'3404
  //         status =  TX_THREAD_ERROR;
  0x1000'33fe: 0x200e          MOVS     R0, #14                ; 0xe
  0x1000'3400: 0x0006          MOVS     R6, R0
  0x1000'3402: 0xe08f          B.N      ??_txe_thread_create_2 ; 0x1000'3524
                 ??_txe_thread_create_3:
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'3404: 0xf3ef 0x8010   MRS      R0, PRIMASK
  //     return(posture);
  0x1000'3408: 0xb672          CPSID    i
  //     return(int_posture);
  0x1000'340a: 0x9006          STR      R0, [SP, #0x18]
  //         _tx_thread_preempt_disable++;
  0x1000'340c: 0x4851          LDR.N    R0, ??_txe_thread_create_0
                                                               ; _tx_thread_preempt_disable
  0x1000'340e: 0x6801          LDR      R1, [R0]
  0x1000'3410: 0x1c49          ADDS     R1, R1, #1
  0x1000'3412: 0x6001          STR      R1, [R0]
  //         TX_RESTORE
  0x1000'3414: 0x9906          LDR      R1, [SP, #0x18]
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'3416: 0xf381 0x8810   MSR      PRIMASK, R1
  // }
  0x1000'341a: 0x2200          MOVS     R2, #0
  0x1000'341c: 0x4690          MOV      R8, R2
  //         next_thread =  _tx_thread_created_ptr;
  0x1000'341e: 0x4a4e          LDR.N    R2, [PC, #0x138]       ; _tx_thread_created_ptr
  0x1000'3420: 0x6812          LDR      R2, [R2]
  0x1000'3422: 0x4692          MOV      R10, R2
  //         work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
  0x1000'3424: 0x002a          MOVS     R2, R5
  //         work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
  0x1000'3426: 0x445a          ADD      R2, R2, R11
  0x1000'3428: 0x1e52          SUBS     R2, R2, #1
  0x1000'342a: 0x9209          STR      R2, [SP, #0x24]
  //         stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
  0x1000'342c: 0x9a09          LDR      R2, [SP, #0x24]
  0x1000'342e: 0x9207          STR      R2, [SP, #0x1c]
  //         for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
  0x1000'3430: 0x2200          MOVS     R2, #0
  0x1000'3432: 0x4691          MOV      R9, R2
                 ??_txe_thread_create_4:
  //         for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
  0x1000'3434: 0x4949          LDR.N    R1, [PC, #0x124]       ; _tx_thread_created_count
  0x1000'3436: 0x6809          LDR      R1, [R1]
  0x1000'3438: 0x4589          CMP      R9, R1
  0x1000'343a: 0xd225          BCS.N    ??_txe_thread_create_5 ; 0x1000'3488
  //             if (thread_ptr == next_thread)
  0x1000'343c: 0x4554          CMP      R4, R10
  0x1000'343e: 0xd101          BNE.N    ??_txe_thread_create_6 ; 0x1000'3444
  //                 break_flag =  TX_TRUE;
  0x1000'3440: 0x2101          MOVS     R1, #1
  0x1000'3442: 0x4688          MOV      R8, R1
                 ??_txe_thread_create_6:
  //             if (break_flag == TX_TRUE)
  0x1000'3444: 0xf1b8 0x0f01   CMP.W    R8, #1
  0x1000'3448: 0xd01e          BEQ.N    ??_txe_thread_create_5 ; 0x1000'3488
                 ??_txe_thread_create_7:
  //             if (stack_start >= next_thread -> tx_thread_stack_start)
  0x1000'344a: 0xf8da 0x100c   LDR.W    R1, [R10, #0xc]
  0x1000'344e: 0x428d          CMP      R5, R1
  0x1000'3450: 0xd307          BCC.N    ??_txe_thread_create_8 ; 0x1000'3462
  //                 if (stack_start < next_thread -> tx_thread_stack_end)
  0x1000'3452: 0xf8da 0x1010   LDR.W    R1, [R10, #0x10]
  0x1000'3456: 0x428d          CMP      R5, R1
  0x1000'3458: 0xd203          BCS.N    ??_txe_thread_create_8 ; 0x1000'3462
  //                     stack_start =  TX_NULL;
  0x1000'345a: 0x2100          MOVS     R1, #0
  0x1000'345c: 0x000d          MOVS     R5, R1
  //                     break_flag =  TX_TRUE;
  0x1000'345e: 0x2101          MOVS     R1, #1
  0x1000'3460: 0x4688          MOV      R8, R1
                 ??_txe_thread_create_8:
  //             if (stack_end >= next_thread -> tx_thread_stack_start)
  0x1000'3462: 0x9907          LDR      R1, [SP, #0x1c]
  0x1000'3464: 0xf8da 0x200c   LDR.W    R2, [R10, #0xc]
  0x1000'3468: 0x4291          CMP      R1, R2
  0x1000'346a: 0xd308          BCC.N    ??_txe_thread_create_9 ; 0x1000'347e
  //                 if (stack_end < next_thread -> tx_thread_stack_end)
  0x1000'346c: 0x9907          LDR      R1, [SP, #0x1c]
  0x1000'346e: 0xf8da 0x2010   LDR.W    R2, [R10, #0x10]
  0x1000'3472: 0x4291          CMP      R1, R2
  0x1000'3474: 0xd203          BCS.N    ??_txe_thread_create_9 ; 0x1000'347e
  //                     stack_start =  TX_NULL;
  0x1000'3476: 0x2100          MOVS     R1, #0
  0x1000'3478: 0x000d          MOVS     R5, R1
  //                     break_flag =  TX_TRUE;
  0x1000'347a: 0x2101          MOVS     R1, #1
  0x1000'347c: 0x4688          MOV      R8, R1
                 ??_txe_thread_create_9:
  //             next_thread =  next_thread -> tx_thread_created_next;
  0x1000'347e: 0xf8da 0xa088   LDR.W    R10, [R10, #0x88]
  //         for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
  0x1000'3482: 0xf119 0x0901   ADDS.W   R9, R9, #1
  0x1000'3486: 0xe7d5          B.N      ??_txe_thread_create_4 ; 0x1000'3434
                 ??_txe_thread_create_5:
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'3488: 0xf3ef 0x8110   MRS      R1, PRIMASK
  //     return(posture);
  0x1000'348c: 0xb672          CPSID    i
  //     return(int_posture);
  0x1000'348e: 0x9106          STR      R1, [SP, #0x18]
  //         _tx_thread_preempt_disable--;
  0x1000'3490: 0x6801          LDR      R1, [R0]
  0x1000'3492: 0x1e49          SUBS     R1, R1, #1
  0x1000'3494: 0x6001          STR      R1, [R0]
  //         TX_RESTORE
  0x1000'3496: 0x9806          LDR      R0, [SP, #0x18]
  0x1000'3498: 0x9000          STR      R0, [SP]
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'349a: 0x9800          LDR      R0, [SP]
  0x1000'349c: 0xf380 0x8810   MSR      PRIMASK, R0
  // }
  0x1000'34a0: 0xf000 0xf864   BL       _tx_thread_system_preempt_check
                                                               ; 0x1000'356c
  //         if (thread_ptr == next_thread)
  0x1000'34a4: 0x4554          CMP      R4, R10
  0x1000'34a6: 0xd102          BNE.N    ??_txe_thread_create_10
                                                               ; 0x1000'34ae
  //             status =  TX_THREAD_ERROR;
  0x1000'34a8: 0x200e          MOVS     R0, #14                ; 0xe
  0x1000'34aa: 0x0006          MOVS     R6, R0
  0x1000'34ac: 0xe03a          B.N      ??_txe_thread_create_2 ; 0x1000'3524
                 ??_txe_thread_create_10:
  //         else if (stack_start == TX_NULL)
  0x1000'34ae: 0x2d00          CMP      R5, #0
  0x1000'34b0: 0xd102          BNE.N    ??_txe_thread_create_11
                                                               ; 0x1000'34b8
  //             status =  TX_PTR_ERROR;
  0x1000'34b2: 0x2003          MOVS     R0, #3
  0x1000'34b4: 0x0006          MOVS     R6, R0
  0x1000'34b6: 0xe035          B.N      ??_txe_thread_create_2 ; 0x1000'3524
                 ??_txe_thread_create_11:
  //         else if (entry_function == TX_NULL)
  0x1000'34b8: 0x980b          LDR      R0, [SP, #0x2c]
  0x1000'34ba: 0x2800          CMP      R0, #0
  0x1000'34bc: 0xd102          BNE.N    ??_txe_thread_create_12
                                                               ; 0x1000'34c4
  //             status =  TX_PTR_ERROR;
  0x1000'34be: 0x2003          MOVS     R0, #3
  0x1000'34c0: 0x0006          MOVS     R6, R0
  0x1000'34c2: 0xe02f          B.N      ??_txe_thread_create_2 ; 0x1000'3524
                 ??_txe_thread_create_12:
  //         else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
  0x1000'34c4: 0xf5bb 0x6f80   CMP.W    R11, #1024             ; 0x400
  0x1000'34c8: 0xd202          BCS.N    ??_txe_thread_create_13
                                                               ; 0x1000'34d0
  //             status =  TX_SIZE_ERROR;
  0x1000'34ca: 0x2005          MOVS     R0, #5
  0x1000'34cc: 0x0006          MOVS     R6, R0
  0x1000'34ce: 0xe029          B.N      ??_txe_thread_create_2 ; 0x1000'3524
                 ??_txe_thread_create_13:
  //         else if (priority >= ((UINT) TX_MAX_PRIORITIES))
  0x1000'34d0: 0x2f20          CMP      R7, #32                ; 0x20
  0x1000'34d2: 0xd302          BCC.N    ??_txe_thread_create_14
                                                               ; 0x1000'34da
  //             status =  TX_PRIORITY_ERROR;
  0x1000'34d4: 0x200f          MOVS     R0, #15                ; 0xf
  0x1000'34d6: 0x0006          MOVS     R6, R0
  0x1000'34d8: 0xe024          B.N      ??_txe_thread_create_2 ; 0x1000'3524
                 ??_txe_thread_create_14:
  //         else if (preempt_threshold > priority)
  0x1000'34da: 0x9819          LDR      R0, [SP, #0x64]
  0x1000'34dc: 0x4287          CMP      R7, R0
  0x1000'34de: 0xd202          BCS.N    ??_txe_thread_create_15
                                                               ; 0x1000'34e6
  //             status =  TX_THRESH_ERROR;
  0x1000'34e0: 0x2018          MOVS     R0, #24                ; 0x18
  0x1000'34e2: 0x0006          MOVS     R6, R0
  0x1000'34e4: 0xe01e          B.N      ??_txe_thread_create_2 ; 0x1000'3524
                 ??_txe_thread_create_15:
  //         else if (auto_start > TX_AUTO_START)
  0x1000'34e6: 0x981b          LDR      R0, [SP, #0x6c]
  0x1000'34e8: 0x2802          CMP      R0, #2
  0x1000'34ea: 0xd302          BCC.N    ??_txe_thread_create_16
                                                               ; 0x1000'34f2
  //             status =  TX_START_ERROR;
  0x1000'34ec: 0x2010          MOVS     R0, #16                ; 0x10
  0x1000'34ee: 0x0006          MOVS     R6, R0
  0x1000'34f0: 0xe018          B.N      ??_txe_thread_create_2 ; 0x1000'3524
                 ??_txe_thread_create_16:
  //             TX_THREAD_GET_CURRENT(current_thread)
  0x1000'34f2: 0x481b          LDR.N    R0, [PC, #0x6c]        ; _tx_thread_current_ptr
  0x1000'34f4: 0x6800          LDR      R0, [R0]
  0x1000'34f6: 0x9008          STR      R0, [SP, #0x20]
  //             if (current_thread == &_tx_timer_thread)
  0x1000'34f8: 0x9908          LDR      R1, [SP, #0x20]
  0x1000'34fa: 0x481a          LDR.N    R0, [PC, #0x68]        ; _tx_timer_thread
  0x1000'34fc: 0x4281          CMP      R1, R0
  0x1000'34fe: 0xd101          BNE.N    ??_txe_thread_create_17
                                                               ; 0x1000'3504
  //                 status =  TX_CALLER_ERROR;
  0x1000'3500: 0x2013          MOVS     R0, #19                ; 0x13
  0x1000'3502: 0x0006          MOVS     R6, R0
                 ??_txe_thread_create_17:
  //             if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
  0x1000'3504: 0x4a18          LDR.N    R2, [PC, #0x60]        ; _tx_thread_system_state
  0x1000'3506: 0x6810          LDR      R0, [R2]
  0x1000'3508: 0xf3ef 0x8105   MRS      R1, IPSR
  0x1000'350c: 0x4308          ORRS     R0, R0, R1
  0x1000'350e: 0x2800          CMP      R0, #0
  0x1000'3510: 0xd008          BEQ.N    ??_txe_thread_create_2 ; 0x1000'3524
  //                 if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
  0x1000'3512: 0x6811          LDR      R1, [R2]
  0x1000'3514: 0xf3ef 0x8005   MRS      R0, IPSR
  0x1000'3518: 0x4301          ORRS     R1, R1, R0
  0x1000'351a: 0xf1b1 0x3ff0   CMP.W    R1, #-252645136        ; 0xf0f0'f0f0
  0x1000'351e: 0xd201          BCS.N    ??_txe_thread_create_2 ; 0x1000'3524
  //                     status =  TX_CALLER_ERROR;
  0x1000'3520: 0x2013          MOVS     R0, #19                ; 0x13
  0x1000'3522: 0x0006          MOVS     R6, R0
                 ??_txe_thread_create_2:
  //     if (status == TX_SUCCESS)
  0x1000'3524: 0x2e00          CMP      R6, #0
  0x1000'3526: 0xd110          BNE.N    ??_txe_thread_create_18
                                                               ; 0x1000'354a
  //         status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
  //                         stack_start, stack_size, priority, preempt_threshold,
  //                         time_slice, auto_start);
  0x1000'3528: 0x981b          LDR      R0, [SP, #0x6c]
  0x1000'352a: 0x9005          STR      R0, [SP, #0x14]
  0x1000'352c: 0x981a          LDR      R0, [SP, #0x68]
  0x1000'352e: 0x9004          STR      R0, [SP, #0x10]
  0x1000'3530: 0x9819          LDR      R0, [SP, #0x64]
  0x1000'3532: 0x9003          STR      R0, [SP, #0xc]
  0x1000'3534: 0x9702          STR      R7, [SP, #0x8]
  0x1000'3536: 0xf8cd 0xb004   STR.W    R11, [SP, #0x4]
  0x1000'353a: 0x9500          STR      R5, [SP]
  0x1000'353c: 0x9b0c          LDR      R3, [SP, #0x30]
  0x1000'353e: 0x9a0b          LDR      R2, [SP, #0x2c]
  0x1000'3540: 0x990a          LDR      R1, [SP, #0x28]
  0x1000'3542: 0x0020          MOVS     R0, R4
  0x1000'3544: 0xf7ff 0xfc26   BL       _tx_thread_create      ; 0x1000'2d94
  0x1000'3548: 0x0006          MOVS     R6, R0
                 ??_txe_thread_create_18:
  //     return(status);
  0x1000'354a: 0x0030          MOVS     R0, R6
  0x1000'354c: 0xb00d          ADD      SP, SP, #0x34
  0x1000'354e: 0xe8bd 0x8ff0   POP.W    {R4-R11, PC}
  0x1000'3552: 0xbf00          NOP
                 `$d.32`:
                 ??_txe_thread_create_0:
  0x1000'3554: 0x3800'23d8     DC32     _tx_thread_preempt_disable
  0x1000'3558: 0x3800'23c8     DC32     _tx_thread_created_ptr
  0x1000'355c: 0x3800'23cc     DC32     _tx_thread_created_count
  0x1000'3560: 0x3800'23c0     DC32     _tx_thread_current_ptr
  0x1000'3564: 0x3800'20f0     DC32     _tx_timer_thread
  0x1000'3568: 0x3800'0004     DC32     _tx_thread_system_state
                 $t:
                 `.text8`:
                 _tx_thread_system_preempt_check:
  // VOID  _tx_thread_system_preempt_check(VOID)
  // {
  0x1000'356c: 0xe92d 0x41f0   PUSH.W   {R4-R8, LR}
  //     TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
  0x1000'3570: 0x4834          LDR.N    R0, ??_tx_thread_system_preempt_check_0
                                                               ; _tx_thread_preempt_disable
  0x1000'3572: 0x6805          LDR      R5, [R0]
  //     if (combined_flags == ((ULONG) 0))
  0x1000'3574: 0x2d00          CMP      R5, #0
  0x1000'3576: 0xd163          BNE.N    ??_tx_thread_system_preempt_check_8
                                                               ; 0x1000'3640
  //         TX_THREAD_GET_CURRENT(current_thread)
  0x1000'3578: 0x4833          LDR.N    R0, [PC, #0xcc]        ; _tx_thread_current_ptr
  0x1000'357a: 0x6800          LDR      R0, [R0]
  0x1000'357c: 0x0006          MOVS     R6, R0
  //         thread_ptr =  _tx_thread_execute_ptr;
  0x1000'357e: 0x4833          LDR.N    R0, [PC, #0xcc]        ; _tx_thread_execute_ptr
  0x1000'3580: 0x6800          LDR      R0, [R0]
  0x1000'3582: 0x0004          MOVS     R4, R0
  //         if (current_thread != thread_ptr)
  0x1000'3584: 0x42a6          CMP      R6, R4
  0x1000'3586: 0xd05b          BEQ.N    ??_tx_thread_system_preempt_check_8
                                                               ; 0x1000'3640
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'3588: 0xf3ef 0x8710   MRS      R7, PRIMASK
  //     return(posture);
  0x1000'358c: 0xb672          CPSID    i
  //     return(int_posture);
  0x1000'358e: 0x2c00          CMP      R4, #0
  0x1000'3590: 0xd039          BEQ.N    ??_tx_thread_system_preempt_check_2
                                                               ; 0x1000'3606
  0x1000'3592: 0x6821          LDR      R1, [R4]
  0x1000'3594: 0x482e          LDR.N    R0, [PC, #0xb8]        ; 0x5448'5244
  0x1000'3596: 0x4281          CMP      R1, R0
  0x1000'3598: 0xd135          BNE.N    ??_tx_thread_system_preempt_check_2
                                                               ; 0x1000'3606
  //             TX_THREAD_STACK_CHECK(thread_ptr)
  0x1000'359a: 0x68a1          LDR      R1, [R4, #0x8]
  0x1000'359c: 0xf8d4 0x00cc   LDR.W    R0, [R4, #0xcc]
  0x1000'35a0: 0x4281          CMP      R1, R0
  0x1000'35a2: 0xd202          BCS.N    ??_tx_thread_system_preempt_check_3
                                                               ; 0x1000'35aa
  //             TX_THREAD_STACK_CHECK(thread_ptr)
  0x1000'35a4: 0x68a0          LDR      R0, [R4, #0x8]
  0x1000'35a6: 0xf8c4 0x00cc   STR.W    R0, [R4, #0xcc]
                 ??_tx_thread_system_preempt_check_3:
  //             TX_THREAD_STACK_CHECK(thread_ptr)
  0x1000'35aa: 0x68e0          LDR      R0, [R4, #0xc]
  0x1000'35ac: 0x6800          LDR      R0, [R0]
  0x1000'35ae: 0xf8d4 0x10d4   LDR.W    R1, [R4, #0xd4]
  0x1000'35b2: 0x4288          CMP      R0, R1
  0x1000'35b4: 0xd10b          BNE.N    ??_tx_thread_system_preempt_check_4
                                                               ; 0x1000'35ce
  0x1000'35b6: 0x6920          LDR      R0, [R4, #0x10]
  0x1000'35b8: 0xf8d0 0x1001   LDR.W    R1, [R0, #0x1]
  0x1000'35bc: 0xf8d4 0x00d4   LDR.W    R0, [R4, #0xd4]
  0x1000'35c0: 0x4281          CMP      R1, R0
  0x1000'35c2: 0xd104          BNE.N    ??_tx_thread_system_preempt_check_4
                                                               ; 0x1000'35ce
  0x1000'35c4: 0xf8d4 0x10cc   LDR.W    R1, [R4, #0xcc]
  0x1000'35c8: 0x68e0          LDR      R0, [R4, #0xc]
  0x1000'35ca: 0x4281          CMP      R1, R0
  0x1000'35cc: 0xd209          BCS.N    ??_tx_thread_system_preempt_check_5
                                                               ; 0x1000'35e2
                 ??_tx_thread_system_preempt_check_4:
  //             TX_THREAD_STACK_CHECK(thread_ptr)
  0x1000'35ce: 0x46b8          MOV      R8, R7
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'35d0: 0xf388 0x8810   MSR      PRIMASK, R8
  // }
  0x1000'35d4: 0x0020          MOVS     R0, R4
  0x1000'35d6: 0xf7ff 0xf87f   BL       _tx_thread_stack_error_handler
                                                               ; 0x1000'26d8
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'35da: 0xf3ef 0x8010   MRS      R0, PRIMASK
  //     return(posture);
  0x1000'35de: 0xb672          CPSID    i
  //     return(int_posture);
  0x1000'35e0: 0x0007          MOVS     R7, R0
                 ??_tx_thread_system_preempt_check_5:
  //             TX_THREAD_STACK_CHECK(thread_ptr)
  0x1000'35e2: 0xf8d4 0x00cc   LDR.W    R0, [R4, #0xcc]
  0x1000'35e6: 0xf850 0x1c04   LDR.W    R1, [R0, #-0x4]
  0x1000'35ea: 0xf8d4 0x00d4   LDR.W    R0, [R4, #0xd4]
  0x1000'35ee: 0x4281          CMP      R1, R0
  0x1000'35f0: 0xd009          BEQ.N    ??_tx_thread_system_preempt_check_2
                                                               ; 0x1000'3606
  //             TX_THREAD_STACK_CHECK(thread_ptr)
  0x1000'35f2: 0x46b8          MOV      R8, R7
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'35f4: 0xf388 0x8810   MSR      PRIMASK, R8
  // }
  0x1000'35f8: 0x0020          MOVS     R0, R4
  0x1000'35fa: 0xf7ff 0xf87f   BL       _tx_thread_stack_analyze
                                                               ; 0x1000'26fc
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'35fe: 0xf3ef 0x8010   MRS      R0, PRIMASK
  //     return(posture);
  0x1000'3602: 0xb672          CPSID    i
  //     return(int_posture);
  0x1000'3604: 0x0007          MOVS     R7, R0
                 ??_tx_thread_system_preempt_check_2:
  //             TX_THREAD_STACK_CHECK(thread_ptr)
  0x1000'3606: 0x0038          MOVS     R0, R7
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'3608: 0xf380 0x8810   MSR      PRIMASK, R0
  // }
  0x1000'360c: 0x2c00          CMP      R4, #0
  0x1000'360e: 0xd104          BNE.N    ??_tx_thread_system_preempt_check_6
                                                               ; 0x1000'361a
  //                 _tx_thread_performance_idle_return_count++;
  0x1000'3610: 0x4910          LDR.N    R1, [PC, #0x40]        ; _tx_thread_performance_idle_return_count
  0x1000'3612: 0x6808          LDR      R0, [R1]
  0x1000'3614: 0x1c40          ADDS     R0, R0, #1
  0x1000'3616: 0x6008          STR      R0, [R1]
  0x1000'3618: 0xe003          B.N      ??_tx_thread_system_preempt_check_7
                                                               ; 0x1000'3622
                 ??_tx_thread_system_preempt_check_6:
  //                 _tx_thread_performance_non_idle_return_count++;
  0x1000'361a: 0x490f          LDR.N    R1, [PC, #0x3c]        ; _tx_thread_performance_non_idle_return_count
  0x1000'361c: 0x6808          LDR      R0, [R1]
  0x1000'361e: 0x1c40          ADDS     R0, R0, #1
  0x1000'3620: 0x6008          STR      R0, [R1]
                 ??_tx_thread_system_preempt_check_7:
  //     *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
  0x1000'3622: 0xf05f 0x5280   MOVS.W   R2, #268435456         ; 0x1000'0000
  0x1000'3626: 0x480d          LDR.N    R0, [PC, #0x34]        ; 0xe000'ed04
  0x1000'3628: 0x6002          STR      R2, [R0]
  //     if (_tx_ipsr_get() == 0)
  0x1000'362a: 0xf3ef 0x8005   MRS      R0, IPSR
  0x1000'362e: 0x2800          CMP      R0, #0
  0x1000'3630: 0xd106          BNE.N    ??_tx_thread_system_preempt_check_8
                                                               ; 0x1000'3640
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'3632: 0xf3ef 0x8010   MRS      R0, PRIMASK
  //     return(posture);
  0x1000'3636: 0x0001          MOVS     R1, R0
  //     __asm__ volatile ("CPSIE  i": : : "memory");
  0x1000'3638: 0xb662          CPSIE    i
  // }
  0x1000'363a: 0x0008          MOVS     R0, R1
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'363c: 0xf380 0x8810   MSR      PRIMASK, R0
                 ??_tx_thread_system_preempt_check_1:
                 ??_tx_thread_system_preempt_check_8:
  // }
  0x1000'3640: 0xe8bd 0x81f0   POP.W    {R4-R8, PC}
                 `$d.32`:
                 ??_tx_thread_system_preempt_check_0:
  0x1000'3644: 0x3800'23d8     DC32     _tx_thread_preempt_disable
  0x1000'3648: 0x3800'23c0     DC32     _tx_thread_current_ptr
  0x1000'364c: 0x3800'23c4     DC32     _tx_thread_execute_ptr
  0x1000'3650: 0x5448'5244     DC32     0x5448'5244            ; 'DRHT'
  0x1000'3654: 0x3800'2400     DC32     _tx_thread_performance_idle_return_count
  0x1000'3658: 0x3800'2404     DC32     _tx_thread_performance_non_idle_return_count
  0x1000'365c: 0xe000'ed04     DC32     0xe000'ed04            ; '....'
                 $t:
                 `.text8`:
                 _tx_byte_allocate:
  // UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
  // {
  0x1000'3660: 0xe92d 0x4ff8   PUSH.W   {R3-R11, LR}
  0x1000'3664: 0xb084          SUB      SP, SP, #0x10
  0x1000'3666: 0x4683          MOV      R11, R0
  0x1000'3668: 0x000f          MOVS     R7, R1
  0x1000'366a: 0x001e          MOVS     R6, R3
  //     memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
  0x1000'366c: 0x1cd2          ADDS     R2, R2, #3
  0x1000'366e: 0x0892          LSRS     R2, R2, #2
  0x1000'3670: 0xea5f 0x0882   LSLS.W   R8, R2, #2
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'3674: 0xf3ef 0x8910   MRS      R9, PRIMASK
  //     return(posture);
  0x1000'3678: 0xb672          CPSID    i
  //     return(int_posture);
  0x1000'367a: 0x483a          LDR.N    R0, ??_tx_byte_allocate_0
                                                               ; _tx_thread_current_ptr
  0x1000'367c: 0xf8d0 0xa000   LDR.W    R10, [R0]
  //     finished =  TX_FALSE;
  0x1000'3680: 0x2500          MOVS     R5, #0
                 ??_tx_byte_allocate_1:
  //         pool_ptr -> tx_byte_pool_owner =  thread_ptr;
  0x1000'3682: 0xf8cb 0xa020   STR.W    R10, [R11, #0x20]
  //         TX_RESTORE
  0x1000'3686: 0xf8cd 0x900c   STR.W    R9, [SP, #0xc]
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'368a: 0x9803          LDR      R0, [SP, #0xc]
  0x1000'368c: 0xf380 0x8810   MSR      PRIMASK, R0
  // }
  0x1000'3690: 0x4641          MOV      R1, R8
  0x1000'3692: 0x4658          MOV      R0, R11
  0x1000'3694: 0xf7ff 0xfd06   BL       _tx_byte_pool_search   ; 0x1000'30a4
  0x1000'3698: 0x0004          MOVS     R4, R0
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'369a: 0xf3ef 0x8010   MRS      R0, PRIMASK
  //     return(posture);
  0x1000'369e: 0xb672          CPSID    i
  //     return(int_posture);
  0x1000'36a0: 0x4681          MOV      R9, R0
  //         if (work_ptr != TX_NULL)
  0x1000'36a2: 0x2c00          CMP      R4, #0
  0x1000'36a4: 0xd002          BEQ.N    ??_tx_byte_allocate_2  ; 0x1000'36ac
  //             finished =  TX_TRUE;
  0x1000'36a6: 0x2001          MOVS     R0, #1
  0x1000'36a8: 0x0005          MOVS     R5, R0
  0x1000'36aa: 0xe005          B.N      ??_tx_byte_allocate_3  ; 0x1000'36b8
                 ??_tx_byte_allocate_2:
  //             if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
  0x1000'36ac: 0xf8db 0x0020   LDR.W    R0, [R11, #0x20]
  0x1000'36b0: 0x4550          CMP      R0, R10
  0x1000'36b2: 0xd101          BNE.N    ??_tx_byte_allocate_3  ; 0x1000'36b8
  //                 finished =  TX_TRUE;
  0x1000'36b4: 0x2001          MOVS     R0, #1
  0x1000'36b6: 0x0005          MOVS     R5, R0
                 ??_tx_byte_allocate_3:
  //     } while (finished == TX_FALSE);
  0x1000'36b8: 0x2d00          CMP      R5, #0
  0x1000'36ba: 0xd0e2          BEQ.N    ??_tx_byte_allocate_1  ; 0x1000'3682
  //     *memory_ptr =  (VOID *) work_ptr;
  0x1000'36bc: 0x603c          STR      R4, [R7]
  //     if (work_ptr != TX_NULL)
  0x1000'36be: 0x2c00          CMP      R4, #0
  0x1000'36c0: 0xd004          BEQ.N    ??_tx_byte_allocate_4  ; 0x1000'36cc
  //         TX_RESTORE
  0x1000'36c2: 0x4649          MOV      R1, R9
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'36c4: 0xf381 0x8810   MSR      PRIMASK, R1
  // }
  0x1000'36c8: 0x2000          MOVS     R0, #0
  0x1000'36ca: 0xe048          B.N      ??_tx_byte_allocate_5  ; 0x1000'375e
                 ??_tx_byte_allocate_4:
  //         if (wait_option != TX_NO_WAIT)
  0x1000'36cc: 0x2e00          CMP      R6, #0
  0x1000'36ce: 0xd042          BEQ.N    ??_tx_byte_allocate_6  ; 0x1000'3756
  //             if (_tx_thread_preempt_disable != ((UINT) 0))
  0x1000'36d0: 0x4825          LDR.N    R0, [PC, #0x94]        ; _tx_thread_preempt_disable
  0x1000'36d2: 0x6800          LDR      R0, [R0]
  0x1000'36d4: 0x2800          CMP      R0, #0
  0x1000'36d6: 0xd004          BEQ.N    ??_tx_byte_allocate_7  ; 0x1000'36e2
  //                 status =  TX_NO_MEMORY;
  0x1000'36d8: 0x2010          MOVS     R0, #16                ; 0x10
  //                 TX_RESTORE
  0x1000'36da: 0x4649          MOV      R1, R9
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'36dc: 0xf381 0x8810   MSR      PRIMASK, R1
  // }
  0x1000'36e0: 0xe03d          B.N      ??_tx_byte_allocate_5  ; 0x1000'375e
                 ??_tx_byte_allocate_7:
  //                 thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
  0x1000'36e2: 0x4822          LDR.N    R0, [PC, #0x88]        ; _tx_byte_pool_cleanup
  0x1000'36e4: 0xf8ca 0x0068   STR.W    R0, [R10, #0x68]
  //                 thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
  0x1000'36e8: 0xf8ca 0xb06c   STR.W    R11, [R10, #0x6c]
  //                 thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
  0x1000'36ec: 0xf8ca 0x707c   STR.W    R7, [R10, #0x7c]
  //                 thread_ptr -> tx_thread_suspend_info =  memory_size;
  0x1000'36f0: 0xf8ca 0x8078   STR.W    R8, [R10, #0x78]
  //                 suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
  0x1000'36f4: 0xf8db 0x0028   LDR.W    R0, [R11, #0x28]
  0x1000'36f8: 0x9002          STR      R0, [SP, #0x8]
  //                 (pool_ptr -> tx_byte_pool_suspended_count)++;
  0x1000'36fa: 0xf8db 0x0028   LDR.W    R0, [R11, #0x28]
  0x1000'36fe: 0x1c40          ADDS     R0, R0, #1
  0x1000'3700: 0xf8cb 0x0028   STR.W    R0, [R11, #0x28]
  //                 if (suspended_count == TX_NO_SUSPENSIONS)
  0x1000'3704: 0x9802          LDR      R0, [SP, #0x8]
  0x1000'3706: 0x2800          CMP      R0, #0
  0x1000'3708: 0xd106          BNE.N    ??_tx_byte_allocate_8  ; 0x1000'3718
  //                     pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
  0x1000'370a: 0xf8cb 0xa024   STR.W    R10, [R11, #0x24]
  //                     thread_ptr -> tx_thread_suspended_next =        thread_ptr;
  0x1000'370e: 0xf8ca 0xa070   STR.W    R10, [R10, #0x70]
  //                     thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
  0x1000'3712: 0xf8ca 0xa074   STR.W    R10, [R10, #0x74]
  0x1000'3716: 0xe011          B.N      ??_tx_byte_allocate_9  ; 0x1000'373c
                 ??_tx_byte_allocate_8:
  //                     next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
  0x1000'3718: 0xf8db 0x0024   LDR.W    R0, [R11, #0x24]
  0x1000'371c: 0x9000          STR      R0, [SP]
  //                     thread_ptr -> tx_thread_suspended_next =        next_thread;
  0x1000'371e: 0x9800          LDR      R0, [SP]
  0x1000'3720: 0xf8ca 0x0070   STR.W    R0, [R10, #0x70]
  //                     previous_thread =                               next_thread -> tx_thread_suspended_previous;
  0x1000'3724: 0x9800          LDR      R0, [SP]
  0x1000'3726: 0x6f40          LDR      R0, [R0, #0x74]
  0x1000'3728: 0x9001          STR      R0, [SP, #0x4]
  //                     thread_ptr -> tx_thread_suspended_previous =    previous_thread;
  0x1000'372a: 0x9801          LDR      R0, [SP, #0x4]
  0x1000'372c: 0xf8ca 0x0074   STR.W    R0, [R10, #0x74]
  //                     previous_thread -> tx_thread_suspended_next =   thread_ptr;
  0x1000'3730: 0x9801          LDR      R0, [SP, #0x4]
  0x1000'3732: 0xf8c0 0xa070   STR.W    R10, [R0, #0x70]
  //                     next_thread -> tx_thread_suspended_previous =   thread_ptr;
  0x1000'3736: 0x9800          LDR      R0, [SP]
  0x1000'3738: 0xf8c0 0xa074   STR.W    R10, [R0, #0x74]
                 ??_tx_byte_allocate_9:
  //                 thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
  0x1000'373c: 0x2009          MOVS     R0, #9
  0x1000'373e: 0xf8ca 0x0030   STR.W    R0, [R10, #0x30]
  //                 _tx_thread_system_ni_suspend(thread_ptr, wait_option);
  0x1000'3742: 0x0031          MOVS     R1, R6
  0x1000'3744: 0x4650          MOV      R0, R10
  0x1000'3746: 0xf7ff 0xf825   BL       _tx_thread_system_ni_suspend
                                                               ; 0x1000'2794
  //                 TX_RESTORE
  0x1000'374a: 0x4649          MOV      R1, R9
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'374c: 0xf381 0x8810   MSR      PRIMASK, R1
  // }
  0x1000'3750: 0xf8da 0x0084   LDR.W    R0, [R10, #0x84]
  0x1000'3754: 0xe003          B.N      ??_tx_byte_allocate_5  ; 0x1000'375e
                 ??_tx_byte_allocate_6:
  //             TX_RESTORE
  0x1000'3756: 0x4649          MOV      R1, R9
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'3758: 0xf381 0x8810   MSR      PRIMASK, R1
  // }
  0x1000'375c: 0x2010          MOVS     R0, #16                ; 0x10
                 ??_tx_byte_allocate_5:
  //     return(status);
  0x1000'375e: 0xb005          ADD      SP, SP, #0x14
  0x1000'3760: 0xe8bd 0x8ff0   POP.W    {R4-R11, PC}
                 `$d.32`:
                 ??_tx_byte_allocate_0:
  0x1000'3764: 0x3800'23c0     DC32     _tx_thread_current_ptr
  0x1000'3768: 0x3800'23d8     DC32     _tx_thread_preempt_disable
  0x1000'376c: 0x1000'3f95     DC32     _tx_byte_pool_cleanup
                 $t:
                 `.text8`:
                 _tx_byte_pool_create:
  // UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
  // {
  0x1000'3770: 0xe92d 0x4ff8   PUSH.W   {R3-R11, LR}
  0x1000'3774: 0xb084          SUB      SP, SP, #0x10
  0x1000'3776: 0x4681          MOV      R9, R0
  0x1000'3778: 0x000c          MOVS     R4, R1
  0x1000'377a: 0x0015          MOVS     R5, R2
  0x1000'377c: 0x469b          MOV      R11, R3
  //     TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
  0x1000'377e: 0x2734          MOVS     R7, #52                ; 0x34
  0x1000'3780: 0xf05f 0x0800   MOVS.W   R8, #0
  0x1000'3784: 0x46ca          MOV      R10, R9
  //     __aeabi_memset(_D, _N, _C);
  0x1000'3786: 0x4642          MOV      R2, R8
  0x1000'3788: 0x0039          MOVS     R1, R7
  0x1000'378a: 0x4650          MOV      R0, R10
  0x1000'378c: 0xf7ff 0xfc34   BL       __aeabi_memset         ; 0x1000'2ff8
  //     return _D;
  0x1000'3790: 0xea5f 0x0b9b   LSRS.W   R11, R11, #2
  0x1000'3794: 0xea5f 0x018b   LSLS.W   R1, R11, #2
  //     pool_ptr -> tx_byte_pool_name =              name_ptr;
  0x1000'3798: 0xf8c9 0x4004   STR.W    R4, [R9, #0x4]
  //     pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
  0x1000'379c: 0xf8c9 0x5018   STR.W    R5, [R9, #0x18]
  //     pool_ptr -> tx_byte_pool_size =    pool_size;
  0x1000'37a0: 0xf8c9 0x101c   STR.W    R1, [R9, #0x1c]
  //     pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
  0x1000'37a4: 0xf8c9 0x5010   STR.W    R5, [R9, #0x10]
  //     pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
  0x1000'37a8: 0xf8c9 0x5014   STR.W    R5, [R9, #0x14]
  //     pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
  0x1000'37ac: 0xf1b1 0x0008   SUBS.W   R0, R1, #8
  0x1000'37b0: 0xf8c9 0x0008   STR.W    R0, [R9, #0x8]
  //     pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
  0x1000'37b4: 0x2002          MOVS     R0, #2
  0x1000'37b6: 0xf8c9 0x000c   STR.W    R0, [R9, #0xc]
  //     block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
  0x1000'37ba: 0x0028          MOVS     R0, R5
  //     block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
  0x1000'37bc: 0x4408          ADD      R0, R0, R1
  //     block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
  0x1000'37be: 0x1f00          SUBS     R0, R0, #4
  //     temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
  0x1000'37c0: 0x464a          MOV      R2, R9
  //     block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
  0x1000'37c2: 0x9000          STR      R0, [SP]
  //     *block_indirect_ptr =  temp_ptr;
  0x1000'37c4: 0x9b00          LDR      R3, [SP]
  0x1000'37c6: 0x601a          STR      R2, [R3]
  //     block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
  0x1000'37c8: 0xf1b0 0x0e04   SUBS.W   LR, R0, #4
  //     block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
  0x1000'37cc: 0x4673          MOV      R3, LR
  //     *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
  0x1000'37ce: 0x601d          STR      R5, [R3]
  //     temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
  0x1000'37d0: 0x9503          STR      R5, [SP, #0xc]
  //     block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
  0x1000'37d2: 0x9803          LDR      R0, [SP, #0xc]
  0x1000'37d4: 0x9000          STR      R0, [SP]
  //     *block_indirect_ptr =  block_ptr;
  0x1000'37d6: 0x9800          LDR      R0, [SP]
  0x1000'37d8: 0xf8c0 0xe000   STR.W    LR, [R0]
  //     block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
  0x1000'37dc: 0x0028          MOVS     R0, R5
  //     block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
  0x1000'37de: 0xf110 0x0a04   ADDS.W   R10, R0, #4
  //     free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
  0x1000'37e2: 0xf8cd 0xa008   STR.W    R10, [SP, #0x8]
  //     *free_ptr =            TX_BYTE_BLOCK_FREE;
  0x1000'37e6: 0xf8df 0xc06c   LDR.W    R12, ??_tx_byte_pool_create_0
                                                               ; 0xffff'eeee
  0x1000'37ea: 0x9802          LDR      R0, [SP, #0x8]
  0x1000'37ec: 0xf8c0 0xc000   STR.W    R12, [R0]
  //     pool_ptr -> tx_byte_pool_owner =  TX_NULL;
  0x1000'37f0: 0x2000          MOVS     R0, #0
  0x1000'37f2: 0xf8c9 0x0020   STR.W    R0, [R9, #0x20]
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'37f6: 0xf3ef 0x8c10   MRS      R12, PRIMASK
  //     return(posture);
  0x1000'37fa: 0xb672          CPSID    i
  //     return(int_posture);
  0x1000'37fc: 0x4816          LDR.N    R0, [PC, #0x58]        ; 0x4259'5445
  0x1000'37fe: 0xf8c9 0x0000   STR.W    R0, [R9]
  //     if (_tx_byte_pool_created_count == TX_EMPTY)
  0x1000'3802: 0xf8df 0xb058   LDR.W    R11, [PC, #0x58]       ; _tx_byte_pool_created_count
  0x1000'3806: 0xf8db 0x0000   LDR.W    R0, [R11]
  0x1000'380a: 0x2800          CMP      R0, #0
  0x1000'380c: 0xd107          BNE.N    ??_tx_byte_pool_create_1
                                                               ; 0x1000'381e
  //         _tx_byte_pool_created_ptr =                  pool_ptr;
  0x1000'380e: 0x4814          LDR.N    R0, [PC, #0x50]        ; _tx_byte_pool_created_ptr
  0x1000'3810: 0xf8c0 0x9000   STR.W    R9, [R0]
  //         pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
  0x1000'3814: 0xf8c9 0x902c   STR.W    R9, [R9, #0x2c]
  //         pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
  0x1000'3818: 0xf8c9 0x9030   STR.W    R9, [R9, #0x30]
  0x1000'381c: 0xe00e          B.N      ??_tx_byte_pool_create_2
                                                               ; 0x1000'383c
                 ??_tx_byte_pool_create_1:
  //         next_pool =      _tx_byte_pool_created_ptr;
  0x1000'381e: 0x4810          LDR.N    R0, [PC, #0x40]        ; _tx_byte_pool_created_ptr
  0x1000'3820: 0x6800          LDR      R0, [R0]
  0x1000'3822: 0x0006          MOVS     R6, R0
  //         previous_pool =  next_pool -> tx_byte_pool_created_previous;
  0x1000'3824: 0x6b32          LDR      R2, [R6, #0x30]
  0x1000'3826: 0x9201          STR      R2, [SP, #0x4]
  //         next_pool -> tx_byte_pool_created_previous =  pool_ptr;
  0x1000'3828: 0xf8c6 0x9030   STR.W    R9, [R6, #0x30]
  //         previous_pool -> tx_byte_pool_created_next =  pool_ptr;
  0x1000'382c: 0x9801          LDR      R0, [SP, #0x4]
  0x1000'382e: 0xf8c0 0x902c   STR.W    R9, [R0, #0x2c]
  //         pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
  0x1000'3832: 0x9801          LDR      R0, [SP, #0x4]
  0x1000'3834: 0xf8c9 0x0030   STR.W    R0, [R9, #0x30]
  //         pool_ptr -> tx_byte_pool_created_next =      next_pool;
  0x1000'3838: 0xf8c9 0x602c   STR.W    R6, [R9, #0x2c]
                 ??_tx_byte_pool_create_2:
  //     _tx_byte_pool_created_count++;
  0x1000'383c: 0xf8db 0x0000   LDR.W    R0, [R11]
  0x1000'3840: 0x1c40          ADDS     R0, R0, #1
  0x1000'3842: 0xf8cb 0x0000   STR.W    R0, [R11]
  //     TX_RESTORE
  0x1000'3846: 0x4662          MOV      R2, R12
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'3848: 0xf382 0x8810   MSR      PRIMASK, R2
  // }
  0x1000'384c: 0x2000          MOVS     R0, #0
  0x1000'384e: 0xb005          ADD      SP, SP, #0x14
  0x1000'3850: 0xe8bd 0x8ff0   POP.W    {R4-R11, PC}
                 `$d.32`:
                 ??_tx_byte_pool_create_0:
  0x1000'3854: 0xffff'eeee     DC32     -4370                  ; '....'
  0x1000'3858: 0x4259'5445     DC32     0x4259'5445            ; 'ETYB'
  0x1000'385c: 0x3800'23b4     DC32     _tx_byte_pool_created_count
  0x1000'3860: 0x3800'23b0     DC32     _tx_byte_pool_created_ptr
                 $t:
                 `.text8`:
                 _txe_byte_pool_create:
  // UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
  // {
  0x1000'3864: 0xe92d 0x4ff2   PUSH.W   {R1, R4-R11, LR}
  0x1000'3868: 0xb082          SUB      SP, SP, #0x8
  0x1000'386a: 0x0004          MOVS     R4, R0
  0x1000'386c: 0x0015          MOVS     R5, R2
  0x1000'386e: 0x469b          MOV      R11, R3
  //     status =  TX_SUCCESS;
  0x1000'3870: 0x2600          MOVS     R6, #0
  //     if (pool_ptr == TX_NULL)
  0x1000'3872: 0x2c00          CMP      R4, #0
  0x1000'3874: 0xd102          BNE.N    ??_txe_byte_pool_create_1
                                                               ; 0x1000'387c
  //         status =  TX_POOL_ERROR;
  0x1000'3876: 0x2002          MOVS     R0, #2
  0x1000'3878: 0x0006          MOVS     R6, R0
  0x1000'387a: 0xe054          B.N      ??_txe_byte_pool_create_2
                                                               ; 0x1000'3926
                 ??_txe_byte_pool_create_1:
  //     else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
  0x1000'387c: 0x980c          LDR      R0, [SP, #0x30]
  0x1000'387e: 0x2834          CMP      R0, #52                ; 0x34
  0x1000'3880: 0xd002          BEQ.N    ??_txe_byte_pool_create_3
                                                               ; 0x1000'3888
  //         status =  TX_POOL_ERROR;
  0x1000'3882: 0x2002          MOVS     R0, #2
  0x1000'3884: 0x0006          MOVS     R6, R0
  0x1000'3886: 0xe04e          B.N      ??_txe_byte_pool_create_2
                                                               ; 0x1000'3926
                 ??_txe_byte_pool_create_3:
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'3888: 0xf3ef 0x8a10   MRS      R10, PRIMASK
  //     return(posture);
  0x1000'388c: 0xb672          CPSID    i
  //     return(int_posture);
  0x1000'388e: 0x482c          LDR.N    R0, ??_txe_byte_pool_create_0
                                                               ; _tx_thread_preempt_disable
  0x1000'3890: 0x6801          LDR      R1, [R0]
  0x1000'3892: 0x1c49          ADDS     R1, R1, #1
  0x1000'3894: 0x6001          STR      R1, [R0]
  //         TX_RESTORE
  0x1000'3896: 0x4651          MOV      R1, R10
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'3898: 0xf381 0x8810   MSR      PRIMASK, R1
  // }
  0x1000'389c: 0x4a29          LDR.N    R2, [PC, #0xa4]        ; _tx_byte_pool_created_ptr
  0x1000'389e: 0x6812          LDR      R2, [R2]
  0x1000'38a0: 0x4691          MOV      R9, R2
  //         for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
  0x1000'38a2: 0x2200          MOVS     R2, #0
  0x1000'38a4: 0x4690          MOV      R8, R2
                 ??_txe_byte_pool_create_4:
  //         for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
  0x1000'38a6: 0x4928          LDR.N    R1, [PC, #0xa0]        ; _tx_byte_pool_created_count
  0x1000'38a8: 0x6809          LDR      R1, [R1]
  0x1000'38aa: 0x4588          CMP      R8, R1
  0x1000'38ac: 0xd206          BCS.N    ??_txe_byte_pool_create_5
                                                               ; 0x1000'38bc
  //             if (pool_ptr == next_pool)
  0x1000'38ae: 0x454c          CMP      R4, R9
  0x1000'38b0: 0xd004          BEQ.N    ??_txe_byte_pool_create_5
                                                               ; 0x1000'38bc
                 ??_txe_byte_pool_create_6:
  //                 next_pool =  next_pool -> tx_byte_pool_created_next;
  0x1000'38b2: 0xf8d9 0x902c   LDR.W    R9, [R9, #0x2c]
  //         for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
  0x1000'38b6: 0xf118 0x0801   ADDS.W   R8, R8, #1
  0x1000'38ba: 0xe7f4          B.N      ??_txe_byte_pool_create_4
                                                               ; 0x1000'38a6
                 ??_txe_byte_pool_create_5:
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'38bc: 0xf3ef 0x8710   MRS      R7, PRIMASK
  //     return(posture);
  0x1000'38c0: 0xb672          CPSID    i
  //     return(int_posture);
  0x1000'38c2: 0x6801          LDR      R1, [R0]
  0x1000'38c4: 0x1e49          SUBS     R1, R1, #1
  0x1000'38c6: 0x6001          STR      R1, [R0]
  //         TX_RESTORE
  0x1000'38c8: 0x9701          STR      R7, [SP, #0x4]
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'38ca: 0x9801          LDR      R0, [SP, #0x4]
  0x1000'38cc: 0xf380 0x8810   MSR      PRIMASK, R0
  // }
  0x1000'38d0: 0xf7ff 0xfe4c   BL       _tx_thread_system_preempt_check
                                                               ; 0x1000'356c
  //         if (pool_ptr == next_pool)
  0x1000'38d4: 0x454c          CMP      R4, R9
  0x1000'38d6: 0xd102          BNE.N    ??_txe_byte_pool_create_7
                                                               ; 0x1000'38de
  //             status =  TX_POOL_ERROR;
  0x1000'38d8: 0x2002          MOVS     R0, #2
  0x1000'38da: 0x0006          MOVS     R6, R0
  0x1000'38dc: 0xe023          B.N      ??_txe_byte_pool_create_2
                                                               ; 0x1000'3926
                 ??_txe_byte_pool_create_7:
  //         else if (pool_start == TX_NULL)
  0x1000'38de: 0x2d00          CMP      R5, #0
  0x1000'38e0: 0xd102          BNE.N    ??_txe_byte_pool_create_8
                                                               ; 0x1000'38e8
  //             status =  TX_PTR_ERROR;
  0x1000'38e2: 0x2003          MOVS     R0, #3
  0x1000'38e4: 0x0006          MOVS     R6, R0
  0x1000'38e6: 0xe01e          B.N      ??_txe_byte_pool_create_2
                                                               ; 0x1000'3926
                 ??_txe_byte_pool_create_8:
  //         else if (pool_size < TX_BYTE_POOL_MIN)
  0x1000'38e8: 0xf1bb 0x0f64   CMP.W    R11, #100              ; 0x64
  0x1000'38ec: 0xd202          BCS.N    ??_txe_byte_pool_create_9
                                                               ; 0x1000'38f4
  //             status =  TX_SIZE_ERROR;
  0x1000'38ee: 0x2005          MOVS     R0, #5
  0x1000'38f0: 0x0006          MOVS     R6, R0
  0x1000'38f2: 0xe018          B.N      ??_txe_byte_pool_create_2
                                                               ; 0x1000'3926
                 ??_txe_byte_pool_create_9:
  //             TX_THREAD_GET_CURRENT(thread_ptr)
  0x1000'38f4: 0x4815          LDR.N    R0, [PC, #0x54]        ; _tx_thread_current_ptr
  0x1000'38f6: 0x6800          LDR      R0, [R0]
  0x1000'38f8: 0x9000          STR      R0, [SP]
  //             if (thread_ptr == &_tx_timer_thread)
  0x1000'38fa: 0x9800          LDR      R0, [SP]
  0x1000'38fc: 0x4914          LDR.N    R1, [PC, #0x50]        ; _tx_timer_thread
  0x1000'38fe: 0x4288          CMP      R0, R1
  0x1000'3900: 0xd101          BNE.N    ??_txe_byte_pool_create_10
                                                               ; 0x1000'3906
  //                 status =  TX_CALLER_ERROR;
  0x1000'3902: 0x2013          MOVS     R0, #19                ; 0x13
  0x1000'3904: 0x0006          MOVS     R6, R0
                 ??_txe_byte_pool_create_10:
  //             if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
  0x1000'3906: 0x4a13          LDR.N    R2, [PC, #0x4c]        ; _tx_thread_system_state
  0x1000'3908: 0x6810          LDR      R0, [R2]
  0x1000'390a: 0xf3ef 0x8105   MRS      R1, IPSR
  0x1000'390e: 0x4308          ORRS     R0, R0, R1
  0x1000'3910: 0x2800          CMP      R0, #0
  0x1000'3912: 0xd008          BEQ.N    ??_txe_byte_pool_create_2
                                                               ; 0x1000'3926
  //                 if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
  0x1000'3914: 0x6811          LDR      R1, [R2]
  0x1000'3916: 0xf3ef 0x8005   MRS      R0, IPSR
  0x1000'391a: 0x4301          ORRS     R1, R1, R0
  0x1000'391c: 0xf1b1 0x3ff0   CMP.W    R1, #-252645136        ; 0xf0f0'f0f0
  0x1000'3920: 0xd201          BCS.N    ??_txe_byte_pool_create_2
                                                               ; 0x1000'3926
  //                     status =  TX_CALLER_ERROR;
  0x1000'3922: 0x2013          MOVS     R0, #19                ; 0x13
  0x1000'3924: 0x0006          MOVS     R6, R0
                 ??_txe_byte_pool_create_2:
  //     if (status == TX_SUCCESS)
  0x1000'3926: 0x2e00          CMP      R6, #0
  0x1000'3928: 0xd106          BNE.N    ??_txe_byte_pool_create_11
                                                               ; 0x1000'3938
  //         status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
  0x1000'392a: 0x465b          MOV      R3, R11
  0x1000'392c: 0x002a          MOVS     R2, R5
  0x1000'392e: 0x9902          LDR      R1, [SP, #0x8]
  0x1000'3930: 0x0020          MOVS     R0, R4
  0x1000'3932: 0xf7ff 0xff1d   BL       _tx_byte_pool_create   ; 0x1000'3770
  0x1000'3936: 0x0006          MOVS     R6, R0
                 ??_txe_byte_pool_create_11:
  //     return(status);
  0x1000'3938: 0x0030          MOVS     R0, R6
  0x1000'393a: 0xe8bd 0x8ffe   POP.W    {R1-R11, PC}
  0x1000'393e: 0xbf00          NOP
                 `$d.32`:
                 ??_txe_byte_pool_create_0:
  0x1000'3940: 0x3800'23d8     DC32     _tx_thread_preempt_disable
  0x1000'3944: 0x3800'23b0     DC32     _tx_byte_pool_created_ptr
  0x1000'3948: 0x3800'23b4     DC32     _tx_byte_pool_created_count
  0x1000'394c: 0x3800'23c0     DC32     _tx_thread_current_ptr
  0x1000'3950: 0x3800'20f0     DC32     _tx_timer_thread
  0x1000'3954: 0x3800'0004     DC32     _tx_thread_system_state
                 $t:
                 `.text6`:
                 _tx_thread_schedule:
  //     MOV     r0, #0                                  // Build value for TX_FALSE
  0x1000'3958: 0xf04f 0x0000   MOV.W    R0, #0
  //     LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
  0x1000'395c: 0x4a2d          LDR.N    R2, [PC, #0xb4]        ; _tx_thread_preempt_disable
  //     STR     r0, [r2, #0]                            // Clear preempt disable flag
  0x1000'395e: 0x6010          STR      R0, [R2]
  //     MRS     r0, CONTROL                             // Pickup current CONTROL register
  0x1000'3960: 0xf3ef 0x8014   MRS      R0, CONTROL
  //     BIC     r0, r0, #4                              // Clear the FPCA bit
  0x1000'3964: 0xf020 0x0004   BIC.W    R0, R0, #4
  //     MSR     CONTROL, r0                             // Setup new CONTROL register
  0x1000'3968: 0xf380 0x8814   MSR      CONTROL, R0
  //     CPSIE   i
  0x1000'396c: 0xb662          CPSIE    i
  //     MOV     r0, #0x10000000                         // Load PENDSVSET bit
  0x1000'396e: 0xf04f 0x5080   MOV.W    R0, #268435456         ; 0x1000'0000
  //     MOV     r1, #0xE000E000                         // Load NVIC base
  0x1000'3972: 0xf04f 0x21e0   MOV.W    R1, #-536813568        ; 0xe000'e000
  //     STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
  0x1000'3976: 0xf8c1 0x0d04   STR.W    R0, [R1, #0xd04]
  //     DSB                                             // Complete all memory accesses
  0x1000'397a: 0xf3bf 0x8f4f   DSB
  //     ISB                                             // Flush pipeline
  0x1000'397e: 0xf3bf 0x8f6f   ISB
                 __tx_wait_here:
  //     B       __tx_wait_here                          // Wait for the PendSV to happen
  0x1000'3982: 0xe7fe          B.N      __tx_wait_here         ; 0x1000'3982
                 __tx_ts_handler:
                 PendSV_Handler:
  //     LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
  0x1000'3984: 0x4824          LDR.N    R0, [PC, #0x90]        ; _tx_thread_current_ptr
  //     LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
  0x1000'3986: 0x4a25          LDR.N    R2, [PC, #0x94]        ; _tx_thread_execute_ptr
  //     MOV     r3, #0                                  // Build NULL value
  0x1000'3988: 0xf04f 0x0300   MOV.W    R3, #0
  //     LDR     r1, [r0]                                // Pickup current thread pointer
  0x1000'398c: 0x6801          LDR      R1, [R0]
  //     CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
  0x1000'398e: 0xb191          CBZ      R1, __tx_ts_new        ; 0x1000'39b6
  //     STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
  0x1000'3990: 0x6003          STR      R3, [R0]
  //     MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
  0x1000'3992: 0xf3ef 0x8c09   MRS      R12, PSP
  //     STMDB   r12!, {r4-r11}                          // Save its remaining registers
  0x1000'3996: 0xe92c 0x0ff0   STMDB    R12!, {R4-R11}
  //     TST     LR, #0x10                               // Determine if the VFP extended frame is present
  0x1000'399a: 0xf01e 0x0f10   TST.W    LR, #16                ; 0x10
  //     BNE     _skip_vfp_save
  0x1000'399e: 0xd101          BNE.N    _skip_vfp_save         ; 0x1000'39a4
  //     VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
  0x1000'39a0: 0xed2c 0x8a10   VSTMDB   R12!, {S16-S31}
                 _skip_vfp_save:
  //     LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
  0x1000'39a4: 0x4c1e          LDR.N    R4, [PC, #0x78]        ; _tx_timer_time_slice
  //     STMDB   r12!, {LR}                              // Save LR on the stack
  0x1000'39a6: 0xf84c 0xed04   STR.W    LR, [R12, #-0x4]!
  //     STR     r12, [r1, #8]                           // Save the thread stack pointer
  0x1000'39aa: 0xf8c1 0xc008   STR.W    R12, [R1, #0x8]
  //     LDR     r5, [r4]                                // Pickup current time-slice
  0x1000'39ae: 0x6825          LDR      R5, [R4]
  //     CBZ     r5, __tx_ts_new                         // If not active, skip processing
  0x1000'39b0: 0xb10d          CBZ      R5, __tx_ts_new        ; 0x1000'39b6
  //     STR     r5, [r1, #24]                           // Save current time-slice
  0x1000'39b2: 0x618d          STR      R5, [R1, #0x18]
  //     STR     r3, [r4]                                // Clear time-slice
  0x1000'39b4: 0x6023          STR      R3, [R4]
                 __tx_ts_new:
  //     CPSID   i                                       // Disable interrupts
  0x1000'39b6: 0xb672          CPSID    i
  //     LDR     r1, [r2]                                // Is there another thread ready to execute?
  0x1000'39b8: 0x6811          LDR      R1, [R2]
  //     CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
  0x1000'39ba: 0xb1d1          CBZ      R1, __tx_ts_wait       ; 0x1000'39f2
  //     STR     r1, [r0]                                // Setup the current thread pointer to the new thread
  0x1000'39bc: 0x6001          STR      R1, [R0]
  //     CPSIE   i                                       // Enable interrupts
  0x1000'39be: 0xb662          CPSIE    i
                 __tx_ts_restore:
  //     LDR     r7, [r1, #4]                            // Pickup the current thread run count
  0x1000'39c0: 0x684f          LDR      R7, [R1, #0x4]
  //     LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
  0x1000'39c2: 0x4c17          LDR.N    R4, [PC, #0x5c]        ; _tx_timer_time_slice
  //     LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
  0x1000'39c4: 0x698d          LDR      R5, [R1, #0x18]
  //     ADD     r7, r7, #1                              // Increment the thread run count
  0x1000'39c6: 0xf107 0x0701   ADD.W    R7, R7, #1
  //     STR     r7, [r1, #4]                            // Store the new run count
  0x1000'39ca: 0x604f          STR      R7, [R1, #0x4]
  //     STR     r5, [r4]                                // Setup global time-slice
  0x1000'39cc: 0x6025          STR      R5, [R4]
  //     LDR     r12, [r1, #12]                          // Get stack start
  0x1000'39ce: 0xf8d1 0xc00c   LDR.W    R12, [R1, #0xc]
  //     MSR     PSPLIM, r12                             // Set stack limit
  0x1000'39d2: 0xf38c 0x880b   MSR      PSPLIM, R12
  //     LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
  0x1000'39d6: 0xf8d1 0xc008   LDR.W    R12, [R1, #0x8]
  //     LDMIA   r12!, {LR}                              // Pickup LR
  0x1000'39da: 0xf85c 0xeb04   LDR.W    LR, [R12], #0x4
  //     TST     LR, #0x10                               // Determine if the VFP extended frame is present
  0x1000'39de: 0xf01e 0x0f10   TST.W    LR, #16                ; 0x10
  //     BNE     _skip_vfp_restore                       // If not, skip VFP restore
  0x1000'39e2: 0xd101          BNE.N    _skip_vfp_restore      ; 0x1000'39e8
  //     VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
  0x1000'39e4: 0xecbc 0x8a10   VLDM     R12!,{S16-S31}
                 _skip_vfp_restore:
  //     LDMIA   r12!, {r4-r11}                          // Recover thread's registers
  0x1000'39e8: 0xe8bc 0x0ff0   LDM      R12!, {R4-R11}
  //     MSR     PSP, r12                                // Setup the thread's stack pointer
  0x1000'39ec: 0xf38c 0x8809   MSR      PSP, R12
  //     BX      lr                                      // Return to thread!
  0x1000'39f0: 0x4770          BX       LR
                 __tx_ts_wait:
  //     CPSID   i                                       // Disable interrupts
  0x1000'39f2: 0xb672          CPSID    i
  //     LDR     r1, [r2]                                // Pickup the next thread to execute pointer
  0x1000'39f4: 0x6811          LDR      R1, [R2]
  //     STR     r1, [r0]                                // Store it in the current pointer
  0x1000'39f6: 0x6001          STR      R1, [R0]
  //     CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
  0x1000'39f8: 0xb909          CBNZ     R1, __tx_ts_ready      ; 0x1000'39fe
  //     CPSIE   i                                       // Enable interrupts
  0x1000'39fa: 0xb662          CPSIE    i
  //     B       __tx_ts_wait                            // Loop to continue waiting
  0x1000'39fc: 0xe7f9          B.N      __tx_ts_wait           ; 0x1000'39f2
                 __tx_ts_ready:
  //     MOV     r7, #0x08000000                         // Build clear PendSV value
  0x1000'39fe: 0xf04f 0x6700   MOV.W    R7, #134217728         ; 0x800'0000
  //     MOV     r8, #0xE000E000                         // Build base NVIC address
  0x1000'3a02: 0xf04f 0x28e0   MOV.W    R8, #-536813568        ; 0xe000'e000
  //     STR     r7, [r8, #0xD04]                        // Clear any PendSV
  0x1000'3a06: 0xf8c8 0x7d04   STR.W    R7, [R8, #0xd04]
  //     CPSIE   i                                       // Enable interrupts
  0x1000'3a0a: 0xb662          CPSIE    i
  //     B       __tx_ts_restore                         // Restore the thread
  0x1000'3a0c: 0xe7d8          B.N      __tx_ts_restore        ; 0x1000'39c0
                 _tx_vfp_access:
  //     VMOV.F32 s0, s0                                 // Simply access the VFP
  0x1000'3a0e: 0xeeb0 0x0a40   VMOV.F32 S0, S0
  //     BX       lr                                     // Return to caller
  0x1000'3a12: 0x4770          BX       LR
                 `$d.32`:
  //     END
  0x1000'3a14: 0x3800'23d8     DC32     _tx_thread_preempt_disable
  //     END
  0x1000'3a18: 0x3800'23c0     DC32     _tx_thread_current_ptr
  //     END
  0x1000'3a1c: 0x3800'23c4     DC32     _tx_thread_execute_ptr
  //     END
  0x1000'3a20: 0x3800'2440     DC32     _tx_timer_time_slice
                 $t:
                 `.text7`:
                 _tx_initialize_low_level:
  //     CPSID   i
  0x1000'3a24: 0xb672          CPSID    i
  //     LDR     r0, =_tx_initialize_unused_memory       // Build address of unused memory pointer
  0x1000'3a26: 0x4824          LDR.N    R0, [PC, #0x90]        ; _tx_initialize_unused_memory
  //     LDR     r1, =__tx_free_memory_start             // Build first free address
  0x1000'3a28: 0x4924          LDR.N    R1, [PC, #0x90]        ; __tx_free_memory_start
  //     STR     r1, [r0]                                // Setup first unused memory pointer
  0x1000'3a2a: 0x6001          STR      R1, [R0]
  //     MOV     r0, #0xE000E000                         // Build address of NVIC registers
  0x1000'3a2c: 0xf04f 0x20e0   MOV.W    R0, #-536813568        ; 0xe000'e000
  //     LDR     r1, =__vector_table                     // Pickup address of vector table
  0x1000'3a30: 0x4923          LDR.N    R1, [PC, #0x8c]        ; __Vectors
  //     STR     r1, [r0, #0xD08]                        // Set vector table address
  0x1000'3a32: 0xf8c0 0x1d08   STR.W    R1, [R0, #0xd08]
  //     LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
  0x1000'3a36: 0x4823          LDR.N    R0, [PC, #0x8c]        ; _tx_thread_system_stack_ptr
  //     LDR     r1, =__vector_table                     // Pickup address of vector table
  0x1000'3a38: 0x4921          LDR.N    R1, [PC, #0x84]        ; __Vectors
  //     LDR     r1, [r1]                                // Pickup reset stack pointer
  0x1000'3a3a: 0x6809          LDR      R1, [R1]
  //     STR     r1, [r0]                                // Save system stack pointer
  0x1000'3a3c: 0x6001          STR      R1, [R0]
  //     MOV     r0, #0xE000E000                         // Build address of NVIC registers
  0x1000'3a3e: 0xf04f 0x20e0   MOV.W    R0, #-536813568        ; 0xe000'e000
  //     LDR     r1, =SYSTICK_CYCLES
  0x1000'3a42: 0x4921          LDR.N    R1, [PC, #0x84]        ; SYSTICK_CYCLES
  //     STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
  0x1000'3a44: 0x6141          STR      R1, [R0, #0x14]
  //     MOV     r1, #0x7                                // Build SysTick Control Enable Value
  0x1000'3a46: 0xf04f 0x0107   MOV.W    R1, #7
  //     STR     r1, [r0, #0x10]                         // Setup SysTick Control
  0x1000'3a4a: 0x6101          STR      R1, [R0, #0x10]
  //     LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
  0x1000'3a4c: 0x2100          MOVS     R1, #0
  //     STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
  0x1000'3a4e: 0xf8c0 0x1d18   STR.W    R1, [R0, #0xd18]
  //     LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
  0x1000'3a52: 0x491e          LDR.N    R1, [PC, #0x78]        ; 0xff00'0000
  //     STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
  0x1000'3a54: 0xf8c0 0x1d1c   STR.W    R1, [R0, #0xd1c]
  //     LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
  0x1000'3a58: 0x491d          LDR.N    R1, [PC, #0x74]        ; 0x40ff'0000
  //     STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
  0x1000'3a5a: 0xf8c0 0x1d20   STR.W    R1, [R0, #0xd20]
  //     BX      lr
  0x1000'3a5e: 0x4770          BX       LR
                 __tx_BadHandler:
  //     B       __tx_BadHandler
  0x1000'3a60: 0xe7fe          B.N      __tx_BadHandler        ; 0x1000'3a60
                 __tx_IntHandler:
  //     PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
  0x1000'3a62: 0xb501          PUSH     {R0, LR}
  //     POP     {r0,lr}
  0x1000'3a64: 0xe8bd 0x4001   POP.W    {R0, LR}
  //     BX      lr
  0x1000'3a68: 0x4770          BX       LR
                 __tx_SysTickHandler:
                 SysTick_Handler:
  //     PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
  0x1000'3a6a: 0xb501          PUSH     {R0, LR}
  //     BL      _tx_timer_interrupt
  0x1000'3a6c: 0xf000 0xf83c   BL       _tx_timer_interrupt    ; 0x1000'3ae8
  //     POP     {r0,lr}
  0x1000'3a70: 0xe8bd 0x4001   POP.W    {R0, LR}
  //     BX      lr
  0x1000'3a74: 0x4770          BX       LR
                 HardFault_Handler:
  //     B       HardFault_Handler
  0x1000'3a76: 0xe7fe          B.N      HardFault_Handler      ; 0x1000'3a76
                 UsageFault_Handler:
  //     CPSID   i                                       // Disable interrupts
  0x1000'3a78: 0xb672          CPSID    i
  //     LDR     r0, =0xE000ED28                         // CFSR address
  0x1000'3a7a: 0x4816          LDR.N    R0, [PC, #0x58]        ; 0xe000'ed28
  //     LDR     r1,[r0]                                 // Pick up CFSR
  0x1000'3a7c: 0x6801          LDR      R1, [R0]
  //     TST     r1, #0x00100000                         // Check for Stack Overflow
  0x1000'3a7e: 0xf411 0x1f80   TST.W    R1, #1048576           ; 0x10'0000
                 _unhandled_usage_loop:
  //     BEQ     _unhandled_usage_loop                   // If not stack overflow then loop
  0x1000'3a82: 0xd0fe          BEQ.N    _unhandled_usage_loop  ; 0x1000'3a82
  //     STR     r1, [r0]                                // Clear CFSR flag(s)
  0x1000'3a84: 0x6001          STR      R1, [R0]
  //     LDR     r0, =0xE000EF34                         // Cleanup FPU context: Load FPCCR address
  0x1000'3a86: 0x4814          LDR.N    R0, [PC, #0x50]        ; 0xe000'ef34
  //     LDR     r1, [r0]                                // Load FPCCR
  0x1000'3a88: 0x6801          LDR      R1, [R0]
  //     BIC     r1, r1, #1                              // Clear the lazy preservation active bit
  0x1000'3a8a: 0xf021 0x0101   BIC.W    R1, R1, #1
  //     STR     r1, [r0]                                // Store the value
  0x1000'3a8e: 0x6001          STR      R1, [R0]
  //     LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
  0x1000'3a90: 0x4812          LDR.N    R0, [PC, #0x48]        ; _tx_thread_current_ptr
  //     LDR     r0,[r0]                                 // Pick up current thread pointer
  0x1000'3a92: 0x6800          LDR      R0, [R0]
  //     PUSH    {r0,lr}                                 // Save LR (and r0 to maintain stack alignment)
  0x1000'3a94: 0xb501          PUSH     {R0, LR}
  //     BL      _tx_thread_stack_error_handler          // Call ThreadX/user handler
  0x1000'3a96: 0xf7fe 0xfe1f   BL       _tx_thread_stack_error_handler
                                                               ; 0x1000'26d8
  //     POP     {r0,lr}                                 // Restore LR and dummy reg
  0x1000'3a9a: 0xe8bd 0x4001   POP.W    {R0, LR}
  //     MOV     r1, #0                                  // Build NULL value
  0x1000'3a9e: 0xf04f 0x0100   MOV.W    R1, #0
  //     LDR     r0, =_tx_thread_current_ptr             // Pickup address of current thread pointer
  0x1000'3aa2: 0x480e          LDR.N    R0, [PC, #0x38]        ; _tx_thread_current_ptr
  //     STR     r1, [r0]                                // Clear current thread pointer
  0x1000'3aa4: 0x6001          STR      R1, [R0]
  //     LDR     r0, =0xE000ED04                         // Load ICSR
  0x1000'3aa6: 0x480e          LDR.N    R0, [PC, #0x38]        ; 0xe000'ed04
  //     LDR     r1, =0x10000000                         // Set PENDSVSET bit
  0x1000'3aa8: 0x490e          LDR.N    R1, [PC, #0x38]        ; __Vectors
  //     STR     r1, [r0]                                // Store ICSR
  0x1000'3aaa: 0x6001          STR      R1, [R0]
  //     DSB                                             // Wait for memory access to complete
  0x1000'3aac: 0xf3bf 0x8f4f   DSB
  //     CPSIE   i                                       // Enable interrupts
  0x1000'3ab0: 0xb662          CPSIE    i
  //     BX      lr                                      // Return from exception
  0x1000'3ab2: 0x4770          BX       LR
                 __tx_NMIHandler:
  //     B       __tx_NMIHandler
  0x1000'3ab4: 0xe7fe          B.N      __tx_NMIHandler        ; 0x1000'3ab4
                 __tx_DBGHandler:
  //     B       __tx_DBGHandler
  0x1000'3ab6: 0xe7fe          B.N      __tx_DBGHandler        ; 0x1000'3ab6
                 `$d.32`:
  //     END
  0x1000'3ab8: 0x3800'23b8     DC32     _tx_initialize_unused_memory
  //     END
  0x1000'3abc: 0x3800'23a0     DC32     __tx_free_memory_start
  //     END
  0x1000'3ac0: 0x1000'0000     DC32     __Vectors
  //     END
  0x1000'3ac4: 0x3800'23bc     DC32     _tx_thread_system_stack_ptr
  //     END
  0x1000'3ac8: 0x000e'a5ff     DC32     SYSTICK_CYCLES
  //     END
  0x1000'3acc: 0xff00'0000     DC32     0xff00'0000            ; '....'
  //     END
  0x1000'3ad0: 0x40ff'0000     DC32     0x40ff'0000            ; '...@'
  //     END
  0x1000'3ad4: 0xe000'ed28     DC32     0xe000'ed28            ; '(...'
  //     END
  0x1000'3ad8: 0xe000'ef34     DC32     0xe000'ef34            ; '4...'
  //     END
  0x1000'3adc: 0x3800'23c0     DC32     _tx_thread_current_ptr
  //     END
  0x1000'3ae0: 0xe000'ed04     DC32     0xe000'ed04            ; '....'
  //     END
  0x1000'3ae4: 0x1000'0000     DC32     __Vectors
                 $t:
                 `.text6`:
                 _tx_timer_interrupt:
  //     LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
  0x1000'3ae8: 0x4921          LDR.N    R1, [PC, #0x84]        ; _tx_timer_system_clock
  //     LDR     r0, [r1, #0]                            // Pickup system clock
  0x1000'3aea: 0x6808          LDR      R0, [R1]
  //     ADD     r0, r0, #1                              // Increment system clock
  0x1000'3aec: 0xf100 0x0001   ADD.W    R0, R0, #1
  //     STR     r0, [r1, #0]                            // Store new system clock
  0x1000'3af0: 0x6008          STR      R0, [R1]
  //     LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
  0x1000'3af2: 0x4b20          LDR.N    R3, [PC, #0x80]        ; _tx_timer_time_slice
  //     LDR     r2, [r3, #0]                            // Pickup time-slice
  0x1000'3af4: 0x681a          LDR      R2, [R3]
  //     CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
  0x1000'3af6: 0xb13a          CBZ      R2, __tx_timer_no_time_slice
                                                               ; 0x1000'3b08
  //     SUB     r2, r2, #1                              // Decrement the time-slice
  0x1000'3af8: 0xf1a2 0x0201   SUB.W    R2, R2, #1
  //     STR     r2, [r3, #0]                            // Store new time-slice value
  0x1000'3afc: 0x601a          STR      R2, [R3]
  //     CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
  0x1000'3afe: 0xb91a          CBNZ     R2, __tx_timer_no_time_slice
                                                               ; 0x1000'3b08
  //     LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
  0x1000'3b00: 0x4b1d          LDR.N    R3, [PC, #0x74]        ; _tx_timer_expired_time_slice
  //     MOV     r0, #1                                  // Build expired value
  0x1000'3b02: 0xf04f 0x0001   MOV.W    R0, #1
  //     STR     r0, [r3, #0]                            // Set time-slice expiration flag
  0x1000'3b06: 0x6018          STR      R0, [R3]
                 __tx_timer_no_time_slice:
  //     LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
  0x1000'3b08: 0x491c          LDR.N    R1, [PC, #0x70]        ; _tx_timer_current_ptr
  //     LDR     r0, [r1, #0]                            // Pickup current timer
  0x1000'3b0a: 0x6808          LDR      R0, [R1]
  //     LDR     r2, [r0, #0]                            // Pickup timer list entry
  0x1000'3b0c: 0x6802          LDR      R2, [R0]
  //     CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
  0x1000'3b0e: 0xb122          CBZ      R2, __tx_timer_no_timer
                                                               ; 0x1000'3b1a
  //     LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
  0x1000'3b10: 0x4b1b          LDR.N    R3, [PC, #0x6c]        ; _tx_timer_expired
  //     MOV     r2, #1                                  // Build expired value
  0x1000'3b12: 0xf04f 0x0201   MOV.W    R2, #1
  //     STR     r2, [r3, #0]                            // Set expired flag
  0x1000'3b16: 0x601a          STR      R2, [R3]
  //     B       __tx_timer_done                         // Finished timer processing
  0x1000'3b18: 0xe008          B.N      __tx_timer_done        ; 0x1000'3b2c
                 __tx_timer_no_timer:
  //     ADD     r0, r0, #4                              // Move to next timer
  0x1000'3b1a: 0xf100 0x0004   ADD.W    R0, R0, #4
  //     LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
  0x1000'3b1e: 0x4b19          LDR.N    R3, [PC, #0x64]        ; _tx_timer_list_end
  //     LDR     r2, [r3, #0]                            // Pickup list end
  0x1000'3b20: 0x681a          LDR      R2, [R3]
  //     CMP     r0, r2                                  // Are we at list end?
  0x1000'3b22: 0x4290          CMP      R0, R2
  //     BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
  0x1000'3b24: 0xd101          BNE.N    __tx_timer_skip_wrap   ; 0x1000'3b2a
  //     LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
  0x1000'3b26: 0x4b18          LDR.N    R3, [PC, #0x60]        ; _tx_timer_list_start
  //     LDR     r0, [r3, #0]                            // Set current pointer to list start
  0x1000'3b28: 0x6818          LDR      R0, [R3]
                 __tx_timer_skip_wrap:
  //     STR     r0, [r1, #0]                            // Store new current timer pointer
  0x1000'3b2a: 0x6008          STR      R0, [R1]
                 __tx_timer_done:
  //     LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
  0x1000'3b2c: 0x4b12          LDR.N    R3, [PC, #0x48]        ; _tx_timer_expired_time_slice
  //     LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
  0x1000'3b2e: 0x681a          LDR      R2, [R3]
  //     CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
  0x1000'3b30: 0xb912          CBNZ     R2, __tx_something_expired
                                                               ; 0x1000'3b38
  //     LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
  0x1000'3b32: 0x4913          LDR.N    R1, [PC, #0x4c]        ; _tx_timer_expired
  //     LDR     r0, [r1, #0]                            // Pickup timer expired flag
  0x1000'3b34: 0x6808          LDR      R0, [R1]
  //     CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
  0x1000'3b36: 0xb1c0          CBZ      R0, __tx_timer_nothing_expired
                                                               ; 0x1000'3b6a
                 __tx_something_expired:
  //     PUSH    {r0, lr}                                // Save the lr register on the stack
  0x1000'3b38: 0xb501          PUSH     {R0, LR}
  //     LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
  0x1000'3b3a: 0x4911          LDR.N    R1, [PC, #0x44]        ; _tx_timer_expired
  //     LDR     r0, [r1, #0]                            // Pickup timer expired flag
  0x1000'3b3c: 0x6808          LDR      R0, [R1]
  //     CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
  0x1000'3b3e: 0xb108          CBZ      R0, __tx_timer_dont_activate
                                                               ; 0x1000'3b44
  //     BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
  0x1000'3b40: 0xf000 0xf82e   BL       _tx_timer_expiration_process
                                                               ; 0x1000'3ba0
                 __tx_timer_dont_activate:
  //     LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
  0x1000'3b44: 0x4b0c          LDR.N    R3, [PC, #0x30]        ; _tx_timer_expired_time_slice
  //     LDR     r2, [r3, #0]                            // Pickup the actual flag
  0x1000'3b46: 0x681a          LDR      R2, [R3]
  //     CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
  0x1000'3b48: 0xb16a          CBZ      R2, __tx_timer_skip_time_slice
                                                               ; 0x1000'3b66
  //     BL      _tx_thread_time_slice                   // Call time-slice processing
  0x1000'3b4a: 0xf7ff 0xfb79   BL       _tx_thread_time_slice  ; 0x1000'3240
  //     LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
  0x1000'3b4e: 0x480f          LDR.N    R0, [PC, #0x3c]        ; _tx_thread_preempt_disable
  //     LDR     r1, [r0]                                // Is the preempt disable flag set?
  0x1000'3b50: 0x6801          LDR      R1, [R0]
  //     CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
  0x1000'3b52: 0xb941          CBNZ     R1, __tx_timer_skip_time_slice
                                                               ; 0x1000'3b66
  //     LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
  0x1000'3b54: 0x480e          LDR.N    R0, [PC, #0x38]        ; _tx_thread_current_ptr
  //     LDR     r1, [r0]                                // Pickup the current thread pointer
  0x1000'3b56: 0x6801          LDR      R1, [R0]
  //     LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
  0x1000'3b58: 0x4a0e          LDR.N    R2, [PC, #0x38]        ; _tx_thread_execute_ptr
  //     LDR     r3, [r2]                                // Pickup the execute thread pointer
  0x1000'3b5a: 0x6813          LDR      R3, [R2]
  //     LDR     r0, =0xE000ED04                         // Build address of control register
  0x1000'3b5c: 0x480e          LDR.N    R0, [PC, #0x38]        ; 0xe000'ed04
  //     LDR     r2, =0x10000000                         // Build value for PendSV bit
  0x1000'3b5e: 0x4a0f          LDR.N    R2, [PC, #0x3c]        ; __Vectors
  //     CMP     r1, r3                                  // Are they the same?
  0x1000'3b60: 0x4299          CMP      R1, R3
  //     BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
  0x1000'3b62: 0xd000          BEQ.N    __tx_timer_skip_time_slice
                                                               ; 0x1000'3b66
  //     STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
  0x1000'3b64: 0x6002          STR      R2, [R0]
                 __tx_timer_not_ts_expiration:
                 __tx_timer_skip_time_slice:
  //     POP     {r0, lr}                                // Recover lr register (r0 is just there for
  0x1000'3b66: 0xe8bd 0x4001   POP.W    {R0, LR}
                 __tx_timer_nothing_expired:
  //     DSB                                             // Complete all memory access
  0x1000'3b6a: 0xf3bf 0x8f4f   DSB
  //     BX      lr                                      // Return to caller
  0x1000'3b6e: 0x4770          BX       LR
                 `$d.32`:
  //     END
  0x1000'3b70: 0x3800'240c     DC32     _tx_timer_system_clock
  //     END
  0x1000'3b74: 0x3800'2440     DC32     _tx_timer_time_slice
  //     END
  0x1000'3b78: 0x3800'2410     DC32     _tx_timer_expired_time_slice
  //     END
  0x1000'3b7c: 0x3800'241c     DC32     _tx_timer_current_ptr
  //     END
  0x1000'3b80: 0x3800'2420     DC32     _tx_timer_expired
  //     END
  0x1000'3b84: 0x3800'2418     DC32     _tx_timer_list_end
  //     END
  0x1000'3b88: 0x3800'2414     DC32     _tx_timer_list_start
  //     END
  0x1000'3b8c: 0x3800'23d8     DC32     _tx_thread_preempt_disable
  //     END
  0x1000'3b90: 0x3800'23c0     DC32     _tx_thread_current_ptr
  //     END
  0x1000'3b94: 0x3800'23c4     DC32     _tx_thread_execute_ptr
  //     END
  0x1000'3b98: 0xe000'ed04     DC32     0xe000'ed04            ; '....'
  //     END
  0x1000'3b9c: 0x1000'0000     DC32     __Vectors
                 $t:
                 `.text8`:
                 _tx_timer_expiration_process:
  // VOID  _tx_timer_expiration_process(VOID)
  // {
  0x1000'3ba0: 0xb510          PUSH     {R4, LR}
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'3ba2: 0xf3ef 0x8410   MRS      R4, PRIMASK
  //     return(posture);
  0x1000'3ba6: 0xb672          CPSID    i
  //     return(int_posture);
  0x1000'3ba8: 0x4803          LDR.N    R0, ??_tx_timer_expiration_process_0
                                                               ; _tx_timer_thread
  0x1000'3baa: 0xf7fe 0xfbbb   BL       _tx_thread_system_ni_resume
                                                               ; 0x1000'2324
  //     TX_RESTORE
  0x1000'3bae: 0x0020          MOVS     R0, R4
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'3bb0: 0xf380 0x8810   MSR      PRIMASK, R0
  // }
  0x1000'3bb4: 0xbd10          POP      {R4, PC}
  0x1000'3bb6: 0xbf00          NOP
                 `$d.32`:
                 ??_tx_timer_expiration_process_0:
  0x1000'3bb8: 0x3800'20f0     DC32     _tx_timer_thread
                 $t:
                 `.text_28`:
                 tx_task_entry:
  // static void tx_task_entry(ULONG thread_input) {
  0x1000'3bbc: 0xb538          PUSH     {R3-R5, LR}
  0x1000'3bbe: 0x0005          MOVS     R5, R0
  //     int counter = 0;
  0x1000'3bc0: 0x2400          MOVS     R4, #0
                 ??tx_task_entry_0:
  //         printf("hello threadx %d\r\n", counter++);
  0x1000'3bc2: 0x0021          MOVS     R1, R4
  0x1000'3bc4: 0x4824          LDR.N    R0, ??DataTable10_10   ; ?_2
  0x1000'3bc6: 0xf7fd 0xfe57   BL       printf                 ; 0x1000'1878
  0x1000'3bca: 0x1c64          ADDS     R4, R4, #1
  //         tx_thread_sleep(1000);
  0x1000'3bcc: 0xf44f 0x707a   MOV.W    R0, #1000              ; 0x3e8
  0x1000'3bd0: 0xf000 0xf854   BL       _tx_thread_sleep       ; 0x1000'3c7c
  0x1000'3bd4: 0xe7f5          B.N      ??tx_task_entry_0      ; 0x1000'3bc2
                 `.text_29`:
                 tx_application_define:
  // void tx_application_define(void *first_unused_memory) {
  0x1000'3bd6: 0xb538          PUSH     {R3-R5, LR}
  0x1000'3bd8: 0xb088          SUB      SP, SP, #0x20
  0x1000'3bda: 0x0004          MOVS     R4, R0
  //     CHAR *tx_stack = TX_NULL;
  0x1000'3bdc: 0x2000          MOVS     R0, #0
  0x1000'3bde: 0x9007          STR      R0, [SP, #0x1c]
  //     tx_byte_pool_create(&tx_pool, "tx_pool", tx_memory, sizeof(tx_memory));
  0x1000'3be0: 0x4d1e          LDR.N    R5, ??DataTable10_11   ; `tx_application_define::tx_pool`
  0x1000'3be2: 0x2034          MOVS     R0, #52                ; 0x34
  0x1000'3be4: 0x9000          STR      R0, [SP]
  0x1000'3be6: 0xf44f 0x5380   MOV.W    R3, #4096              ; 0x1000
  0x1000'3bea: 0x4a1d          LDR.N    R2, ??DataTable10_12   ; `tx_application_define::tx_memory`
  0x1000'3bec: 0x491d          LDR.N    R1, ??DataTable10_13   ; ?_3
  0x1000'3bee: 0x0028          MOVS     R0, R5
  0x1000'3bf0: 0xf7ff 0xfe38   BL       _txe_byte_pool_create  ; 0x1000'3864
  //     tx_byte_allocate(&tx_pool, (VOID **) &tx_stack, 1024, TX_NO_WAIT);
  0x1000'3bf4: 0x2300          MOVS     R3, #0
  0x1000'3bf6: 0xf44f 0x6280   MOV.W    R2, #1024              ; 0x400
  0x1000'3bfa: 0xa907          ADD      R1, SP, #0x1c
  0x1000'3bfc: 0x0028          MOVS     R0, R5
  0x1000'3bfe: 0xf000 0xf883   BL       _txe_byte_allocate     ; 0x1000'3d08
  //     tx_thread_create(&tx_task, "tx_task", tx_task_entry, 0, tx_stack, 1024, 1, 1, 10, TX_AUTO_START);
  0x1000'3c02: 0x20d8          MOVS     R0, #216               ; 0xd8
  0x1000'3c04: 0x9006          STR      R0, [SP, #0x18]
  0x1000'3c06: 0x2001          MOVS     R0, #1
  0x1000'3c08: 0x9005          STR      R0, [SP, #0x14]
  0x1000'3c0a: 0x200a          MOVS     R0, #10                ; 0xa
  0x1000'3c0c: 0x9004          STR      R0, [SP, #0x10]
  0x1000'3c0e: 0x2001          MOVS     R0, #1
  0x1000'3c10: 0x9003          STR      R0, [SP, #0xc]
  0x1000'3c12: 0x2001          MOVS     R0, #1
  0x1000'3c14: 0x9002          STR      R0, [SP, #0x8]
  0x1000'3c16: 0xf44f 0x6080   MOV.W    R0, #1024              ; 0x400
  0x1000'3c1a: 0x9001          STR      R0, [SP, #0x4]
  0x1000'3c1c: 0x9807          LDR      R0, [SP, #0x1c]
  0x1000'3c1e: 0x9000          STR      R0, [SP]
  0x1000'3c20: 0x2300          MOVS     R3, #0
  0x1000'3c22: 0x4a11          LDR.N    R2, ??DataTable10_14   ; tx_task_entry
  0x1000'3c24: 0x4911          LDR.N    R1, ??DataTable10_15   ; ?_4
  0x1000'3c26: 0x4812          LDR.N    R0, ??DataTable10_16   ; `tx_application_define::tx_task`
  0x1000'3c28: 0xf7ff 0xfbd8   BL       _txe_thread_create     ; 0x1000'33dc
  //     tx_block_release(tx_stack);
  0x1000'3c2c: 0x9807          LDR      R0, [SP, #0x1c]
  0x1000'3c2e: 0xf000 0xf8cb   BL       _txe_block_release     ; 0x1000'3dc8
  // }
  0x1000'3c32: 0xb009          ADD      SP, SP, #0x24
  0x1000'3c34: 0xbd30          POP      {R4, R5, PC}
                 `.text_30`:
                 main:
  // int main(void) {
  0x1000'3c36: 0xb510          PUSH     {R4, LR}
  //     int count = 0;
  0x1000'3c38: 0x2400          MOVS     R4, #0
  //     uart_init();
  0x1000'3c3a: 0xf7fd 0xfe64   BL       uart_init              ; 0x1000'1906
  //     printf("Start\r\n");
  0x1000'3c3e: 0x480d          LDR.N    R0, ??DataTable10_17   ; ?_5
  0x1000'3c40: 0xf7fd 0xfe1a   BL       printf                 ; 0x1000'1878
  //     tx_kernel_enter();
  0x1000'3c44: 0xf000 0xf8dc   BL       _tx_initialize_kernel_enter
                                                               ; 0x1000'3e00
                 ??main_0:
  //         __NOP();
  0x1000'3c48: 0xbf00          NOP
  //         printf("hello world - %d.\r\n", count++);
  0x1000'3c4a: 0x0021          MOVS     R1, R4
  0x1000'3c4c: 0x480a          LDR.N    R0, ??DataTable10_18   ; ?_6
  0x1000'3c4e: 0xf7fd 0xfe13   BL       printf                 ; 0x1000'1878
  0x1000'3c52: 0x1c64          ADDS     R4, R4, #1
  0x1000'3c54: 0xe7f8          B.N      ??main_0               ; 0x1000'3c48
  0x1000'3c56: 0x0000          MOVS     R0, R0
                 `$d.32`:
                 ??DataTable10_10:
  0x1000'3c58: 0x1000'4290     DC32     ?_2
                 ??DataTable10_11:
  0x1000'3c5c: 0x3800'234c     DC32     `tx_application_define::tx_pool`
                 ??DataTable10_12:
  0x1000'3c60: 0x3800'0018     DC32     `tx_application_define::tx_memory`
                 ??DataTable10_13:
  0x1000'3c64: 0x1000'42cc     DC32     ?_3
                 ??DataTable10_14:
  0x1000'3c68: 0x1000'3bbd     DC32     tx_task_entry
                 ??DataTable10_15:
  0x1000'3c6c: 0x1000'42d4     DC32     ?_4
                 ??DataTable10_16:
  0x1000'3c70: 0x3800'2018     DC32     `tx_application_define::tx_task`
                 ??DataTable10_17:
  0x1000'3c74: 0x1000'42dc     DC32     ?_5
                 ??DataTable10_18:
  0x1000'3c78: 0x1000'42a4     DC32     ?_6
                 $t:
                 `.text8`:
                 _tx_thread_sleep:
  // UINT  _tx_thread_sleep(ULONG timer_ticks)
  // {
  0x1000'3c7c: 0xb570          PUSH     {R4-R6, LR}
  0x1000'3c7e: 0x0004          MOVS     R4, R0
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'3c80: 0xf3ef 0x8610   MRS      R6, PRIMASK
  //     return(posture);
  0x1000'3c84: 0xb672          CPSID    i
  //     return(int_posture);
  0x1000'3c86: 0x481c          LDR.N    R0, ??_tx_thread_sleep_0
                                                               ; _tx_thread_current_ptr
  0x1000'3c88: 0x6805          LDR      R5, [R0]
  //     if (thread_ptr == TX_NULL)
  0x1000'3c8a: 0x2d00          CMP      R5, #0
  0x1000'3c8c: 0xd104          BNE.N    ??_tx_thread_sleep_1   ; 0x1000'3c98
  //         TX_RESTORE
  0x1000'3c8e: 0x0031          MOVS     R1, R6
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'3c90: 0xf381 0x8810   MSR      PRIMASK, R1
  // }
  0x1000'3c94: 0x2013          MOVS     R0, #19                ; 0x13
  0x1000'3c96: 0xe02e          B.N      ??_tx_thread_sleep_2   ; 0x1000'3cf6
                 ??_tx_thread_sleep_1:
  //     else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
  0x1000'3c98: 0x4818          LDR.N    R0, [PC, #0x60]        ; _tx_thread_system_state
  0x1000'3c9a: 0x6800          LDR      R0, [R0]
  0x1000'3c9c: 0xf3ef 0x8105   MRS      R1, IPSR
  0x1000'3ca0: 0x4308          ORRS     R0, R0, R1
  0x1000'3ca2: 0x2800          CMP      R0, #0
  0x1000'3ca4: 0xd004          BEQ.N    ??_tx_thread_sleep_3   ; 0x1000'3cb0
  //         TX_RESTORE
  0x1000'3ca6: 0x0031          MOVS     R1, R6
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'3ca8: 0xf381 0x8810   MSR      PRIMASK, R1
  // }
  0x1000'3cac: 0x2013          MOVS     R0, #19                ; 0x13
  0x1000'3cae: 0xe022          B.N      ??_tx_thread_sleep_2   ; 0x1000'3cf6
                 ??_tx_thread_sleep_3:
  //     else if (thread_ptr == &_tx_timer_thread)
  0x1000'3cb0: 0x4813          LDR.N    R0, [PC, #0x4c]        ; _tx_timer_thread
  0x1000'3cb2: 0x4285          CMP      R5, R0
  0x1000'3cb4: 0xd104          BNE.N    ??_tx_thread_sleep_4   ; 0x1000'3cc0
  //         TX_RESTORE
  0x1000'3cb6: 0x0031          MOVS     R1, R6
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'3cb8: 0xf381 0x8810   MSR      PRIMASK, R1
  // }
  0x1000'3cbc: 0x2013          MOVS     R0, #19                ; 0x13
  0x1000'3cbe: 0xe01a          B.N      ??_tx_thread_sleep_2   ; 0x1000'3cf6
                 ??_tx_thread_sleep_4:
  //     else if (timer_ticks == ((ULONG) 0))
  0x1000'3cc0: 0x2c00          CMP      R4, #0
  0x1000'3cc2: 0xd104          BNE.N    ??_tx_thread_sleep_5   ; 0x1000'3cce
  //         TX_RESTORE
  0x1000'3cc4: 0x0031          MOVS     R1, R6
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'3cc6: 0xf381 0x8810   MSR      PRIMASK, R1
  // }
  0x1000'3cca: 0x2000          MOVS     R0, #0
  0x1000'3ccc: 0xe013          B.N      ??_tx_thread_sleep_2   ; 0x1000'3cf6
                 ??_tx_thread_sleep_5:
  //         if (_tx_thread_preempt_disable != ((UINT) 0))
  0x1000'3cce: 0x480d          LDR.N    R0, [PC, #0x34]        ; _tx_thread_preempt_disable
  0x1000'3cd0: 0x6800          LDR      R0, [R0]
  0x1000'3cd2: 0x2800          CMP      R0, #0
  0x1000'3cd4: 0xd004          BEQ.N    ??_tx_thread_sleep_6   ; 0x1000'3ce0
  //             TX_RESTORE
  0x1000'3cd6: 0x0031          MOVS     R1, R6
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'3cd8: 0xf381 0x8810   MSR      PRIMASK, R1
  // }
  0x1000'3cdc: 0x2013          MOVS     R0, #19                ; 0x13
  0x1000'3cde: 0xe00a          B.N      ??_tx_thread_sleep_2   ; 0x1000'3cf6
                 ??_tx_thread_sleep_6:
  //             thread_ptr -> tx_thread_state =    TX_SLEEP;
  0x1000'3ce0: 0x2004          MOVS     R0, #4
  0x1000'3ce2: 0x6328          STR      R0, [R5, #0x30]
  //             _tx_thread_system_ni_suspend(thread_ptr, timer_ticks);
  0x1000'3ce4: 0x0021          MOVS     R1, R4
  0x1000'3ce6: 0x0028          MOVS     R0, R5
  0x1000'3ce8: 0xf7fe 0xfd54   BL       _tx_thread_system_ni_suspend
                                                               ; 0x1000'2794
  //             TX_RESTORE
  0x1000'3cec: 0x0031          MOVS     R1, R6
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'3cee: 0xf381 0x8810   MSR      PRIMASK, R1
  // }
  0x1000'3cf2: 0xf8d5 0x0084   LDR.W    R0, [R5, #0x84]
                 ??_tx_thread_sleep_2:
  //     return(status);
  0x1000'3cf6: 0xbd70          POP      {R4-R6, PC}
                 `$d.32`:
                 ??_tx_thread_sleep_0:
  0x1000'3cf8: 0x3800'23c0     DC32     _tx_thread_current_ptr
  0x1000'3cfc: 0x3800'0004     DC32     _tx_thread_system_state
  0x1000'3d00: 0x3800'20f0     DC32     _tx_timer_thread
  0x1000'3d04: 0x3800'23d8     DC32     _tx_thread_preempt_disable
                 $t:
                 `.text8`:
                 _txe_byte_allocate:
  // UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
  //                                     ULONG memory_size,  ULONG wait_option)
  // {
  0x1000'3d08: 0xe92d 0x43f8   PUSH.W   {R3-R9, LR}
  0x1000'3d0c: 0x0005          MOVS     R5, R0
  0x1000'3d0e: 0x000e          MOVS     R6, R1
  0x1000'3d10: 0x0017          MOVS     R7, R2
  0x1000'3d12: 0x4698          MOV      R8, R3
  //     status =  TX_SUCCESS;
  0x1000'3d14: 0x2400          MOVS     R4, #0
  //     if (pool_ptr == TX_NULL)
  0x1000'3d16: 0x2d00          CMP      R5, #0
  0x1000'3d18: 0xd102          BNE.N    ??_txe_byte_allocate_1 ; 0x1000'3d20
  //         status =  TX_POOL_ERROR;
  0x1000'3d1a: 0x2002          MOVS     R0, #2
  0x1000'3d1c: 0x0004          MOVS     R4, R0
  0x1000'3d1e: 0xe022          B.N      ??_txe_byte_allocate_2 ; 0x1000'3d66
                 ??_txe_byte_allocate_1:
  //     else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
  0x1000'3d20: 0x6829          LDR      R1, [R5]
  0x1000'3d22: 0x4825          LDR.N    R0, ??_txe_byte_allocate_0
                                                               ; 0x4259'5445
  0x1000'3d24: 0x4281          CMP      R1, R0
  0x1000'3d26: 0xd002          BEQ.N    ??_txe_byte_allocate_3 ; 0x1000'3d2e
  //         status =  TX_POOL_ERROR;
  0x1000'3d28: 0x2002          MOVS     R0, #2
  0x1000'3d2a: 0x0004          MOVS     R4, R0
  0x1000'3d2c: 0xe01b          B.N      ??_txe_byte_allocate_2 ; 0x1000'3d66
                 ??_txe_byte_allocate_3:
  //     else if (memory_ptr == TX_NULL)
  0x1000'3d2e: 0x2e00          CMP      R6, #0
  0x1000'3d30: 0xd102          BNE.N    ??_txe_byte_allocate_4 ; 0x1000'3d38
  //         status =  TX_PTR_ERROR;
  0x1000'3d32: 0x2003          MOVS     R0, #3
  0x1000'3d34: 0x0004          MOVS     R4, R0
  0x1000'3d36: 0xe016          B.N      ??_txe_byte_allocate_2 ; 0x1000'3d66
                 ??_txe_byte_allocate_4:
  //     else if (memory_size == ((ULONG) 0))
  0x1000'3d38: 0x2f00          CMP      R7, #0
  0x1000'3d3a: 0xd102          BNE.N    ??_txe_byte_allocate_5 ; 0x1000'3d42
  //         status =  TX_SIZE_ERROR;
  0x1000'3d3c: 0x2005          MOVS     R0, #5
  0x1000'3d3e: 0x0004          MOVS     R4, R0
  0x1000'3d40: 0xe011          B.N      ??_txe_byte_allocate_2 ; 0x1000'3d66
                 ??_txe_byte_allocate_5:
  //     else if (memory_size > pool_ptr -> tx_byte_pool_size)
  0x1000'3d42: 0x69e8          LDR      R0, [R5, #0x1c]
  0x1000'3d44: 0x42b8          CMP      R0, R7
  0x1000'3d46: 0xd202          BCS.N    ??_txe_byte_allocate_6 ; 0x1000'3d4e
  //         status =  TX_SIZE_ERROR;
  0x1000'3d48: 0x2005          MOVS     R0, #5
  0x1000'3d4a: 0x0004          MOVS     R4, R0
  0x1000'3d4c: 0xe00b          B.N      ??_txe_byte_allocate_2 ; 0x1000'3d66
                 ??_txe_byte_allocate_6:
  //         if (wait_option != TX_NO_WAIT)
  0x1000'3d4e: 0xf1b8 0x0f00   CMP.W    R8, #0
  0x1000'3d52: 0xd008          BEQ.N    ??_txe_byte_allocate_2 ; 0x1000'3d66
  //             if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
  0x1000'3d54: 0x4819          LDR.N    R0, [PC, #0x64]        ; _tx_thread_system_state
  0x1000'3d56: 0x6800          LDR      R0, [R0]
  0x1000'3d58: 0xf3ef 0x8105   MRS      R1, IPSR
  0x1000'3d5c: 0x4308          ORRS     R0, R0, R1
  0x1000'3d5e: 0x2800          CMP      R0, #0
  0x1000'3d60: 0xd001          BEQ.N    ??_txe_byte_allocate_2 ; 0x1000'3d66
  //                 status =  TX_WAIT_ERROR;
  0x1000'3d62: 0x2004          MOVS     R0, #4
  0x1000'3d64: 0x0004          MOVS     R4, R0
                 ??_txe_byte_allocate_2:
  //     if (status == TX_SUCCESS)
  0x1000'3d66: 0x2c00          CMP      R4, #0
  0x1000'3d68: 0xd107          BNE.N    ??_txe_byte_allocate_7 ; 0x1000'3d7a
  //         TX_THREAD_GET_CURRENT(thread_ptr)
  0x1000'3d6a: 0x4815          LDR.N    R0, [PC, #0x54]        ; _tx_thread_current_ptr
  0x1000'3d6c: 0x6800          LDR      R0, [R0]
  0x1000'3d6e: 0x4681          MOV      R9, R0
  //         if (thread_ptr == &_tx_timer_thread)
  0x1000'3d70: 0x4814          LDR.N    R0, [PC, #0x50]        ; _tx_timer_thread
  0x1000'3d72: 0x4581          CMP      R9, R0
  0x1000'3d74: 0xd101          BNE.N    ??_txe_byte_allocate_7 ; 0x1000'3d7a
  //             status =  TX_CALLER_ERROR;
  0x1000'3d76: 0x2013          MOVS     R0, #19                ; 0x13
  0x1000'3d78: 0x0004          MOVS     R4, R0
                 ??_txe_byte_allocate_7:
  //     if (status == TX_SUCCESS)
  0x1000'3d7a: 0x2c00          CMP      R4, #0
  0x1000'3d7c: 0xd10f          BNE.N    ??_txe_byte_allocate_8 ; 0x1000'3d9e
  //         if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
  0x1000'3d7e: 0x4a0f          LDR.N    R2, [PC, #0x3c]        ; _tx_thread_system_state
  0x1000'3d80: 0x6810          LDR      R0, [R2]
  0x1000'3d82: 0xf3ef 0x8105   MRS      R1, IPSR
  0x1000'3d86: 0x4308          ORRS     R0, R0, R1
  0x1000'3d88: 0x2800          CMP      R0, #0
  0x1000'3d8a: 0xd008          BEQ.N    ??_txe_byte_allocate_8 ; 0x1000'3d9e
  //             if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
  0x1000'3d8c: 0x6811          LDR      R1, [R2]
  0x1000'3d8e: 0xf3ef 0x8005   MRS      R0, IPSR
  0x1000'3d92: 0x4301          ORRS     R1, R1, R0
  0x1000'3d94: 0xf1b1 0x3ff0   CMP.W    R1, #-252645136        ; 0xf0f0'f0f0
  0x1000'3d98: 0xd201          BCS.N    ??_txe_byte_allocate_8 ; 0x1000'3d9e
  //                 status =  TX_CALLER_ERROR;
  0x1000'3d9a: 0x2013          MOVS     R0, #19                ; 0x13
  0x1000'3d9c: 0x0004          MOVS     R4, R0
                 ??_txe_byte_allocate_8:
  //     if (status == TX_SUCCESS)
  0x1000'3d9e: 0x2c00          CMP      R4, #0
  0x1000'3da0: 0xd106          BNE.N    ??_txe_byte_allocate_9 ; 0x1000'3db0
  //         status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
  0x1000'3da2: 0x4643          MOV      R3, R8
  0x1000'3da4: 0x003a          MOVS     R2, R7
  0x1000'3da6: 0x0031          MOVS     R1, R6
  0x1000'3da8: 0x0028          MOVS     R0, R5
  0x1000'3daa: 0xf7ff 0xfc59   BL       _tx_byte_allocate      ; 0x1000'3660
  0x1000'3dae: 0x0004          MOVS     R4, R0
                 ??_txe_byte_allocate_9:
  //     return(status);
  0x1000'3db0: 0x0020          MOVS     R0, R4
  0x1000'3db2: 0xe8bd 0x83f2   POP.W    {R1, R4-R9, PC}
  0x1000'3db6: 0xbf00          NOP
                 `$d.32`:
                 ??_txe_byte_allocate_0:
  0x1000'3db8: 0x4259'5445     DC32     0x4259'5445            ; 'ETYB'
  0x1000'3dbc: 0x3800'0004     DC32     _tx_thread_system_state
  0x1000'3dc0: 0x3800'23c0     DC32     _tx_thread_current_ptr
  0x1000'3dc4: 0x3800'20f0     DC32     _tx_timer_thread
                 $t:
                 `.text8`:
                 _txe_block_release:
  // UINT  _txe_block_release(VOID *block_ptr)
  // {
  0x1000'3dc8: 0xb5f8          PUSH     {R3-R7, LR}
  0x1000'3dca: 0x0004          MOVS     R4, R0
  //     if (block_ptr == TX_NULL)
  0x1000'3dcc: 0x2c00          CMP      R4, #0
  0x1000'3dce: 0xd101          BNE.N    ??_txe_block_release_1 ; 0x1000'3dd4
  //         status =  TX_PTR_ERROR;
  0x1000'3dd0: 0x2003          MOVS     R0, #3
  0x1000'3dd2: 0xe012          B.N      ??_txe_block_release_2 ; 0x1000'3dfa
                 ??_txe_block_release_1:
  //         work_ptr =      TX_VOID_TO_UCHAR_POINTER_CONVERT(block_ptr);
  0x1000'3dd4: 0x0020          MOVS     R0, R4
  //         work_ptr =      TX_UCHAR_POINTER_SUB(work_ptr, (sizeof(UCHAR *)));
  0x1000'3dd6: 0x1f01          SUBS     R1, R0, #4
  //         indirect_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
  0x1000'3dd8: 0x000e          MOVS     R6, R1
  //         work_ptr =      *indirect_ptr;
  0x1000'3dda: 0x6830          LDR      R0, [R6]
  0x1000'3ddc: 0x0007          MOVS     R7, R0
  //         pool_ptr =      TX_UCHAR_TO_BLOCK_POOL_POINTER_CONVERT(work_ptr);
  0x1000'3dde: 0x003d          MOVS     R5, R7
  //         if (pool_ptr == TX_NULL)
  0x1000'3de0: 0x2d00          CMP      R5, #0
  0x1000'3de2: 0xd101          BNE.N    ??_txe_block_release_3 ; 0x1000'3de8
  //             status =  TX_PTR_ERROR;
  0x1000'3de4: 0x2003          MOVS     R0, #3
  0x1000'3de6: 0xe008          B.N      ??_txe_block_release_2 ; 0x1000'3dfa
                 ??_txe_block_release_3:
  //         else if  (pool_ptr -> tx_block_pool_id != TX_BLOCK_POOL_ID)
  0x1000'3de8: 0x6829          LDR      R1, [R5]
  0x1000'3dea: 0x4804          LDR.N    R0, ??_txe_block_release_0
                                                               ; 0x424c'4f43
  0x1000'3dec: 0x4281          CMP      R1, R0
  0x1000'3dee: 0xd001          BEQ.N    ??_txe_block_release_4 ; 0x1000'3df4
  //             status =  TX_PTR_ERROR;
  0x1000'3df0: 0x2003          MOVS     R0, #3
  0x1000'3df2: 0xe002          B.N      ??_txe_block_release_2 ; 0x1000'3dfa
                 ??_txe_block_release_4:
  //             status =  _tx_block_release(block_ptr);
  0x1000'3df4: 0x0020          MOVS     R0, R4
  0x1000'3df6: 0xf000 0xf827   BL       _tx_block_release      ; 0x1000'3e48
                 ??_txe_block_release_2:
  //     return(status);
  0x1000'3dfa: 0xbdf2          POP      {R1, R4-R7, PC}
                 `$d.32`:
                 ??_txe_block_release_0:
  0x1000'3dfc: 0x424c'4f43     DC32     0x424c'4f43            ; 'COLB'
                 $t:
                 `.text8`:
                 _tx_initialize_kernel_enter:
  // VOID  _tx_initialize_kernel_enter(VOID)
  // {
  0x1000'3e00: 0xb510          PUSH     {R4, LR}
  //     if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
  0x1000'3e02: 0x4c0e          LDR.N    R4, ??_tx_initialize_kernel_enter_0
                                                               ; _tx_thread_system_state
  0x1000'3e04: 0x6820          LDR      R0, [R4]
  0x1000'3e06: 0xf110 0x3f0f   CMN.W    R0, #252645135         ; 0xf0f'0f0f
  0x1000'3e0a: 0xd00a          BEQ.N    ??_tx_initialize_kernel_enter_1
                                                               ; 0x1000'3e22
  //         _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
  0x1000'3e0c: 0xf05f 0x30f0   MOVS.W   R0, #-252645136        ; 0xf0f0'f0f0
  0x1000'3e10: 0x6020          STR      R0, [R4]
  //         _tx_initialize_low_level();
  0x1000'3e12: 0xf7ff 0xfe07   BL       _tx_initialize_low_level
                                                               ; 0x1000'3a24
  //         _tx_initialize_high_level();
  0x1000'3e16: 0xf000 0xf861   BL       _tx_initialize_high_level
                                                               ; 0x1000'3edc
  //         TX_PORT_SPECIFIC_POST_INITIALIZATION
  0x1000'3e1a: 0x4909          LDR.N    R1, [PC, #0x24]        ; _tx_thread_preempt_disable
  0x1000'3e1c: 0x6808          LDR      R0, [R1]
  0x1000'3e1e: 0x1c40          ADDS     R0, R0, #1
  0x1000'3e20: 0x6008          STR      R0, [R1]
                 ??_tx_initialize_kernel_enter_1:
  //     _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
  0x1000'3e22: 0xf05f 0x30f0   MOVS.W   R0, #-252645136        ; 0xf0f0'f0f0
  0x1000'3e26: 0x6020          STR      R0, [R4]
  //     tx_application_define(_tx_initialize_unused_memory);
  0x1000'3e28: 0x4806          LDR.N    R0, [PC, #0x18]        ; _tx_initialize_unused_memory
  0x1000'3e2a: 0x6800          LDR      R0, [R0]
  0x1000'3e2c: 0xf7ff 0xfed3   BL       tx_application_define  ; 0x1000'3bd6
  //     _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
  0x1000'3e30: 0x2000          MOVS     R0, #0
  0x1000'3e32: 0x6020          STR      R0, [R4]
  //     _tx_thread_schedule();
  0x1000'3e34: 0xf7ff 0xfd90   BL       _tx_thread_schedule    ; 0x1000'3958
  // }
  0x1000'3e38: 0xbd10          POP      {R4, PC}
  0x1000'3e3a: 0xbf00          NOP
                 `$d.32`:
                 ??_tx_initialize_kernel_enter_0:
  0x1000'3e3c: 0x3800'0004     DC32     _tx_thread_system_state
  0x1000'3e40: 0x3800'23d8     DC32     _tx_thread_preempt_disable
  0x1000'3e44: 0x3800'23b8     DC32     _tx_initialize_unused_memory
                 $t:
                 `.text8`:
                 _tx_block_release:
  // UINT  _tx_block_release(VOID *block_ptr)
  // {
  0x1000'3e48: 0xe92d 0x4ffe   PUSH.W   {R1-R11, LR}
  0x1000'3e4c: 0x4683          MOV      R11, R0
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'3e4e: 0xf3ef 0x8710   MRS      R7, PRIMASK
  //     return(posture);
  0x1000'3e52: 0xb672          CPSID    i
  //     return(int_posture);
  0x1000'3e54: 0x4658          MOV      R0, R11
  //     work_ptr =        TX_UCHAR_POINTER_SUB(work_ptr, (sizeof(UCHAR *)));
  0x1000'3e56: 0xf1b0 0x0804   SUBS.W   R8, R0, #4
  //     next_block_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
  0x1000'3e5a: 0x46c1          MOV      R9, R8
  //     pool_ptr =        TX_UCHAR_TO_BLOCK_POOL_POINTER_CONVERT((*next_block_ptr));
  0x1000'3e5c: 0xf8d9 0xa000   LDR.W    R10, [R9]
  //     thread_ptr =  pool_ptr -> tx_block_pool_suspension_list;
  0x1000'3e60: 0xf8da 0x4020   LDR.W    R4, [R10, #0x20]
  //     if (thread_ptr != TX_NULL)
  0x1000'3e64: 0x2c00          CMP      R4, #0
  0x1000'3e66: 0xd028          BEQ.N    ??_tx_block_release_0  ; 0x1000'3eba
  //         (pool_ptr -> tx_block_pool_suspended_count)--;
  0x1000'3e68: 0xf8da 0x0024   LDR.W    R0, [R10, #0x24]
  0x1000'3e6c: 0x1e40          SUBS     R0, R0, #1
  0x1000'3e6e: 0xf8ca 0x0024   STR.W    R0, [R10, #0x24]
  //         suspended_count =  (pool_ptr -> tx_block_pool_suspended_count);
  0x1000'3e72: 0xf8da 0x0024   LDR.W    R0, [R10, #0x24]
  0x1000'3e76: 0x9000          STR      R0, [SP]
  //         if (suspended_count == TX_NO_SUSPENSIONS)
  0x1000'3e78: 0x9800          LDR      R0, [SP]
  0x1000'3e7a: 0x2800          CMP      R0, #0
  0x1000'3e7c: 0xd103          BNE.N    ??_tx_block_release_1  ; 0x1000'3e86
  //             pool_ptr -> tx_block_pool_suspension_list =  TX_NULL;
  0x1000'3e7e: 0x2000          MOVS     R0, #0
  0x1000'3e80: 0xf8ca 0x0020   STR.W    R0, [R10, #0x20]
  0x1000'3e84: 0xe007          B.N      ??_tx_block_release_2  ; 0x1000'3e96
                 ??_tx_block_release_1:
  //             next_thread =                                thread_ptr -> tx_thread_suspended_next;
  0x1000'3e86: 0x6f20          LDR      R0, [R4, #0x70]
  0x1000'3e88: 0x0005          MOVS     R5, R0
  //             pool_ptr -> tx_block_pool_suspension_list =  next_thread;
  0x1000'3e8a: 0xf8ca 0x5020   STR.W    R5, [R10, #0x20]
  //             previous_thread =                              thread_ptr -> tx_thread_suspended_previous;
  0x1000'3e8e: 0x6f60          LDR      R0, [R4, #0x74]
  0x1000'3e90: 0x0006          MOVS     R6, R0
  //             next_thread -> tx_thread_suspended_previous =  previous_thread;
  0x1000'3e92: 0x676e          STR      R6, [R5, #0x74]
  //             previous_thread -> tx_thread_suspended_next =  next_thread;
  0x1000'3e94: 0x6735          STR      R5, [R6, #0x70]
                 ??_tx_block_release_2:
  //         thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
  0x1000'3e96: 0x2000          MOVS     R0, #0
  0x1000'3e98: 0x66a0          STR      R0, [R4, #0x68]
  //         return_block_ptr =  TX_VOID_TO_INDIRECT_UCHAR_POINTER_CONVERT(thread_ptr -> tx_thread_additional_suspend_info);
  0x1000'3e9a: 0x6fe0          LDR      R0, [R4, #0x7c]
  0x1000'3e9c: 0x9001          STR      R0, [SP, #0x4]
  //         work_ptr =          TX_VOID_TO_UCHAR_POINTER_CONVERT(block_ptr);
  0x1000'3e9e: 0x46d8          MOV      R8, R11
  //         *return_block_ptr =  work_ptr;
  0x1000'3ea0: 0x9801          LDR      R0, [SP, #0x4]
  0x1000'3ea2: 0xf8c0 0x8000   STR.W    R8, [R0]
  //         thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
  0x1000'3ea6: 0x2000          MOVS     R0, #0
  0x1000'3ea8: 0xf8c4 0x0084   STR.W    R0, [R4, #0x84]
  //         _tx_thread_system_ni_resume(thread_ptr);
  0x1000'3eac: 0x0020          MOVS     R0, R4
  0x1000'3eae: 0xf7fe 0xfa39   BL       _tx_thread_system_ni_resume
                                                               ; 0x1000'2324
  //         TX_RESTORE
  0x1000'3eb2: 0x0038          MOVS     R0, R7
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'3eb4: 0xf380 0x8810   MSR      PRIMASK, R0
  // }
  0x1000'3eb8: 0xe00d          B.N      ??_tx_block_release_3  ; 0x1000'3ed6
                 ??_tx_block_release_0:
  //         *next_block_ptr =  pool_ptr -> tx_block_pool_available_list;
  0x1000'3eba: 0xf8da 0x0010   LDR.W    R0, [R10, #0x10]
  0x1000'3ebe: 0xf8c9 0x0000   STR.W    R0, [R9]
  //         pool_ptr -> tx_block_pool_available_list =  work_ptr;
  0x1000'3ec2: 0xf8ca 0x8010   STR.W    R8, [R10, #0x10]
  //         pool_ptr -> tx_block_pool_available++;
  0x1000'3ec6: 0xf8da 0x0008   LDR.W    R0, [R10, #0x8]
  0x1000'3eca: 0x1c40          ADDS     R0, R0, #1
  0x1000'3ecc: 0xf8ca 0x0008   STR.W    R0, [R10, #0x8]
  //         TX_RESTORE
  0x1000'3ed0: 0x0038          MOVS     R0, R7
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'3ed2: 0xf380 0x8810   MSR      PRIMASK, R0
                 ??_tx_block_release_3:
  // }
  0x1000'3ed6: 0x2000          MOVS     R0, #0
  0x1000'3ed8: 0xe8bd 0x8ffe   POP.W    {R1-R11, PC}
                 `.text25`:
                 _tx_initialize_high_level:
  // VOID    _tx_initialize_high_level(VOID)
  // {
  0x1000'3edc: 0xb580          PUSH     {R7, LR}
  //     _tx_thread_initialize();
  0x1000'3ede: 0xf000 0xf803   BL       _tx_thread_initialize  ; 0x1000'3ee8
  //     _tx_timer_initialize();
  0x1000'3ee2: 0xf000 0xf811   BL       _tx_timer_initialize   ; 0x1000'3f08
  // }
  0x1000'3ee6: 0xbd01          POP      {R0, PC}
                 `.text36`:
                 _tx_thread_initialize:
  //     _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
  0x1000'3ee8: 0x2120          MOVS     R1, #32                ; 0x20
  0x1000'3eea: 0x4804          LDR.N    R0, ??_tx_thread_initialize_0
                                                               ; _tx_thread_highest_priority
  0x1000'3eec: 0x6001          STR      R1, [R0]
  //     _tx_build_options =  _tx_build_options
  //                             | (((ULONG) (TX_MAX_PRIORITIES/32)) << 24)
  // #ifdef TX_NOT_INTERRUPTABLE
  //                             | (((ULONG) 1) << 31)
  // #endif
  // #ifdef TX_INLINE_THREAD_RESUME_SUSPEND
  //                             | (((ULONG) 1) << 30)
  // #endif
  // #ifdef TX_TIMER_PROCESS_IN_ISR
  //                             | (((ULONG) 1) << 23)
  // #endif
  // #ifdef TX_REACTIVATE_INLINE
  //                             | (((ULONG) 1) << 22)
  // #endif
  // #ifdef TX_DISABLE_STACK_FILLING
  //                             | (((ULONG) 1) << 21)
  // #endif
  // #ifdef TX_ENABLE_STACK_CHECKING
  //                             | (((ULONG) 1) << 20)
  // #endif
  // #ifdef TX_DISABLE_PREEMPTION_THRESHOLD
  //                             | (((ULONG) 1) << 19)
  // #endif
  // #ifdef TX_DISABLE_REDUNDANT_CLEARING
  //                             | (((ULONG) 1) << 18)
  // #endif
  // #ifdef TX_DISABLE_NOTIFY_CALLBACKS
  //                             | (((ULONG) 1) << 17)
  // #endif
  // #ifdef TX_BLOCK_POOL_ENABLE_PERFORMANCE_INFO
  //                             | (((ULONG) 1) << 16)
  // #endif
  // #ifdef TX_BYTE_POOL_ENABLE_PERFORMANCE_INFO
  //                             | (((ULONG) 1) << 15)
  // #endif
  // #ifdef TX_EVENT_FLAGS_ENABLE_PERFORMANCE_INFO
  //                             | (((ULONG) 1) << 14)
  // #endif
  // #ifdef TX_MUTEX_ENABLE_PERFORMANCE_INFO
  //                             | (((ULONG) 1) << 13)
  // #endif
  // #ifdef TX_QUEUE_ENABLE_PERFORMANCE_INFO
  //                             | (((ULONG) 1) << 12)
  // #endif
  // #ifdef TX_SEMAPHORE_ENABLE_PERFORMANCE_INFO
  //                             | (((ULONG) 1) << 11)
  // #endif
  // #ifdef TX_THREAD_ENABLE_PERFORMANCE_INFO
  //                             | (((ULONG) 1) << 10)
  // #endif
  // #ifdef TX_TIMER_ENABLE_PERFORMANCE_INFO
  //                             | (((ULONG) 1) << 9)
  // #endif
  // #ifdef TX_ENABLE_EVENT_TRACE
  //                             | (((ULONG) 1) << 8)
  // #endif
  // #if defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE)
  //                             | (((ULONG) 1) << 7)
  // #endif
  // #if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
  //                             | TX_PORT_SPECIFIC_BUILD_OPTIONS
  // #endif
  //                             ;
  0x1000'3eee: 0x4a04          LDR.N    R2, [PC, #0x10]        ; _tx_build_options
  0x1000'3ef0: 0x6811          LDR      R1, [R2]
  0x1000'3ef2: 0x4804          LDR.N    R0, [PC, #0x10]        ; 0xc15e'0e00
  0x1000'3ef4: 0x4301          ORRS     R1, R1, R0
  0x1000'3ef6: 0x6011          STR      R1, [R2]
  // }
  0x1000'3ef8: 0x4770          BX       LR
  0x1000'3efa: 0xbf00          NOP
                 `$d.32`:
                 ??_tx_thread_initialize_0:
  0x1000'3efc: 0x3800'23d4     DC32     _tx_thread_highest_priority
  0x1000'3f00: 0x3800'23e0     DC32     _tx_build_options
  0x1000'3f04: 0xc15e'0e00     DC32     0xc15e'0e00            ; '..^.'
                 $t:
                 `.text29`:
                 _tx_timer_initialize:
  // VOID  _tx_timer_initialize(VOID)
  // {
  0x1000'3f08: 0xb5f8          PUSH     {R3-R7, LR}
  0x1000'3f0a: 0xb086          SUB      SP, SP, #0x18
  //     _tx_timer_list_start =   &_tx_timer_list[0];
  0x1000'3f0c: 0x4915          LDR.N    R1, ??_tx_timer_initialize_0
                                                               ; _tx_timer_list
  0x1000'3f0e: 0x4816          LDR.N    R0, [PC, #0x58]        ; _tx_timer_list_start
  0x1000'3f10: 0x6001          STR      R1, [R0]
  //     _tx_timer_current_ptr =  &_tx_timer_list[0];
  0x1000'3f12: 0x4816          LDR.N    R0, [PC, #0x58]        ; _tx_timer_current_ptr
  0x1000'3f14: 0x6001          STR      R1, [R0]
  //     _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
  0x1000'3f16: 0x4816          LDR.N    R0, [PC, #0x58]        ; _tx_timer_list_end
  0x1000'3f18: 0x317c          ADDS     R1, R1, #124           ; 0x7c
  0x1000'3f1a: 0x6001          STR      R1, [R0]
  //     _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
  0x1000'3f1c: 0x6801          LDR      R1, [R0]
  0x1000'3f1e: 0x1d09          ADDS     R1, R1, #4
  0x1000'3f20: 0x6001          STR      R1, [R0]
  //     _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
  0x1000'3f22: 0x4d14          LDR.N    R5, [PC, #0x50]        ; _tx_timer_stack_start
  0x1000'3f24: 0x4814          LDR.N    R0, [PC, #0x50]        ; _tx_timer_thread_stack_area
  0x1000'3f26: 0x6028          STR      R0, [R5]
  //     _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
  0x1000'3f28: 0x4e14          LDR.N    R6, [PC, #0x50]        ; _tx_timer_stack_size
  0x1000'3f2a: 0xf44f 0x5080   MOV.W    R0, #4096              ; 0x1000
  0x1000'3f2e: 0x6030          STR      R0, [R6]
  //     _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
  0x1000'3f30: 0x4f13          LDR.N    R7, [PC, #0x4c]        ; _tx_timer_priority
  0x1000'3f32: 0x2005          MOVS     R0, #5
  0x1000'3f34: 0x6038          STR      R0, [R7]
                 ??_tx_timer_initialize_1:
  //         status =  _tx_thread_create(&_tx_timer_thread,
  //                                     TX_CONST_CHAR_TO_CHAR_POINTER_CONVERT("System Timer Thread"),
  //                                     _tx_timer_thread_entry,
  //                                     ((ULONG) TX_TIMER_ID),
  //                                     _tx_timer_stack_start, _tx_timer_stack_size,
  //                                     _tx_timer_priority, _tx_timer_priority, TX_NO_TIME_SLICE, TX_DONT_START);
  0x1000'3f36: 0x2000          MOVS     R0, #0
  0x1000'3f38: 0x9005          STR      R0, [SP, #0x14]
  0x1000'3f3a: 0x2000          MOVS     R0, #0
  0x1000'3f3c: 0x9004          STR      R0, [SP, #0x10]
  0x1000'3f3e: 0x6838          LDR      R0, [R7]
  0x1000'3f40: 0x9003          STR      R0, [SP, #0xc]
  0x1000'3f42: 0x6838          LDR      R0, [R7]
  0x1000'3f44: 0x9002          STR      R0, [SP, #0x8]
  0x1000'3f46: 0x6830          LDR      R0, [R6]
  0x1000'3f48: 0x9001          STR      R0, [SP, #0x4]
  0x1000'3f4a: 0x6828          LDR      R0, [R5]
  0x1000'3f4c: 0x9000          STR      R0, [SP]
  0x1000'3f4e: 0x4b0d          LDR.N    R3, [PC, #0x34]        ; 0x4154'494d
  0x1000'3f50: 0x4a0d          LDR.N    R2, [PC, #0x34]        ; _tx_timer_thread_entry
  0x1000'3f52: 0x490e          LDR.N    R1, [PC, #0x38]        ; ?_0
  0x1000'3f54: 0x480e          LDR.N    R0, [PC, #0x38]        ; _tx_timer_thread
  0x1000'3f56: 0xf7fe 0xff1d   BL       _tx_thread_create      ; 0x1000'2d94
  0x1000'3f5a: 0x0004          MOVS     R4, R0
  //     } while (status != TX_SUCCESS);
  0x1000'3f5c: 0x2c00          CMP      R4, #0
  0x1000'3f5e: 0xd1ea          BNE.N    ??_tx_timer_initialize_1
                                                               ; 0x1000'3f36
  // }
  0x1000'3f60: 0xb007          ADD      SP, SP, #0x1c
  0x1000'3f62: 0xbdf0          POP      {R4-R7, PC}
                 `$d.32`:
                 ??_tx_timer_initialize_0:
  0x1000'3f64: 0x3800'22cc     DC32     _tx_timer_list
  0x1000'3f68: 0x3800'2414     DC32     _tx_timer_list_start
  0x1000'3f6c: 0x3800'241c     DC32     _tx_timer_current_ptr
  0x1000'3f70: 0x3800'2418     DC32     _tx_timer_list_end
  0x1000'3f74: 0x3800'2428     DC32     _tx_timer_stack_start
  0x1000'3f78: 0x3800'1018     DC32     _tx_timer_thread_stack_area
  0x1000'3f7c: 0x3800'242c     DC32     _tx_timer_stack_size
  0x1000'3f80: 0x3800'2430     DC32     _tx_timer_priority
  0x1000'3f84: 0x4154'494d     DC32     0x4154'494d            ; 'MITA'
  0x1000'3f88: 0x1000'2b31     DC32     _tx_timer_thread_entry
  0x1000'3f8c: 0x1000'42b8     DC32     ?_0
  0x1000'3f90: 0x3800'20f0     DC32     _tx_timer_thread
                 $t:
                 `.text8`:
                 _tx_byte_pool_cleanup:
  // VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
  // {
  0x1000'3f94: 0xe92d 0x43f8   PUSH.W   {R3-R9, LR}
  0x1000'3f98: 0x0005          MOVS     R5, R0
  0x1000'3f9a: 0x000e          MOVS     R6, R1
  //                         pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
  0x1000'3f9c: 0xf8d5 0x906c   LDR.W    R9, [R5, #0x6c]
  //                         thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
  0x1000'3fa0: 0x2000          MOVS     R0, #0
  0x1000'3fa2: 0x66a8          STR      R0, [R5, #0x68]
  //                         pool_ptr -> tx_byte_pool_suspended_count--;
  0x1000'3fa4: 0xf8d9 0x0028   LDR.W    R0, [R9, #0x28]
  0x1000'3fa8: 0x1e40          SUBS     R0, R0, #1
  0x1000'3faa: 0xf8c9 0x0028   STR.W    R0, [R9, #0x28]
  //                         suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
  0x1000'3fae: 0xf8d9 0x4028   LDR.W    R4, [R9, #0x28]
  //                         if (suspended_count == TX_NO_SUSPENSIONS)
  0x1000'3fb2: 0x2c00          CMP      R4, #0
  0x1000'3fb4: 0xd103          BNE.N    ??_tx_byte_pool_cleanup_0
                                                               ; 0x1000'3fbe
  //                             pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
  0x1000'3fb6: 0x2000          MOVS     R0, #0
  0x1000'3fb8: 0xf8c9 0x0024   STR.W    R0, [R9, #0x24]
  0x1000'3fbc: 0xe00d          B.N      ??_tx_byte_pool_cleanup_1
                                                               ; 0x1000'3fda
                 ??_tx_byte_pool_cleanup_0:
  //                             next_thread =                                   thread_ptr -> tx_thread_suspended_next;
  0x1000'3fbe: 0x6f28          LDR      R0, [R5, #0x70]
  0x1000'3fc0: 0x0007          MOVS     R7, R0
  //                             previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
  0x1000'3fc2: 0x6f68          LDR      R0, [R5, #0x74]
  0x1000'3fc4: 0x4680          MOV      R8, R0
  //                             next_thread -> tx_thread_suspended_previous =   previous_thread;
  0x1000'3fc6: 0xf8c7 0x8074   STR.W    R8, [R7, #0x74]
  //                             previous_thread -> tx_thread_suspended_next =   next_thread;
  0x1000'3fca: 0xf8c8 0x7070   STR.W    R7, [R8, #0x70]
  //                             if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
  0x1000'3fce: 0xf8d9 0x0024   LDR.W    R0, [R9, #0x24]
  0x1000'3fd2: 0x42a8          CMP      R0, R5
  0x1000'3fd4: 0xd101          BNE.N    ??_tx_byte_pool_cleanup_1
                                                               ; 0x1000'3fda
  //                                 pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
  0x1000'3fd6: 0xf8c9 0x7024   STR.W    R7, [R9, #0x24]
                 ??_tx_byte_pool_cleanup_1:
  //                         if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
  0x1000'3fda: 0x6b28          LDR      R0, [R5, #0x30]
  0x1000'3fdc: 0x2809          CMP      R0, #9
  0x1000'3fde: 0xd105          BNE.N    ??_tx_byte_pool_cleanup_2
                                                               ; 0x1000'3fec
  //                             thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
  0x1000'3fe0: 0x2010          MOVS     R0, #16                ; 0x10
  0x1000'3fe2: 0xf8c5 0x0084   STR.W    R0, [R5, #0x84]
  //                             _tx_thread_system_ni_resume(thread_ptr);
  0x1000'3fe6: 0x0028          MOVS     R0, R5
  0x1000'3fe8: 0xf7fe 0xf99c   BL       _tx_thread_system_ni_resume
                                                               ; 0x1000'2324
                 ??_tx_byte_pool_cleanup_2:
  // }
  0x1000'3fec: 0xe8bd 0x83f1   POP.W    {R0, R4-R9, PC}
                 `.text8`:
                 _tx_thread_timeout:
  // VOID  _tx_thread_timeout(ULONG timeout_input)
  // {
  0x1000'3ff0: 0xe92d 0x41f0   PUSH.W   {R4-R8, LR}
  0x1000'3ff4: 0x0004          MOVS     R4, R0
  //     TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
  0x1000'3ff6: 0x0027          MOVS     R7, R4
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'3ff8: 0xf3ef 0x8810   MRS      R8, PRIMASK
  //     return(posture);
  0x1000'3ffc: 0xb672          CPSID    i
  //     return(int_posture);
  0x1000'3ffe: 0x6b38          LDR      R0, [R7, #0x30]
  0x1000'4000: 0x2804          CMP      R0, #4
  0x1000'4002: 0xd106          BNE.N    ??_tx_thread_timeout_1 ; 0x1000'4012
  //         _tx_thread_system_ni_resume(thread_ptr);
  0x1000'4004: 0x0038          MOVS     R0, R7
  0x1000'4006: 0xf7fe 0xf98d   BL       _tx_thread_system_ni_resume
                                                               ; 0x1000'2324
  //         TX_RESTORE
  0x1000'400a: 0x4640          MOV      R0, R8
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'400c: 0xf380 0x8810   MSR      PRIMASK, R0
  // }
  0x1000'4010: 0xe015          B.N      ??_tx_thread_timeout_2 ; 0x1000'403e
                 ??_tx_thread_timeout_1:
  //         _tx_thread_performance_timeout_count++;
  0x1000'4012: 0x490c          LDR.N    R1, ??_tx_thread_timeout_0
                                                               ; _tx_thread_performance_timeout_count
  0x1000'4014: 0x6808          LDR      R0, [R1]
  0x1000'4016: 0x1c40          ADDS     R0, R0, #1
  0x1000'4018: 0x6008          STR      R0, [R1]
  //         thread_ptr -> tx_thread_performance_timeout_count++;
  0x1000'401a: 0xf8d7 0x00c4   LDR.W    R0, [R7, #0xc4]
  0x1000'401e: 0x1c40          ADDS     R0, R0, #1
  0x1000'4020: 0xf8c7 0x00c4   STR.W    R0, [R7, #0xc4]
  //         suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
  0x1000'4024: 0x6eb8          LDR      R0, [R7, #0x68]
  0x1000'4026: 0x0005          MOVS     R5, R0
  //         suspension_sequence =  ((ULONG) 0);
  0x1000'4028: 0x2000          MOVS     R0, #0
  0x1000'402a: 0x0006          MOVS     R6, R0
  //         if (suspend_cleanup != TX_NULL)
  0x1000'402c: 0x0028          MOVS     R0, R5
  0x1000'402e: 0x2800          CMP      R0, #0
  0x1000'4030: 0xd002          BEQ.N    ??_tx_thread_timeout_3 ; 0x1000'4038
  //             (suspend_cleanup)(thread_ptr, suspension_sequence);
  0x1000'4032: 0x0031          MOVS     R1, R6
  0x1000'4034: 0x0038          MOVS     R0, R7
  0x1000'4036: 0x47a8          BLX      R5
                 ??_tx_thread_timeout_3:
  //         TX_RESTORE
  0x1000'4038: 0x4640          MOV      R0, R8
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'403a: 0xf380 0x8810   MSR      PRIMASK, R0
                 ??_tx_thread_timeout_2:
  // }
  0x1000'403e: 0xe8bd 0x81f0   POP.W    {R4-R8, PC}
  0x1000'4042: 0xbf00          NOP
                 `$d.32`:
                 ??_tx_thread_timeout_0:
  0x1000'4044: 0x3800'23fc     DC32     _tx_thread_performance_timeout_count
                 `$d.64`:
                 `_ftoa::pow10`:
  0x1000'4048: 0x3ff0'0000'00  DC64     0x3ff0'0000'0000'0000  ; 1.
               00'0000
  0x1000'4050: 0x4024'0000'00  DC64     0x4024'0000'0000'0000  ; 10.
               00'0000
  0x1000'4058: 0x4059'0000'00  DC64     0x4059'0000'0000'0000  ; 100.
               00'0000
  0x1000'4060: 0x408f'4000'00  DC64     0x408f'4000'0000'0000  ; 1000.
               00'0000
  0x1000'4068: 0x40c3'8800'00  DC64     0x40c3'8800'0000'0000  ; 1.E+4
               00'0000
  0x1000'4070: 0x40f8'6a00'00  DC64     0x40f8'6a00'0000'0000  ; 1.E+5
               00'0000
  0x1000'4078: 0x412e'8480'00  DC64     0x412e'8480'0000'0000  ; 1.E+6
               00'0000
  0x1000'4080: 0x4163'12d0'00  DC64     0x4163'12d0'0000'0000  ; 1.E+7
               00'0000
  0x1000'4088: 0x4197'd784'00  DC64     0x4197'd784'0000'0000  ; 1.E+8
               00'0000
  0x1000'4090: 0x41cd'cd65'00  DC64     0x41cd'cd65'0000'0000  ; 1.E+9
               00'0000
                 $t:
                 `.text8`:
                 _tx_thread_shell_entry:
  // VOID  _tx_thread_shell_entry(VOID)
  // {
  0x1000'4098: 0xb570          PUSH     {R4-R6, LR}
  //     TX_THREAD_GET_CURRENT(thread_ptr)
  0x1000'409a: 0x480f          LDR.N    R0, ??_tx_thread_shell_entry_0
                                                               ; _tx_thread_current_ptr
  0x1000'409c: 0x6804          LDR      R4, [R0]
  //     (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
  0x1000'409e: 0x6ca0          LDR      R0, [R4, #0x48]
  0x1000'40a0: 0x6c61          LDR      R1, [R4, #0x44]
  0x1000'40a2: 0x4788          BLX      R1
  //     if (_tx_thread_mutex_release != TX_NULL)
  0x1000'40a4: 0x490d          LDR.N    R1, [PC, #0x34]        ; _tx_thread_mutex_release
  0x1000'40a6: 0x6808          LDR      R0, [R1]
  0x1000'40a8: 0x2800          CMP      R0, #0
  0x1000'40aa: 0xd002          BEQ.N    ??_tx_thread_shell_entry_1
                                                               ; 0x1000'40b2
  //         (_tx_thread_mutex_release)(thread_ptr);
  0x1000'40ac: 0x0020          MOVS     R0, R4
  0x1000'40ae: 0x6809          LDR      R1, [R1]
  0x1000'40b0: 0x4788          BLX      R1
                 ??_tx_thread_shell_entry_1:
  //     __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
  0x1000'40b2: 0xf3ef 0x8510   MRS      R5, PRIMASK
  //     return(posture);
  0x1000'40b6: 0xb672          CPSID    i
  //     return(int_posture);
  0x1000'40b8: 0x2001          MOVS     R0, #1
  0x1000'40ba: 0x6320          STR      R0, [R4, #0x30]
  //     TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
  0x1000'40bc: 0xf3ef 0x8614   MRS      R6, CONTROL
  //     TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
  0x1000'40c0: 0xf036 0x0604   BICS.W   R6, R6, #4
  //     TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
  0x1000'40c4: 0xf386 0x8814   MSR      CONTROL, R6
  //     _tx_thread_system_ni_suspend(thread_ptr, ((ULONG) 0));
  0x1000'40c8: 0x2100          MOVS     R1, #0
  0x1000'40ca: 0x0020          MOVS     R0, R4
  0x1000'40cc: 0xf7fe 0xfb62   BL       _tx_thread_system_ni_suspend
                                                               ; 0x1000'2794
  //     TX_RESTORE
  0x1000'40d0: 0x0028          MOVS     R0, R5
  //     __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
  0x1000'40d2: 0xf380 0x8810   MSR      PRIMASK, R0
  // }
  0x1000'40d6: 0xbd70          POP      {R4-R6, PC}
                 `$d.32`:
                 ??_tx_thread_shell_entry_0:
  0x1000'40d8: 0x3800'23c0     DC32     _tx_thread_current_ptr
  0x1000'40dc: 0x3800'23dc     DC32     _tx_thread_mutex_release
                 $t:
                 `.text7`:
                 __iar_zero_init3:
  0x1000'40e0: 0xb430          PUSH     {R4, R5}
  0x1000'40e2: 0x2400          MOVS     R4, #0
  0x1000'40e4: 0xe012          B.N      ??__iar_zero_init3_1   ; 0x1000'410c
                 ??__iar_zero_init3_3:
  0x1000'40e6: 0xf850 0x3b04   LDR.W    R3, [R0], #0x4
  0x1000'40ea: 0x07da          LSLS     R2, R3, #31
  0x1000'40ec: 0xbf44          ITT      MI
  0x1000'40ee: 0x444b          ADDMI    R3, R3, R9
  0x1000'40f0: 0x1e5b          SUBMI    R3, R3, #1
                 ??__iar_zero_init3_2:
  0x1000'40f2: 0x1f09          SUBS     R1, R1, #4
  0x1000'40f4: 0x2904          CMP      R1, #4
  0x1000'40f6: 0xf843 0x4b04   STR.W    R4, [R3], #0x4
  0x1000'40fa: 0xd2fa          BCS.N    ??__iar_zero_init3_2   ; 0x1000'40f2
  0x1000'40fc: 0x461a          MOV      R2, R3
  0x1000'40fe: 0x078d          LSLS     R5, R1, #30
  0x1000'4100: 0xbf44          ITT      MI
  0x1000'4102: 0x801c          STRHMI   R4, [R3]
  0x1000'4104: 0x1c92          ADDMI    R2, R2, #2
  0x1000'4106: 0x07cb          LSLS     R3, R1, #31
  0x1000'4108: 0xbf48          IT       MI
  0x1000'410a: 0x7014          STRBMI   R4, [R2]
                 ??__iar_zero_init3_1:
  0x1000'410c: 0xf850 0x1b04   LDR.W    R1, [R0], #0x4
  0x1000'4110: 0x2900          CMP      R1, #0
  0x1000'4112: 0xd1e8          BNE.N    ??__iar_zero_init3_3   ; 0x1000'40e6
  0x1000'4114: 0xbc30          POP      {R4, R5}
  0x1000'4116: 0x4770          BX       LR
                 `.text_4`:
                 SystemInit:
  //   SCB->VTOR = (uint32_t) &(__VECTOR_TABLE[0]);
  0x1000'4118: 0x4907          LDR.N    R1, ??DataTable1_2     ; __Vectors
  0x1000'411a: 0x4808          LDR.N    R0, ??DataTable1_3     ; 0xe000'ed08
  0x1000'411c: 0x6001          STR      R1, [R0]
  //   SCB->CPACR |= ((3U << 10U*2U) |           /* enable CP10 Full Access */
  //                  (3U << 11U*2U)  );         /* enable CP11 Full Access */
  0x1000'411e: 0x4908          LDR.N    R1, ??DataTable1_4     ; 0xe000'ed88
  0x1000'4120: 0x6808          LDR      R0, [R1]
  0x1000'4122: 0xf450 0x0070   ORRS.W   R0, R0, #15728640      ; 0xf0'0000
  0x1000'4126: 0x6008          STR      R0, [R1]
  //   SystemCoreClock = SYSTEM_CLOCK;
  0x1000'4128: 0x4901          LDR.N    R1, ??DataTable1       ; 0x17d'7840
  0x1000'412a: 0x4802          LDR.N    R0, ??DataTable1_1     ; SystemCoreClock
  0x1000'412c: 0x6001          STR      R1, [R0]
  // }
  0x1000'412e: 0x4770          BX       LR
                 `$d.32`:
                 ??DataTable1:
  0x1000'4130: 0x017d'7840     DC32     0x17d'7840             ; '@x}.'
                 ??DataTable1_1:
  0x1000'4134: 0x3800'0000     DC32     SystemCoreClock
                 ??DataTable1_2:
  0x1000'4138: 0x1000'0000     DC32     __Vectors
                 ??DataTable1_3:
  0x1000'413c: 0xe000'ed08     DC32     0xe000'ed08            ; '....'
                 ??DataTable1_4:
  0x1000'4140: 0xe000'ed88     DC32     0xe000'ed88            ; '....'
                 $t:
                 `.text6`:
                 __iar_close_ttio:
  0x1000'4144: 0xb510          PUSH     {R4, LR}
  0x1000'4146: 0xf000 0xf813   BL       __iar_lookup_ttioh     ; 0x1000'4170
  0x1000'414a: 0x0002          MOVS     R2, R0
  0x1000'414c: 0x2300          MOVS     R3, #0
  0x1000'414e: 0x2400          MOVS     R4, #0
  0x1000'4150: 0x43e4          MVNS     R4, R4
  0x1000'4152: 0x6810          LDR      R0, [R2]
  0x1000'4154: 0x42a0          CMP      R0, R4
  0x1000'4156: 0xd003          BEQ.N    ??__iar_close_ttio_0   ; 0x1000'4160
  0x1000'4158: 0x0011          MOVS     R1, R2
  0x1000'415a: 0x2002          MOVS     R0, #2
  0x1000'415c: 0xbeab          BKPT     #0xab
  0x1000'415e: 0x6013          STR      R3, [R2]
                 ??__iar_close_ttio_0:
  0x1000'4160: 0x6850          LDR      R0, [R2, #0x4]
  0x1000'4162: 0x42a0          CMP      R0, R4
  0x1000'4164: 0xd003          BEQ.N    ??__iar_close_ttio_1   ; 0x1000'416e
  0x1000'4166: 0x1d11          ADDS     R1, R2, #4
  0x1000'4168: 0x2002          MOVS     R0, #2
  0x1000'416a: 0xbeab          BKPT     #0xab
  0x1000'416c: 0x6053          STR      R3, [R2, #0x4]
                 ??__iar_close_ttio_1:
  0x1000'416e: 0xbd10          POP      {R4, PC}
                 `.text7`:
                 __iar_lookup_ttioh:
  0x1000'4170: 0x4800          LDR.N    R0, ??__iar_lookup_ttioh_0
                                                               ; __iar_ttio_handles
  0x1000'4172: 0x4770          BX       LR
                 `$d.32`:
                 ??__iar_lookup_ttioh_0:
  0x1000'4174: 0x3800'0010     DC32     __iar_ttio_handles
                 $t:
                 `.text6`:
                 __iar_data_init3:
  0x1000'4178: 0xb510          PUSH     {R4, LR}
  0x1000'417a: 0x4a03          LDR.N    R2, ??__iar_data_init3_0
                                                               ; 0x68 (104)
  0x1000'417c: 0x447a          ADD      R2, R2, PC
  0x1000'417e: 0x3208          ADDS     R2, R2, #8
  0x1000'4180: 0x4c02          LDR.N    R4, [PC, #0x8]         ; 0x88 (136)
  0x1000'4182: 0x447c          ADD      R4, R4, PC
  0x1000'4184: 0x1da4          ADDS     R4, R4, #6
  0x1000'4186: 0xe003          B.N      ?Subroutine0           ; 0x1000'4190
                 `$d.32`:
                 ??__iar_data_init3_0:
  0x1000'4188: 0x0000'0068     DC32     104                    ; 'h...'
  0x1000'418c: 0x0000'0088     DC32     136                    ; '....'
                 $t:
                 `.text_4`:
                 ?Subroutine0:
  0x1000'4190: 0xe004          B.N      ??Subroutine0_0        ; 0x1000'419c
                 ??Subroutine0_1:
  0x1000'4192: 0x6811          LDR      R1, [R2]
  0x1000'4194: 0x1d10          ADDS     R0, R2, #4
  0x1000'4196: 0x4411          ADD      R1, R1, R2
  0x1000'4198: 0x4788          BLX      R1
  0x1000'419a: 0x4602          MOV      R2, R0
                 ??Subroutine0_0:
  0x1000'419c: 0x42a2          CMP      R2, R4
  0x1000'419e: 0xd1f8          BNE.N    ??Subroutine0_1        ; 0x1000'4192
  0x1000'41a0: 0xbd10          POP      {R4, PC}
  0x1000'41a2: 0x0000          MOVS     R0, R0
                 `.text8`:
                 Reset_Handler:
  //                 ldr      r0, =__INITIAL_SP
  0x1000'41a4: 0x4805          LDR.N    R0, [PC, #0x14]        ; CSTACK$$Limit
  //                 msr      psp, r0
  0x1000'41a6: 0xf380 0x8809   MSR      PSP, R0
  //                 ldr      r0, =__STACK_LIMIT
  0x1000'41aa: 0x4805          LDR.N    R0, [PC, #0x14]        ; CSTACK$$Base
  //                 msr      msplim, r0
  0x1000'41ac: 0xf380 0x880a   MSR      MSPLIM, R0
  //                 msr      psplim, r0
  0x1000'41b0: 0xf380 0x880b   MSR      PSPLIM, R0
  //                 LDR      R0, =SystemInit
  0x1000'41b4: 0x4803          LDR.N    R0, [PC, #0xc]         ; SystemInit
  //                 BLX      R0
  0x1000'41b6: 0x4780          BLX      R0
  //                 LDR      R0, =__iar_program_start
  0x1000'41b8: 0x4803          LDR.N    R0, [PC, #0xc]         ; __iar_program_start
  //                 BX       R0
  0x1000'41ba: 0x4700          BX       R0
                 `$d.32`:
  //                 SECTION .text:CODE:REORDER:NOROOT(1)
  0x1000'41bc: 0x3800'3448     DC32     CSTACK$$Limit
  //                 SECTION .text:CODE:REORDER:NOROOT(1)
  0x1000'41c0: 0x3800'2448     DC32     CSTACK$$Base
  //                 SECTION .text:CODE:REORDER:NOROOT(1)
  0x1000'41c4: 0x1000'4119     DC32     SystemInit
  //                 SECTION .text:CODE:REORDER:NOROOT(1)
  0x1000'41c8: 0x1000'425d     DC32     __iar_program_start
                 $t:
                 `.text6`:
                 __iar_init_vfp:
  0x1000'41cc: 0xf64e 0x5188   MOVW     R1, #60808             ; 0xed88
  0x1000'41d0: 0xf2ce 0x0100   MOVT     R1, #57344             ; 0xe000
  0x1000'41d4: 0x6808          LDR      R0, [R1]
  0x1000'41d6: 0xf440 0x0070   ORR.W    R0, R0, #15728640      ; 0xf0'0000
  0x1000'41da: 0x6008          STR      R0, [R1]
  0x1000'41dc: 0xf3bf 0x8f4f   DSB
  0x1000'41e0: 0xf3bf 0x8f6f   ISB
  0x1000'41e4: 0xf04f 0x7001   MOV.W    R0, #33816576          ; 0x204'0000
  0x1000'41e8: 0xeee1 0x0a10   VMSR     FPSCR, R0
  0x1000'41ec: 0x4770          BX       LR
  0x1000'41ee: 0x0000          MOVS     R0, R0
                 $d:
                 Region$$Table$$Base:
                 `.iar.init_table$$Base`:
  0x1000'41f0: 0xffff'fef1     DC32     -271                   ; '....'
  0x1000'41f4: 0x0000'242c     DC32     __Vectors_Size + 0x1c6c
  0x1000'41f8: 0x3800'0018     DC32     `tx_application_define::tx_memory`
  0x1000'41fc: 0x0000'0000     DC32     0                      ; '....'
  0x1000'4200: 0xffff'da3f     DC32     -9665                  ; '?...'
  0x1000'4204: 0x0000'0018     DC32     24                     ; '....'
  0x1000'4208: 0x0000'0070     DC32     112                    ; 'p...'
  0x1000'420c: 0x3800'0000     DC32     SystemCoreClock
  0x1000'4210: 0x0000'0000     DC32     0                      ; '....'
                 $t:
                 `.text8`:
                 Region$$Table$$Limit:
                 `.iar.init_table$$Limit`:
                 __cmain:
                 ?main:
  0x1000'4214: 0xf000 0xf80d   BL       __low_level_init       ; 0x1000'4232
  0x1000'4218: 0x2800          CMP      R0, #0
  0x1000'421a: 0xd001          BEQ.N    _call_main             ; 0x1000'4220
  0x1000'421c: 0xf7ff 0xffac   BL       __iar_data_init3       ; 0x1000'4178
                 `.text_3`:
                 _call_main:
  0x1000'4220: 0xf3af 0x8000   NOP.W
  0x1000'4224: 0x2000          MOVS     R0, #0
  0x1000'4226: 0xf3af 0x8000   NOP.W
  0x1000'422a: 0xf7ff 0xfd04   BL       main                   ; 0x1000'3c36
  0x1000'422e: 0xf000 0xf802   BL       exit                   ; 0x1000'4236
                 `.text6`:
                 __low_level_init:
  0x1000'4232: 0x2001          MOVS     R0, #1
  0x1000'4234: 0x4770          BX       LR
                 `.text6`:
                 exit:
  0x1000'4236: 0xf000 0xb801   B.W      _exit                  ; 0x1000'423c
  0x1000'423a: 0x0000          MOVS     R0, R0
                 `.text6`:
                 _exit:
  0x1000'423c: 0x4607          MOV      R7, R0
                 `.text_4`:
                 @1000423e:
  0x1000'423e: 0x4638          MOV      R0, R7
  0x1000'4240: 0xf000 0xf802   BL       __exit                 ; 0x1000'4248
  0x1000'4244: 0xe7fb          B.N      @1000423e
  0x1000'4246: 0x0000          MOVS     R0, R0
                 `.text6`:
                 __exit:
  0x1000'4248: 0xb580          PUSH     {R7, LR}
  0x1000'424a: 0xf7ff 0xff7b   BL       __iar_close_ttio       ; 0x1000'4144
  0x1000'424e: 0x4a02          LDR.N    R2, ??__exit_1         ; 0x2'0026
                 ??__exit_0:
  0x1000'4250: 0x0011          MOVS     R1, R2
  0x1000'4252: 0x2018          MOVS     R0, #24                ; 0x18
  0x1000'4254: 0xbeab          BKPT     #0xab
  0x1000'4256: 0xe7fb          B.N      ??__exit_0             ; 0x1000'4250
                 `$d.32`:
                 ??__exit_1:
  0x1000'4258: 0x0002'0026     DC32     0x2'0026               ; '&...'
                 $t:
                 `.text6`:
                 __iar_program_start:
  0x1000'425c: 0x4805          LDR.N    R0, [PC, #0x14]        ; 0xfef5'eda5
  0x1000'425e: 0x4601          MOV      R1, R0
  0x1000'4260: 0xb403          PUSH     {R0, R1}
  0x1000'4262: 0x4668          MOV      R0, SP
  0x1000'4264: 0xf380 0x8809   MSR      PSP, R0
  0x1000'4268: 0xf3af 0x8000   NOP.W
  0x1000'426c: 0xf7ff 0xffae   BL       __iar_init_vfp         ; 0x1000'41cc
  0x1000'4270: 0xf7ff 0xffd0   BL       ?main                  ; 0x1000'4214
                 `$d.32`:
  0x1000'4274: 0xfef5'eda5     DC32     0xfef5'eda5            ; '....'
                 $d:
  0x1000'4278: 0x017d'7840     DC32     0x17d'7840             ; '@x}.'
  0x1000'427c: 0xf0f0'f0f0     DC32     0xf0f0'f0f0            ; '....'
  0x1000'4280: 0x0000'0000     DC32     0                      ; '....'
  0x1000'4284: 0x0000'0001     DC32     1                      ; '....'
  0x1000'4288: 0xffff'ffff     DC32     -1                     ; '....'
  0x1000'428c: 0xffff'ffff     DC32     -1                     ; '....'
                 `$d.8`:
                 ?_2:
  0x1000'4290: 0x68 0x65 0x6c  DC8      'hello threadx %d\r\n'
               0x6c 0x6f 0x20
               0x74 0x68 0x72
               0x65 0x61 0x64
               0x78 0x20 0x25
               0x64 0x0d 0x0a
  0x1000'42a2: 0x00 0x00       DC8      0, 0                   ; '..'
                 ?_6:
  0x1000'42a4: 0x68 0x65 0x6c  DC8      'hello world - %d.\r\n'
               0x6c 0x6f 0x20
               0x77 0x6f 0x72
               0x6c 0x64 0x20
               0x2d 0x20 0x25
               0x64 0x2e 0x0d
               0x0a
  0x1000'42b7: 0x00            DC8      0                      ; '.'
                 ?_0:
  0x1000'42b8: 0x53 0x79 0x73  DC8      "System Timer Thread"
               0x74 0x65 0x6d
               0x20 0x54 0x69
               0x6d 0x65 0x72
               0x20 0x54 0x68
               0x72 0x65 0x61
               0x64 0x00
                 ?_3:
  0x1000'42cc: 0x74 0x78 0x5f  DC8      "tx_pool"
               0x70 0x6f 0x6f
               0x6c 0x00
                 ?_4:
  0x1000'42d4: 0x74 0x78 0x5f  DC8      "tx_task"
               0x74 0x61 0x73
               0x6b 0x00
                 ?_5:
  0x1000'42dc: 0x53 0x74 0x61  DC8      "Start\r\n"
               0x72 0x74 0x0d
               0x0a 0x00
                 ?_1:
  0x1000'42e4: 0x66 0x6e 0x69  DC8      "fni-"
               0x2d 0x00
                 $d:
  0x1000'42e9: 0x00            DC8      0                      ; '.'
  0x1000'42ea: 0x0000          DC16     0                      ; '..'
                 `$d.8`:
                 ?_2:
  0x1000'42ec: 0x66 0x6e 0x69  DC8      "fni+"
               0x2b 0x00
                 $d:
  0x1000'42f1: 0x00            DC8      0                      ; '.'
  0x1000'42f2: 0x0000          DC16     0                      ; '..'
                 __iar_SB:

Errors: none
Warnings: none
